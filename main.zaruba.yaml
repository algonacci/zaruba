includes:
  - ./z.config.zaruba.yaml
  - ./z.input.zaruba.yaml
  - ./z.taskDocker.zaruba.yaml
  - ./z.taskTest.zaruba.yaml
  - ./z.taskTestPlayground.zaruba.yaml
  - ./z.taskTestHelm.zaruba.yaml

tasks:

  build:
    icon: ðŸš§
    location: ./
    extend: core.runShellScript
    dependencies:
      - clearLog
    config:
      start: |
        set -e
        rm -f zaruba
        go build

  serveCoverage:
    icon: ðŸ¥—
    location: ./coverage
    extend: serveHttp
    dependencies:
      - clearLog
      - testCore

  pushRepo:
    icon: ðŸ”¼
    location: ./
    extend: core.runShellScript
    dependencies:
      - clearLog
    config:
      start: |
        git add . -A
        git commit -m "Save changes before pushing"
        git push -u origin HEAD

  push:
    icon: ðŸ”¼
    dependencies:
      - clearLog
      - pushDocker
      - pushRepo

  makeTaskDocs:
    location: ./
    extend: core.runShellScript
    dependencies:
      - build
    config:
      start: |
        set -e
        rm -Rf ./docs/tasks
        mkdir -p ./docs/tasks
        echo "This directory is autogenerated do not modify" > ./docs/tasks/README.md
        REPLACEMENT_MAP="$(./zaruba setMapElement "{}" "${ZARUBA_HOME}" '${ZARUBA_HOME}')"
        LINES="$(./zaruba readLines "./scripts/core.zaruba.yaml")"
        LINE_INDEX=0
        MAX_LINE_INDEX=$(($(./zaruba getListLength "$LINES")-1))
        for LINE_INDEX in $(seq 0 "${MAX_LINE_INDEX}")
        do
          LINE="$(./zaruba getFromList "${LINES}" "${LINE_INDEX}")"
          SUBMATCH="$(./zaruba str submatch "'""${LINE}""'" ".*\./tasks\/(.*)\.zaruba\.yaml.*")"
          if [ "$(./zaruba getListLength "${SUBMATCH}")" = 2 ]
          then
            TASK_NAME="$(./zaruba getFromList "${SUBMATCH}" 1)"
            echo ${TASK_NAME}
            TASK_EXPLANATION=$(./zaruba please "${TASK_NAME}" -x -n)
            TASK_EXPLANATION=$(./zaruba str replace "${TASK_EXPLANATION}" "${REPLACEMENT_MAP}")
            TASK_EXPLANATION_LINES=$(./zaruba split "${TASK_EXPLANATION}")
            DOCS="[]"
            DOCS=$(./zaruba appendToList "[]" "# ${TASK_NAME}" "\`\`\`")
            DOCS=$(./zaruba mergeList "${DOCS}" "${TASK_EXPLANATION_LINES}")
            DOCS=$(./zaruba appendToList "${DOCS}" "\`\`\`")
            DOC_FILE="./docs/tasks/${TASK_NAME}.md"
            ./zaruba writeLines "${DOC_FILE}" "${DOCS}"
          fi
        done