tasks:
 
  setupUbuntu:
    icon: 🔨
    description: |
      Setup your ubuntu machine (or Ubuntu WSL).
      This command will install:
      * pipenv
      * nvm
      * netcat
      * and some other utilities
      into your machine.
      USAGE: sudo -E zaruba please setupUbuntu.
      LIMITATION: Your home directory should be match to your user name.
    extend: core.runShellScript
    config:
      script: |
        set -e
        {{ $d := .Decoration -}}
        export PIPENV_PIPFILE="${PYTHON_UTIL}/Pipfile"
        if echo "${HOME}" | grep -q "/root$" 
        then
          echo '⚠️ {{ $d.Red }}Your ${HOME} is seems to be root home directory:{{ $d.Normal }}'
          echo "⚠️ {{ $d.Red }}${HOME}{{ $d.Normal }}"
          echo 'You might want to re-run this command with {{ $d.Yellow }}`sudo -E`{{ $d.Normal }} option instead'
          echo "{{ $d.Bold }}{{ $d.Yellow }}Do you really want to continue with current home directory? (Y/n){{ $d.Normal }}"
          read INPUT
          if [ "${INPUT}" != "Y" ] && [ "${INPUT}" != "y" ]
          then
            echo "👏 Wise choice. Setup canceled"
            exit 0
          fi
        fi

        echo "📡 {{ $d.Bold }}{{ $d.Yellow }}Update repository{{ $d.Normal }}"
        apt-get update
        apt-get upgrade -y
        echo "🔽 {{ $d.Bold }}{{ $d.Yellow }}Install packages{{ $d.Normal }}"
        apt-get install -y ncat make wget curl git golang python3 python3-pip python-is-python3 nodejs npm

        if [ -z "$(docker -v)" ]
        then
          echo "🐳 {{ $d.Bold }}{{ $d.Yellow }}Install docker{{ $d.Normal }}"
          apt-get install docker.io
        else
          echo "👏 {{ $d.Bold }}{{ $d.Yellow }}Docker was already installed{{ $d.Normal }}"
        fi

        if [ -z "$(pipenv --version)" ]
        then
          echo "🐍 {{ $d.Bold }}{{ $d.Yellow }}Install pipenv{{ $d.Normal }}"
          pip3 install pipenv
        else
          echo "👏 {{ $d.Bold }}{{ $d.Yellow }}Pipenv was already installed{{ $d.Normal }}"
        fi

        CURRENT_USER=$(pipenv run python "${PYTHON_UTIL}/get_segment.py" "${HOME}" / -1)
        if [ -d "${HOME}/.nvm" ]
        then
          echo "👏 {{ $d.Bold }}{{ $d.Yellow }}NVM was already installed{{ $d.Normal }}"
        else
          echo "🐸 {{ $d.Bold }}{{ $d.Yellow }}Install NVM{{ $d.Normal }}"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.sh | bash
          NVM_DIR="$HOME/.nvm"
          \. "$NVM_DIR/nvm.sh"
          nvm install node
          chown -R "${CURRENT_USER}" "$NVM_DIR"
          if [ -f ${HOME}/.zshrc ]
          then
            echo '' >> "${HOME}/.zshrc"
            echo 'export NVM_DIR="$HOME/.nvm"' >> "${HOME}/.zshrc"
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm' >> "${HOME}/.zshrc"
            echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion' >> "${HOME}/.zshrc"
          fi
        fi

        if [ -z "$(tsc -v)" ]
        then
          echo "🐸 {{ $d.Bold }}{{ $d.Yellow }}Install typescript{{ $d.Normal }}"
          npm install -g typescript
        else
          echo "👏 {{ $d.Bold }}{{ $d.Yellow }}Typescript was already installed{{ $d.Normal }}"
        fi

        if [ -z "$(node-gyp -v)" ]
        then
          echo "🐸 {{ $d.Bold }}{{ $d.Yellow }}Install node-gyp{{ $d.Normal }}"
          npm install -g node-gyp
        else
          echo "👏 {{ $d.Bold }}{{ $d.Yellow }}Node-gyp was already installed{{ $d.Normal }}"
        fi

        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
        echo "TIPS: If you are using WSL, please enable WSL2 Backend for best experience"
        echo "https://docs.docker.com/docker-for-windows/wsl/"
