includes:
  - ./core.generator.zaruba.yaml
  - ./core.run.zaruba.yaml
  - ./core.service.zaruba.yaml
  - ./core.setup.zaruba.yaml
  - ./core.config.zaruba.yaml

inputs:

  advertisement.show:
    default: yes
    options: [yes, no]
    allowCustom: false
    description: Show advertisement
    prompt: Show advertisement
  
  log.keyword:
    description: Task regex pattern
    prompt: Task regex pattern

  server.httpPort:
    default: 8080
    options: [8080, 8000, 3000, 5000]
    validation: ^[0-9]+$
    description: HTTP port to be used
    prompt: HTTP port to be used
  
  subrepo.url:
    validation: ^.+$
    description: Subrepo url
    prompt: Subrepo url (Required)
  
  subrepo.prefix:
    description: Subrepo directory name
    prompt: Subrepo directory name (Can be blank)

  subrepo.name:
    description: Subrepo name
    prompt: Subrepo name (Can be blank)

  docker.env:
    default: default
    validation: ^.+$
    description: Docker env for getting image prefix
    prompt: Docker env for getting image prefix (Required)
  
  helm.env:
    default: default
    validation: ^.+$
    description: Helm env
    prompt: Helm env (Required)
  
  kube.context:
    default: docker-desktop
    validation: ^.+$
    description: Kube context
    prompt: Kube context (Required). Perform `kubectl config get-contexts` to get possible values
  
  link.from:
    validation: ^.+$
    description: Link source
    prompt: Link source (Required)

  link.to:
    validation: ^.+$
    description: Link source
    prompt: Link destination (Required)
  
  variable.name:
    validation: ^.+$
    description: Variable name
    prompt: Variable name (Required)
  
  variable.value:
    validation: ^.+$
    description: Variable value
    prompt: Variable value (Required)

tasks:

  core.showAdv:
    icon: ‚òï
    private: true
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    saveLog: false
    config:
      start: |
        {{ $showAdvertisement := .GetValue "advertisement.show" -}}
        {{ if .IsTrue $showAdvertisement }}invoke_core_py show_advertisement{{ end }}


  showVersion:
    icon: üîé
    description: |
      Show zaruba's current version.
    extend: core.runCoreScript
    configRef: core.showVersion
    config:
      start: |
        cd ${ZARUBA_HOME}
        {{ .GetConfig "showVersionScript" }}


  update:
    icon: üîÑ
    description: |
      Update zaruba to the latest version.
    extend: showVersion
    configRef: core.showVersion
    config:
      start: |
        {{ $d := .Decoration -}}
        cd ${ZARUBA_HOME}
        echo "üîΩ {{ $d.Bold }}{{ $d.Yellow }}Pull zaruba{{ $d.Normal }}"
        git pull origin master
        git fetch origin --tags
        echo "üöß {{ $d.Bold }}{{ $d.Yellow }}Compile zaruba{{ $d.Normal }}"
        go build
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Zaruba ready!!!{{ $d.Normal }}"
        {{ .GetConfig "showVersionScript" }}


  serveHttp:
    icon: üåê
    description: |
      Run static web server from your working directory.
    extend: core.startService
    inputs:
    - server.httpPort
    lconfig:
      ports: ['{{ .GetValue "server.httpPort" }}']
    start: 
    - python 
    - "-m"
    - http.server
    - '{{ $ports := .GetLConfig "ports" }}{{ index $ports 0 }}'


  clearPreviousValues:
    icon: üî•
    description: |
      Clear log
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        rm -Rf .previous.values.yaml
        echo "{{ $d.Bold }}{{ $d.Yellow }}Previous values removed{{ $d.Normal }}"

  clearLog:
    icon: üî•
    description: |
      Clear log
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        rm -Rf log.zaruba.csv
        echo "{{ $d.Bold }}{{ $d.Yellow }}Log removed{{ $d.Normal }}"


  showLog:
    icon: üîé
    description: |
      Show log for all/particular tasks using regex
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    saveLog: false
    inputs:
    - log.keyword
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_be_file "log.zaruba.csv" "{{ $d.Bold }}{{ $d.Red }}Log is not exist{{ $d.Normal }}"
        TASK="{{ if .GetValue "log.keyword" }}{{ .GetValue "log.keyword" }}{{ else }}.*{{ end }}"
        invoke_core_py show_log "log.zaruba.csv" "${TASK}"


  core.isValidSubrepos:
    icon: üîç
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          invoke_core_sh should_not_be_empty "${URL}" "{{ $d.Bold }}{{ $d.Red }}Subrepo ${NAME} doesn't have url{{ $d.Normal }}"
          invoke_core_sh should_not_be_empty "${PREFIX}" "{{ $d.Bold }}{{ $d.Red }}Subrepo ${NAME} doesn't have prefix{{ $d.Normal }}"
        {{ end }}
        echo "{{ $d.Bold }}{{ $d.Yellow }}All Subrepos are valid{{ $d.Normal }}"


  initSubrepos:
    icon: üì¶
    description: |
      Init subrepositories.
      ARGUMENTS:
        subrepo::<name>::prefix   : Prefix (directory name) of the subrepo
        subrepo::<name>::url      : Remote url of the subrepo
        subrepo::<name>::name     : Origin name of the subrepo
      TIPS:
        It is recommended to put `subrepo` arguments in `default.values.yaml`.
        In order to do that, you can invoke `zaruba please addSubrepo <subrepo.url=remote-url>`
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.isValidSubrepos
    - core.setupPyUtil
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        BRANCH="{{ if .GetValue "defaultBranch" }}{{ .GetValue "defaultBranch" }}{{ else }}main{{ end }}"
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(invoke_core_py is_in_array "${NAME}", "\n" "${ORIGINS}")
          if [ "$ORIGIN_EXISTS" = "1" ]
          then
            git remote set-url "${NAME}" "${URL}"
          elif [ "$ORIGIN_EXISTS" = "0" ]
          then
            echo "$NAME origin is not exist"
            invoke_core_sh git_save "Save works before pulling from ${URL}"
            PREFIX_EXISTS=0
            if [ -d "$PREFIX" ]
            then
              PREFIX_EXISTS=1
              mv "${PREFIX}" "${PREFIX}.bak"
              invoke_core_sh git_save "Temporarily move ${PREFIX}"
            fi
            invoke_core_sh git_init_subrepo "${NAME}" "${PREFIX}" "${URL}" "${BRANCH}"
            if [ "$PREFIX_EXISTS" = "1" ]
            then
              rm -Rf "${PREFIX}"
              mv "${PREFIX}.bak" "${PREFIX}"
              invoke_core_sh git_save "Restore ${PREFIX}"
            fi
          fi
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos Initialized{{ $d.Normal }}"


  addSubrepo:
    icon: ü•Ç
    description: |
      Add subrepository.
      TIPS: To init added subrepositories, you should perform `zaruba please initSubrepos`
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.setupPyUtil
    inputs:
    - subrepo.url
    - subrepo.prefix
    - subrepo.name
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        URL="{{ .GetValue "subrepo.url" }}"
        invoke_core_sh should_not_be_empty "${URL}" "{{ $d.Bold }}{{ $d.Red }}subrepo.url is not defined{{ $d.Normal }}"
        {{ if .GetValue "subrepo.prefix" }}
          PREFIX="{{ .GetValue "subrepo.prefix" }}"
        {{ else }}
          PREFIX=$(invoke_core_py get_segment "${URL}" "/" "-1")
          PREFIX=$(invoke_core_py get_segment "${PREFIX}" "." "0")
        {{ end }}
        NAME="{{ if .GetValue "subrepo.name" }}{{ .GetValue "subrepo.name" }}{{ else }}${PREFIX}{{ end }}"
        invoke_core_py set_project_value "subrepo::${NAME}::prefix" "${PREFIX}"
        invoke_core_py set_project_value "subrepo::${NAME}::url" "${URL}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepo ${NAME} has been added{{ $d.Normal }}"


  pushSubrepos:
    icon: üîº
    description: |
      Publish subrepositories.
      ARGUMENTS:
        subrepo::<name>::prefix   : Prefix (directory name) of the subrepo
        subrepo::<name>::url      : Remote url of the subrepo
    extend: core.runCoreScript
    dependencies:
    - initSubrepos
    - updateLinks
    - core.setupPyUtil
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        BRANCH="{{ if .GetValue "defaultBranch" }}{{ .GetValue "defaultBranch" }}{{ else }}main{{ end }}"
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(invoke_core_py is_in_array "${NAME}" "\n" "${ORIGINS}")
          if [ $ORIGIN_EXISTS = 1 ]
          then
            invoke_core_sh git_save.sh" "Save works before p
            git subtree push --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos pushed{{ $d.Normal }}"


  pullSubrepos:
    icon: üîΩ
    description: |
      Pull subrepositories.
      ARGUMENTS:
        subrepo::<name>::prefix   : Prefix (directory name) of the subrepo
        subrepo::<name>::url      : Remote url of the subrepo
    extend: core.runCoreScript
    dependencies:
    - initSubrepos
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        ORIGINS=$(git remote)
        BRANCH="{{ if .GetValue "defaultBranch" }}{{ .GetValue "defaultBranch" }}{{ else }}main{{ end }}"
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(invoke_core_py is_in_array "${NAME}" "\n" "${ORIGINS}")
          if [ $ORIGIN_EXISTS = 1 ]
          then
            invoke_core_sh git_save "Save works before pull"
            git subtree pull --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos pulled{{ $d.Normal }}"


  core.isProject:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_be_file "main.zaruba.yaml" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is a valid zaruba project{{ $d.Normal }}"


  core.isContainHelmCharts:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_be_dir "helm-deployments" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory contains helm deployments{{ $d.Normal }}"


  core.isNotProject:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_not_be_file "main.zaruba.yaml" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is not a zaruba project{{ $d.Normal }}"


  core.isNotContainHelmCharts:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_not_be_dir "helm-deployments" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory does not contain helm deployments{{ $d.Normal }}"


  initProject:
    icon: üöß
    description: |
      Initiate empty zaruba project.
    extend: core.runCoreScript
    saveLog: false
    dependencies:
    - core.isNotProject
    config:
      start: |
        {{ $d := .Decoration -}}
        git init
        cp -rT "${ZARUBA_HOME}/scripts/templates/project/" .
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Project created{{ $d.Normal }}"

 
  initHelm:
    icon: üö¢
    description: |
      Create helm deployment artifacts.
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.isNotContainHelmCharts
    config:
      start: |
        {{- $d := .Decoration -}}
        invoke_core_py create_helm_task
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Helm charts created{{ $d.Normal }}"


  updateEnv:
    icon: üîÑ
    description: |
      Update environment of every task in the current project 
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.setupPyUtil
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_py update_env
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Environment updated{{ $d.Normal }}"


  updateLinks:
    icon: üîó
    description: |
      Update "links" in your project. Very useful if you have multiple apps sharing some parts of code
      USAGE:
        zaruba please updateLinks
        zaruba please updateLinks "link::fibo/css=common-css"
        zaruba please updateLinks "link::app/css=common-css"
      ARGUMENTS
        link::<destination> : Location of the shared code
      TIPS:
        It is recommended to put `link` arguments in `default.values.yaml`.
        In order to do that, you can invoke `zaruba please addLink <link.from=source-location> <link.to=destination-location>`
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ $this := . -}}
        {{ $workPath := .WorkPath }}
        {{ $destinations := .GetSubValueKeys "link" -}}
        {{ range $index, $destination := $destinations -}}
          {{ $source := $this.GetValue "link" $destination -}}
          {{ $absSource := $this.GetWorkPath $source -}}
          {{ $absDestination := $this.GetWorkPath $destination -}}
          invoke_core_sh link_resource "{{ $absSource }}" "{{ $absDestination }}"
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Links updated{{ $d.Normal }}"


  addLink:
    icon: üîó
    description: |
      Add link.
      TIPS: To update links, you should perform `zaruba please updateLinks`
    extend: core.runCoreScript
    inputs:
    - link.from
    - link.to
    dependencies:
    - core.isProject
    - core.setupPyUtil
    config:
      start: |
        {{ $d := .Decoration -}}
        SOURCE="{{ .GetValue "link.from" }}"
        invoke_core_sh should_not_be_empty "${SOURCE}" "{{ $d.Bold }}{{ $d.Red }}'link.from' argument is not defined{{ $d.Normal }}"
        DESTINATION="{{ .GetValue "link.to" }}"
        invoke_core_sh should_not_be_empty "${DESTINATION}" "{{ $d.Bold }}{{ $d.Red }}'link.to' argument is not defined{{ $d.Normal }}"
        invoke_core_py set_project_value "link::${DESTINATION)" "${SOURCE}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Link ${SOURCE} -> ${DESTINATION} has been added{{ $d.Normal }}"


  setProjectValue:
    icon: üîó
    description: Set project value.
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.setupPyUtil
    inputs:
    - variable.name
    - variable.value
    config:
      start: |
        {{ $d := .Decoration -}}
        KEY="{{ .GetValue "variable.name" }}"
        invoke_core_sh should_not_be_empty "${KEY}" "{{ $d.Bold }}{{ $d.Red }}'variable.name' argument is not defined{{ $d.Normal }}"
        VALUE="{{ .GetValue "variable.value" }}"
        invoke_core_sh should_not_be_empty "${VALUE}" "{{ $d.Bold }}{{ $d.Red }}'variable.value' argument is not defined{{ $d.Normal }}"
        invoke_core_py set_project_value "${KEY}" "${VALUE}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Kwarg ${KEY} : ${VALUE} has been set{{ $d.Normal }}"


  core.buildDockerImage:
    icon: üê≥
    private: true
    description: |
      Build docker image.
      Common config:
        dockerEnv : Docker environment key (default: '{{ .GetValue "docker.env" }}')
        imageName : Image name
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    configRef: core.docker
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        if [ ! -z "${DOCKER_IMAGE_PREFIX}" ]
        then
          DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}/"
        fi
        invoke_core_sh should_be_file "$(pwd)/Dockerfile" "{{ $d.Bold }}{{ $d.Red }}'Dockerfile' should be exist{{ $d.Normal }}"
        IMAGE_NAME="{{ if .GetConfig "imageName" }}{{ .GetConfig "imageName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        COMMIT="$(invoke_core_sh get_latest_git_commit)"
        if [ ! -z "${COMMIT}" ]
        then
          SHORT_COMMIT="$(echo "${COMMIT}" | cut -c1-12)"
          TAG="$(invoke_core_sh get_latest_git_tag)"
          if [ ! -z "${TAG}" ]
          then
            TAG_COMMIT="$(invoke_core_sh get_latest_git_tag_commit)"
            if [ "${TAG_COMMIT}" = "${COMMIT}" ]
            then
              docker build -t "local/${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}-${SHORT_COMMIT}" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}" .
            else
              docker build -t "local/${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}-${SHORT_COMMIT}" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}" .
            fi
          else
            docker build -t "local/${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}" .
          fi
        else
          docker build -t "local/${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest" .
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker image built{{ $d.Normal }}"
  

  core.pushDockerImage:
    icon: üê≥
    private: true
    description: |
      Build docker image.
      Common config:
        dockerEnv : Docker environment key (default: '{{ .GetValue "docker.env" }}')
        imageName : Image name
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    configRef: core.docker
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        if [ ! -z "${DOCKER_IMAGE_PREFIX}" ]
        then
          DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}/"
        fi
        IMAGE_NAME="{{ if .GetConfig "imageName" }}{{ .GetConfig "imageName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        COMMIT="$(invoke_core_sh get_latest_git_commit)"
        if [ ! -z "${COMMIT}" ]
        then
          SHORT_COMMIT="$(echo "${COMMIT}" | cut -c1-12)"
          TAG="$(invoke_core_sh get_latest_git_tag)"
          if [ ! -z "${TAG}" ]
          then
            TAG_COMMIT="$(invoke_core_sh get_latest_git_tag_commit)"
            if [ "${TAG_COMMIT}" = "${COMMIT}" ]
            then
              docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}"
            fi
            docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}-${SHORT_COMMIT}"
          fi
          docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}"
        fi
        docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker image pushed{{ $d.Normal }}"
    

  core.stopDockerContainer:
    icon: üê≥
    private: true
    description: |
      Stop docker container.
      Common config:
        containerName : Container's name
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    config:
      start: |
        {{ $d := .Decoration -}}
        CONTAINER="{{ if .GetConfig "containerName" }}{{ .GetConfig "containerName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Stop docker container ${CONTAINER}{{ $d.Normal }}"
        invoke_core_sh stop_container "${CONTAINER}" 
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker container stopped{{ $d.Normal }}"
  

  core.removeDockerContainer:
    icon: üê≥
    private: true
    description: |
      Remove docker container.
      Common config:
        containerName : Container's name
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    config:
      start: |
        {{ $d := .Decoration -}}
        CONTAINER="{{ if .GetConfig "containerName" }}{{ .GetConfig "containerName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Stop docker container ${CONTAINER}{{ $d.Normal }}"
        invoke_core_sh stop_container "${CONTAINER}" 
        echo "{{ $d.Bold }}{{ $d.Yellow }}Remove docker container ${CONTAINER}{{ $d.Normal }}"
        invoke_core_sh remove_container "${CONTAINER}" 
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker container removed{{ $d.Normal }}"
  

  core.helmApply:
    icon: üö¢
    private: true
    description: |
      Apply helm charts by using helmfile.
      Common config:
        helmEnv     : helm environment key (default: '{{ .GetValue "helm.env" }}')
        dockerEnv   : docker environment key (default: '{{ .GetValue "docker.env" }}')
        kubeContext : kubernetes context (default: '{{ .GetValue "kube.content" }}')
    extend: core.runCoreScript
    configRef: core.docker
    config:
      start: |
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        KUBE_CONTEXT="{{ .GetConfig "kubeContext" }}"
        kubectl config use-context "${KUBE_CONTEXT}"
        export IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}"
        helmfile --environment "{{ .GetConfig "helmEnv" }}" sync


  core.helmDestroy:
    icon: üö¢
    private: true
    description: |
      Destroy helm deployments by using helmfile....
      Common config:
        helmEnv     : helm environment key (default: '{{ .GetValue "helm.env" }}')
        dockerEnv   : docker environment key (default: '{{ .GetValue "docker.env" }}')
        kubeContext : kubernetes context (default: '{{ .GetValue "kube.content" }}')
    extend: core.runScript
    configRef: core.docker
    config:
      start: |
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        KUBE_CONTEXT="{{ .GetConfig "kubeContext" }}"
        kubectl config use-context "${KUBE_CONTEXT}"
        export IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}"
        helmfile --environment "{{ .GetConfig "helmDestroy" }}" sync

