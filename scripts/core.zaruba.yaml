tasks:

  core.startDockerContainer:
    description: |
      A base task to run docker container.
      It will try to run `docker run` first. 
      If container is already exists, then it will run `docker start`.
      All container's output will be shown as well.
      Several configurations are available for this task:
      ```yaml
      config:
        containerName: <containerName>      # Name of the container
        imageName: <imageName>              # Base image of the container
        port::<hostPort>: <containerPort>   # Binding <containerPort> to <hostPort>
        volume::<hostPath>: <containerPath> # Binding <containerPath> to <hostPath>
      ```
    private: true
    config:
    start:
      - sh
      - "-c"
      - |
        {{ $this := . -}}
        {{ $workPath := .WorkPath -}}
        {{ $config := .Config -}}
        {{ $ports := $config.GetSubKeys "port" -}}
        {{ $volumes := $config.GetSubKeys "volume" -}}
        ( {{ "" -}}
          docker run --name {{ .Config.containerName }} {{ "" -}}
            {{ range $key, $val := .Env }} -e {{ $key }}={{ $val }} {{ end -}}
            {{ range $index, $hostPort := $ports -}} 
              {{ $containerPort := $config.GetValue "port" $hostPort -}}
              -p {{ $hostPort }}:{{ $containerPort }} {{ "" -}}
            {{ end -}}
            {{ range $index, $hostVolume := $volumes -}} 
              {{ $absHostVolume := $this.GetAbsPath $workPath $hostVolume -}}
              {{ $containerVolume := $config.GetValue "volume" $hostVolume -}}
              -v {{ $absHostVolume }}:{{ $containerVolume }} {{ "" -}}
            {{ end -}}
            -d {{ .Config.imageName }} || {{ "" -}}
          docker start {{ .Config.containerName -}}
        ) && {{ "" -}}
        docker logs --since 0m --follow {{ .Config.containerName }}
    check:
      - sh
      - "-c"
      - |
        {{ $ports := .Config.GetSubKeys "port" -}}
        {{ range $index, $hostPort := $ports -}}
          echo Checking port '{{ $hostPort }}'
          until nc -z localhost {{ $hostPort }}; do sleep 1; done
        {{ end -}}
        echo Task '{{ .Name }}' checked

  core.startService:
    description: |
      A base task to run service.
      You can put exposed ports on `lconfig` as follow:
      ```yaml
      lconfig:
        ports: [8080, 8081]
      ```
      You can also override `start` command as needed.
      By default, this task will serve static files in your current directory at port 3031
    private: true
    lconfig:
      ports: [3031]
    env:
      PYTHONUNBUFFERED: 
        from: PYTHONUNBUFFERED
        default: 1
    start: ["python", "-m", "http.server", "{{ index .LConfig.ports 0 }}"]
    check:
      - sh
      - "-c"
      - |
        {{ range $index, $port := .LConfig.ports -}}
          echo Checking port '{{ $port }}'
          until nc -z localhost {{ $port }}; do sleep 1; done
        {{ end }}
        echo Task '{{ .Name }}' checked
  
  core.runShellScript:
    private: true
    config:
      executable: sh
      argument: "-c"
      script: "echo hello world"
    start: ["{{ .Config.executable }}", "{{ .Config.argument }}", "{{ .Config.script }}"]
 
  core.runPythonScript:
    private: true
    extend: core.runShellScript
    config:
      executable: python
      script: "print('hello world')"
 
  core.runNodeJsScript:
    private: true
    extend: core.runShellScript
    config:
      executable: node
      argument: "-p"
      script: "console.log('hello world')"
  
  serveHttp:
    description: |
      Run a static web server from your working directory.
      You can specify the port by using `port=<port>` argument.
      Otherwise, the port will be 8000.
    extend: core.startService
    lconfig:
      ports: ["{{ if .Kwargs.port }}{{ .Kwargs.port }}{{ else }}8000{{ end }}"]
  
  initProject:
    description: Init a zaruba project in your working directory.
    extend: core.runShellScript
    config:
      script: | 
        git init
        cp -r {{ .BasePath }}/project-template/* ./
  
  initMonorepo:
    description: |
      Start a monorepo.
      You must specify `branch`, `prefix`, and `git-url` of your subrepo in your `default.kwargs.yaml`:
      ```yaml
      subrepo::<name>::prefix: <repo-location>
      subrepo::<name>::url: <git-url>
      ```
    extend: core.runShellScript
    config:
      script: |
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          {{ $prefix := $kwargs.GetValue "subrepo" $name "prefix" -}}
          {{ $url := $kwargs.GetValue "subrepo" $name "url" -}}

          NAME="{{ $name }}"
          PREFIX="{{ $prefix }}"
          URL="{{ $url }}"

          if [ ! -z "$URL" ]
          then

            if [ -z "$BRANCH" ]
            then
              BRANCH="master"
            fi

            ORIGIN_EXISTS=0
            for ORIGIN in $ORIGINS
            do
              if [ $ORIGIN = $NAME ]
              then
                ORIGIN_EXISTS=1
              fi
            done

            if [ $ORIGIN_EXISTS = 0 ]
            then
              echo $NAME origin is not exist
              git add . -A
              git commit -m 'Save works'

              PREFIX_EXISTS=0
              if [ -d "$PREFIX" ]
              then
                PREFIX_EXISTS=1
                mv "${PREFIX}" "${PREFIX}.bak"
                git add . -A
                git commit -m "Move ${PREFIX}"
              fi

              git remote add "${NAME}" "${URL}"
              git subtree add --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
              git fetch "${NAME}" "${BRANCH}"
              git pull "${NAME}" "${BRANCH}"

              if [ $PREFIX_EXISTS = 1 ]
              then
                rm -Rf "${PREFIX}"
                mv "${PREFIX}.bak" "${PREFIX}""
                git add . -A
                git commit -m "Move ${PREFIX} back"
              fi
            fi
          fi
         {{ end -}}

  pushSubrepos:
    description: Publish subtree of your subrepo
    extend: core.runShellScript
    dependencies:
      - initMonorepo
      - organize
    config:
      script: |
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          {{ $prefix := $kwargs.GetValue "subrepo" $name "prefix" -}}
          {{ $url := $kwargs.GetValue "subrepo" $name "url" -}}

          NAME="{{ $name }}"
          PREFIX="{{ $prefix }}"
          URL="{{ $url }}"

          ORIGIN_EXISTS=0
          for ORIGIN in $ORIGINS
          do
            if [ $ORIGIN = $NAME ]
            then
              ORIGIN_EXISTS=1
            fi
          done
          if [ $ORIGIN_EXISTS = 1 ]
          then
            git add . -A
            git commit -m 'Save works'
            git subtree push --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}

  pullSubrepos:
    description: Publish subtree of your subrepo
    extend: core.runShellScript
    dependencies:
      - initMonorepo
    config:
      script: |
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        ORIGINS=$(git remote)
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        {{ range $index, $name := $names -}}
          {{ $prefix := $kwargs.GetValue "subrepo" $name "prefix" -}}
          {{ $url := $kwargs.GetValue "subrepo" $name "url" -}}

          NAME="{{ $name }}"
          PREFIX="{{ $prefix }}"
          URL="{{ $url }}"

          ORIGIN_EXISTS=0
          for ORIGIN in $ORIGINS
          do
            if [ $ORIGIN = $NAME ]
            then
              ORIGIN_EXISTS=1
            fi
          done
          if [ $ORIGIN_EXISTS = 1 ]
          then
            git add . -A
            git commit -m "Save works before pull"
            git subtree pull --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
 
  updateLinks:
    description: |
      Organize your shared library
      You must specify links `default.kwargs.yaml`:
      ```yaml
      link::<destination>: <source>
      ```
    extend: core.runShellScript
    config:
      script: |
        {{ $this := . -}}
        {{ $workPath := .WorkPath }}
        {{ $destinations := .Kwargs.GetSubKeys "link" -}}
        {{ $kwargs := .Kwargs -}}
        git add . -A
        git commit -m "Save works before organize"
        {{ range $index, $destination := $destinations -}}
          {{ $source := $kwargs.GetValue "link" $destination -}}
          {{ $absSource := $this.GetAbsPath $workPath $source -}}
          {{ $absDestination := $this.GetAbsPath $workPath $destination -}}
          rm -Rf "{{ $absDestination }}"
          cp -r "{{ $absSource }}" "{{ $absDestination }}"
          chmod 555 "{{ $absDestination }}"
        {{ end -}}
