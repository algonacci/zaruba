includes:
  - ./core.generator.zaruba.yaml
  - ./core.run.zaruba.yaml
  - ./core.service.zaruba.yaml
  - ./core.setup.zaruba.yaml

inputs:

  advertisement.show:
    default: true
    options: [true, false]
    description: |
      Whether you want to see advertisement or not.
      Possible values are: "true", "yes", "on", "false", "no", or "off"
  
  log.keyword:
    default: 
    description: Task name regex pattern.

  server.httpPort:
    default: 8080
    description: HTTP port for serve static files.
  
  subrepo.url:
    description: Subrepo's url
  
  subrepo.prefix:
    description: Subrepo's prefix (directory's name). Left blank to automatically infer from subrepo.url

  subrepo.name:
    description: Subrepo's name. Left blank to automatically infer from subrepo.url

  docker.env:
    default: default
    description: Docker env, will be used to choose image prefix (dockerImagePrefix::<docker.env>).
  
  helm.env:
    default: default
    description: Environment for helmfile.
  
  kube.context:
    description: Kubernetes context. You can perform `kubectl config get-contexts` to see available context in your kubectl. If left blank, and kubeContext config is not provided, "docker-desktop" will be used.
  
  link.from:
    description: File/folder location to be linked from

  link.to:
    description: File/folder location to be linked to
  
  variable.name:
    description: Name of the input variable.
  
  variable.value:
    description: Value of the input variable.

tasks:

  core.showAdv:
    icon: ‚òï
    private: true
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    saveLog: false
    config:
      start: |
        {{ $showAdvertisement := .GetValue "advertisement.show" -}}
        {{ if .IsTrue $showAdvertisement }}invoke_core_py show_advertisement{{ end }}


  showVersion:
    icon: üîé
    description: |
      Show zaruba's current version.
    extend: core.runCoreScript
    config:
      showVersionCommand: |
        {{ $d := .Decoration -}}
        cd ${ZARUBA_HOME}
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current version: $(invoke_core_sh get_latest_git_tag) - $(invoke_core_sh get_latest_git_commit){{ $d.Normal }}"
      start: '{{ .GetConfig "showVersionCommand" }}'


  update:
    icon: üîÑ
    description: |
      Update zaruba to the latest version.
    extend: showVersion
    config:
      start: |
        {{ $d := .Decoration -}}
        cd ${ZARUBA_HOME}
        echo "üîΩ {{ $d.Bold }}{{ $d.Yellow }}Pull zaruba{{ $d.Normal }}"
        git pull origin master
        git fetch origin --tags
        echo "üöß {{ $d.Bold }}{{ $d.Yellow }}Compile zaruba{{ $d.Normal }}"
        go build
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Zaruba ready!!!{{ $d.Normal }}"
        {{ .GetConfig "showVersionCommand" }}


  serveHttp:
    icon: üåê
    description: |
      Run static web server from your working directory.
    extend: core.startService
    inputs:
    - server.httpPort
    lconfig:
      ports: ['{{ .GetValue "server.httpPort" }}']
    start: 
    - python 
    - "-m"
    - http.server
    - '{{ $ports := .GetLConfig "ports" }}{{ index $ports 0 }}'


  clearPreviousValues:
    icon: üî•
    description: |
      Clear log
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        rm -Rf .previous.values.yaml
        echo "{{ $d.Bold }}{{ $d.Yellow }}Previous values removed{{ $d.Normal }}"

  clearLog:
    icon: üî•
    description: |
      Clear log
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        rm -Rf log.zaruba.csv
        echo "{{ $d.Bold }}{{ $d.Yellow }}Log removed{{ $d.Normal }}"


  showLog:
    icon: üîé
    description: |
      Show log for all/particular tasks using regex
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    saveLog: false
    inputs:
    - log.keyword
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_be_file "log.zaruba.csv" "{{ $d.Bold }}{{ $d.Red }}Log is not exist{{ $d.Normal }}"
        TASK="{{ if .GetValue "log.keyword" }}{{ .GetValue "log.keyword" }}{{ else }}.*{{ end }}"
        invoke_core_py show_log "log.zaruba.csv" "${TASK}"


  core.isValidSubrepos:
    icon: üîç
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          invoke_core_sh should_not_be_empty "${URL}" "{{ $d.Bold }}{{ $d.Red }}Subrepo ${NAME} doesn't have url{{ $d.Normal }}"
          invoke_core_sh should_not_be_empty "${PREFIX}" "{{ $d.Bold }}{{ $d.Red }}Subrepo ${NAME} doesn't have prefix{{ $d.Normal }}"
        {{ end }}
        echo "{{ $d.Bold }}{{ $d.Yellow }}All Subrepos are valid{{ $d.Normal }}"


  initSubrepos:
    icon: üì¶
    description: |
      Init subrepositories.
      ARGUMENTS:
        subrepo::<name>::prefix   : Prefix (directory name) of the subrepo
        subrepo::<name>::url      : Remote url of the subrepo
        subrepo::<name>::name     : Origin name of the subrepo
      TIPS:
        It is recommended to put `subrepo` arguments in `default.values.yaml`.
        In order to do that, you can invoke `zaruba please addSubrepo <subrepo.url=remote-url>`
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.isValidSubrepos
    - core.setupPyUtil
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        BRANCH="{{ if .GetValue "defaultBranch" }}{{ .GetValue "defaultBranch" }}{{ else }}main{{ end }}"
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(invoke_core_py is_in_array "${NAME}", "\n" "${ORIGINS}")
          if [ "$ORIGIN_EXISTS" = "1" ]
          then
            git remote set-url "${NAME}" "${URL}"
          elif [ "$ORIGIN_EXISTS" = "0" ]
          then
            echo "$NAME origin is not exist"
            invoke_core_sh git_save "Save works before pulling from ${URL}"
            PREFIX_EXISTS=0
            if [ -d "$PREFIX" ]
            then
              PREFIX_EXISTS=1
              mv "${PREFIX}" "${PREFIX}.bak"
              invoke_core_sh git_save "Temporarily move ${PREFIX}"
            fi
            invoke_core_sh git_init_subrepo "${NAME}" "${PREFIX}" "${URL}" "${BRANCH}"
            if [ "$PREFIX_EXISTS" = "1" ]
            then
              rm -Rf "${PREFIX}"
              mv "${PREFIX}.bak" "${PREFIX}"
              invoke_core_sh git_save "Restore ${PREFIX}"
            fi
          fi
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos Initialized{{ $d.Normal }}"


  addSubrepo:
    icon: ü•Ç
    description: |
      Add subrepository.
      TIPS: To init added subrepositories, you should perform `zaruba please initSubrepos`
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.setupPyUtil
    inputs:
    - subrepo.url
    - subrepo.prefix
    - subrepo.name
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        URL="{{ .GetValue "subrepo.url" }}"
        invoke_core_sh should_not_be_empty "${URL}" "{{ $d.Bold }}{{ $d.Red }}subrepo.url is not defined{{ $d.Normal }}"
        {{ if .GetValue "subrepo.prefix" }}
          PREFIX="{{ .GetValue "subrepo.prefix" }}"
        {{ else }}
          PREFIX=$(invoke_core_py get_segment "${URL}" "/" "-1")
          PREFIX=$(invoke_core_py get_segment "${PREFIX}" "." "0")
        {{ end }}
        NAME="{{ if .GetValue "subrepo.name" }}{{ .GetValue "subrepo.name" }}{{ else }}${PREFIX}{{ end }}"
        invoke_core_py set_project_value "subrepo::${NAME}::prefix" "${PREFIX}"
        invoke_core_py set_project_value "subrepo::${NAME}::url" "${URL}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepo ${NAME} has been added{{ $d.Normal }}"


  pushSubrepos:
    icon: üîº
    description: |
      Publish subrepositories.
      ARGUMENTS:
        subrepo::<name>::prefix   : Prefix (directory name) of the subrepo
        subrepo::<name>::url      : Remote url of the subrepo
    extend: core.runCoreScript
    dependencies:
    - initSubrepos
    - updateLinks
    - core.setupPyUtil
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        BRANCH="{{ if .GetValue "defaultBranch" }}{{ .GetValue "defaultBranch" }}{{ else }}main{{ end }}"
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(invoke_core_py is_in_array "${NAME}" "\n" "${ORIGINS}")
          if [ $ORIGIN_EXISTS = 1 ]
          then
            invoke_core_sh git_save.sh" "Save works before p
            git subtree push --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos pushed{{ $d.Normal }}"


  pullSubrepos:
    icon: üîΩ
    description: |
      Pull subrepositories.
      ARGUMENTS:
        subrepo::<name>::prefix   : Prefix (directory name) of the subrepo
        subrepo::<name>::url      : Remote url of the subrepo
    extend: core.runCoreScript
    dependencies:
    - initSubrepos
    config:
      start: |
        set -e
        {{ $d := .Decoration -}}
        {{ $names := .GetSubValueKeys "subrepo" -}}
        {{ $this := . -}}
        ORIGINS=$(git remote)
        BRANCH="{{ if .GetValue "defaultBranch" }}{{ .GetValue "defaultBranch" }}{{ else }}main{{ end }}"
        {{ range $index, $name := $names -}}
          PREFIX="{{ $this.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $this.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(invoke_core_py is_in_array "${NAME}" "\n" "${ORIGINS}")
          if [ $ORIGIN_EXISTS = 1 ]
          then
            invoke_core_sh git_save "Save works before pull"
            git subtree pull --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos pulled{{ $d.Normal }}"


  core.isProject:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_be_file "main.zaruba.yaml" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is a valid zaruba project{{ $d.Normal }}"


  core.isContainHelmCharts:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_be_dir "helm-deployments" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory contains helm deployments{{ $d.Normal }}"


  core.isNotProject:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_not_be_file "main.zaruba.yaml" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is not a zaruba project{{ $d.Normal }}"


  core.isNotContainHelmCharts:
    icon: üîé
    private: true
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_sh should_not_be_dir "helm-deployments" "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project.{{ $d.Normal }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory does not contain helm deployments{{ $d.Normal }}"


  initProject:
    icon: üöß
    description: |
      Initiate empty zaruba project.
    extend: core.runCoreScript
    saveLog: false
    dependencies:
    - core.isNotProject
    config:
      start: |
        {{ $d := .Decoration -}}
        git init
        cp -rT "${ZARUBA_HOME}/scripts/templates/project/" .
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Project created{{ $d.Normal }}"


  updateEnv:
    icon: üîÑ
    description: |
      Update environment of every task in the current project 
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.setupPyUtil
    config:
      start: |
        {{ $d := .Decoration -}}
        invoke_core_py update_service_task_env .
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Environment updated{{ $d.Normal }}"


  updateLinks:
    icon: üîó
    description: |
      Update "links" in your project. Very useful if you have multiple apps sharing some parts of code
      USAGE:
        zaruba please updateLinks
        zaruba please updateLinks "link::fibo/css=common-css"
        zaruba please updateLinks "link::app/css=common-css"
      ARGUMENTS
        link::<destination> : Location of the shared code
      TIPS:
        It is recommended to put `link` arguments in `default.values.yaml`.
        In order to do that, you can invoke `zaruba please addLink <link.from=source-location> <link.to=destination-location>`
    extend: core.runCoreScript
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ $this := . -}}
        {{ $workPath := .WorkPath }}
        {{ $destinations := .GetSubValueKeys "link" -}}
        {{ range $index, $destination := $destinations -}}
          {{ $source := $this.GetValue "link" $destination -}}
          {{ $absSource := $this.GetWorkPath $source -}}
          {{ $absDestination := $this.GetWorkPath $destination -}}
          invoke_core_sh link_resource "{{ $absSource }}" "{{ $absDestination }}"
        {{ end -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Links updated{{ $d.Normal }}"


  addLink:
    icon: üîó
    description: |
      Add link.
      TIPS: To update links, you should perform `zaruba please updateLinks`
    extend: core.runCoreScript
    inputs:
    - link.from
    - link.to
    dependencies:
    - core.isProject
    - core.setupPyUtil
    config:
      start: |
        {{ $d := .Decoration -}}
        SOURCE="{{ .GetValue "link.from" }}"
        invoke_core_sh should_not_be_empty "${SOURCE}" "{{ $d.Bold }}{{ $d.Red }}'link.from' argument is not defined{{ $d.Normal }}"
        DESTINATION="{{ .GetValue "link.to" }}"
        invoke_core_sh should_not_be_empty "${DESTINATION}" "{{ $d.Bold }}{{ $d.Red }}'link.to' argument is not defined{{ $d.Normal }}"
        invoke_core_py set_project_value "link::${DESTINATION)" "${SOURCE}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Link ${SOURCE} -> ${DESTINATION} has been added{{ $d.Normal }}"


  setProjectValue:
    icon: üîó
    description: |
      Add link.
      USAGE:
        zaruba please setProjectValue key="key" value="value"
    extend: core.runCoreScript
    dependencies:
    - core.isProject
    - core.setupPyUtil
    inputs:
    - variable.name
    - variable.value
    config:
      start: |
        {{ $d := .Decoration -}}
        KEY="{{ .GetValue "variable.name" }}"
        invoke_core_sh should_not_be_empty "${KEY}" "{{ $d.Bold }}{{ $d.Red }}'variable.name' argument is not defined{{ $d.Normal }}"
        VALUE="{{ .GetValue "variable.value" }}"
        invoke_core_sh should_not_be_empty "${VALUE}" "{{ $d.Bold }}{{ $d.Red }}'variable.value' argument is not defined{{ $d.Normal }}"
        invoke_core_py set_project_value "${KEY}" "${VALUE}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Kwarg ${KEY} : ${VALUE} has been set{{ $d.Normal }}"


  core.buildDockerImage:
    icon: üê≥
    private: true
    description: |
      Build docker image.
      USAGE:
      ```yaml
      buildMyImage:
        location: ../myLocation
        extend: core.buildDockerImage
        config:
          # Image name (derived from location if not provided)
          imageName: myservice
          # Docker env. default to 'default'
          dockerEnv: default
      ```
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    inputs:
    - docker.env
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        if [ ! -z "${DOCKER_IMAGE_PREFIX}" ]
        then
          DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}/"
        fi
        invoke_core_sh should_be_file "$(pwd)/Dockerfile" "{{ $d.Bold }}{{ $d.Red }}'Dockerfile' should be exist{{ $d.Normal }}"
        IMAGE_NAME="{{ if .GetConfig "imageName" }}{{ .GetConfig "imageName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        COMMIT="$(invoke_core_sh get_latest_git_commit)"
        invoke_core_sh should_not_be_empty "${COMMIT}" "{{ $d.Bold }}{{ $d.Red }}No commit found{{ $d.Normal }}"
        SHORT_COMMIT="$(echo "${COMMIT}" | cut -c1-12)"
        TAG="$(invoke_core_sh get_latest_git_tag)"
        if [ ! -z "${TAG}" ]
        then
          TAG_COMMIT="$(invoke_core_sh get_latest_git_tag_commit)"
          if [ "${TAG_COMMIT}" = "${COMMIT}" ]
          then
            echo "{{ $d.Bold }}{{ $d.Yellow }}Build ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest, ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}, and ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}/${SHORT_COMMIT}{{ $d.Normal }}"
            docker build -t "local/${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}" .
            echo üéâüéâüéâ
            echo "{{ $d.Bold }}{{ $d.Yellow }}Docker image built{{ $d.Normal }}"
            exit 0
          fi
        fi
        echo "{{ $d.Bold }}{{ $d.Yellow }}Build ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest and ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}/${SHORT_COMMIT}{{ $d.Normal }}"
        docker build -t "local/${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest" -t "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}" .
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker image built{{ $d.Normal }}"
  

  core.pushDockerImage:
    icon: üê≥
    private: true
    description: |
      Build docker image.
      USAGE:
      ```yaml
      buildMyImage:
        location: ../myLocation
        extend: core.pushDockerImage
        config:
          # Image name (derived from location if not provided)
          imageName: myservice
          # Docker env. default to 'default'
          dockerEnv: default
      ```
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    inputs:
    - docker.env
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        if [ ! -z "${DOCKER_IMAGE_PREFIX}" ]
        then
          DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}/"
        fi
        IMAGE_NAME="{{ if .GetConfig "imageName" }}{{ .GetConfig "imageName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        COMMIT="$(invoke_core_sh get_latest_git_commit)"
        invoke_core_sh should_not_be_empty "${COMMIT}" "{{ $d.Bold }}{{ $d.Red }}No commit found{{ $d.Normal }}"
        SHORT_COMMIT="$(echo "${COMMIT}" | cut -c1-12)"
        TAG="$(invoke_core_sh get_latest_git_tag)"
        if [ ! -z "${TAG}" ]
        then
          TAG_COMMIT="$(invoke_core_sh get_latest_git_tag_commit)"
          if [ "${TAG_COMMIT}" = "${COMMIT}" ]
          then
            echo "{{ $d.Bold }}{{ $d.Yellow }}Push ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}{{ $d.Normal }}"
            docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${TAG}"
          fi
        fi
        echo "{{ $d.Bold }}{{ $d.Yellow }}Push ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest{{ $d.Normal }}"
        docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:latest"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Push ${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}{{ $d.Normal }}"
        docker push "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}:${SHORT_COMMIT}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker image pushed{{ $d.Normal }}"
    

  core.stopDockerContainer:
    icon: üê≥
    private: true
    description: |
      Stop docker container.
      USAGE:
      ```yaml
      stopMyContainer:
        location: ../myLocation
        extend: core.stopDockerContainer
        config:
          # container name, if not provided will be derived from location
          containerName: myContainer
      ```
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    config:
      start: |
        {{ $d := .Decoration -}}
        CONTAINER="{{ if .GetConfig "containerName" }}{{ .GetConfig "containerName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Stop docker container ${CONTAINER}{{ $d.Normal }}"
        invoke_core_sh stop_container "${CONTAINER}" 
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker container stopped{{ $d.Normal }}"
  

  core.removeDockerContainer:
    icon: üê≥
    private: true
    description: |
      Remove docker container.
      USAGE:
      ```yaml
      removeMyContainer:
        location: ../myLocation
        extend: core.removeDockerContainer
        config:
          # container name, if not provided will be derived from location
          containerName: myContainer
      ```
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - updateLinks
    config:
      start: |
        {{ $d := .Decoration -}}
        CONTAINER="{{ if .GetConfig "containerName" }}{{ .GetConfig "containerName" }}{{ else }}$(invoke_core_py get_service_name "$(pwd)"){{ end }}"
        echo "{{ $d.Bold }}{{ $d.Yellow }}Stop docker container ${CONTAINER}{{ $d.Normal }}"
        invoke_core_sh stop_container "${CONTAINER}" 
        echo "{{ $d.Bold }}{{ $d.Yellow }}Remove docker container ${CONTAINER}{{ $d.Normal }}"
        invoke_core_sh remove_container "${CONTAINER}" 
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker container removed{{ $d.Normal }}"
  

  core.helmApply:
    icon: üö¢
    private: true
    description: |
      Deploy helm charts by using helmfile
      USAGE:
      ```yaml
      applyHelm:
        location: helm-deployments 
        extend: core.helmApply
        config:
          dockerEnv: default
          helmEnv: default
          kubeContext: docker-desktop
      ```
    extend: core.runCoreScript
    inputs:
    - helm.env
    - kube.context
    - docker.env
    config:
      start: |
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        KUBE_CONTEXT="{{ if .GetValue "kube.context" }}{{ .GetValue "kube.context" }}{{ else if .GetConfig "kubeContext" }}{{ .GetConfig "kubeContext" }}{{ else }}docker-desktop{{ end }}"
        kubectl config use-context "${KUBE_CONTEXT}"
        export IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}"
        helmfile --environment "{{ if .GetValue "helm.env" }}{{ .GetValue "helm.env" }}{{ else }}default{{ end }}" sync


  core.helmDestroy:
    icon: üö¢
    private: true
    description: |
      Deploy helm charts by using helmfile
      USAGE:
      ```yaml
      applyHelm:
        location: helm-deployments 
        extend: core.helmDestroy
        config:
          helmEnv: default
          kubeContext: docker-desktop
      ```
    extend: core.runScript
    inputs:
    - helm.env
    - kube.context
    config:
      start: |
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        KUBE_CONTEXT="{{ if .GetValue "kube.context" }}{{ .GetValue "kube.context" }}{{ else if .GetConfig "kubeContext" }}{{ .GetConfig "kubeContext" }}{{ else }}docker-desktop{{ end }}"
        kubectl config use-context "${KUBE_CONTEXT}"
        export IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}"
        helmfile --environment "{{ if .GetValue "helm.env" }}{{ .GetValue "helm.env" }}{{ else }}default{{ end }}" destroy

