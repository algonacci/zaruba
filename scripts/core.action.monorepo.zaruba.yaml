tasks:

  core.isValidSubrepos:
    icon: 🔍
    private: true
    extend: core.runShellScript
    config:
      script: |
        echo "All Subrepos should be valid"
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          if [ -z "$URL" ]
          then
            echo "Subrepo ${NAME} doesn't have url" 1>&2; exit 1
          fi
          if [ -z "$PREFIX" ]
          then
            echo "Subrepo ${NAME} doesn't have prefix" 1>&2; exit 1
          fi
        {{ end }}
        echo "All Subrepos are valid"
 

  initSubrepos:
    icon: 📦
    description: |
      Start a monorepo.
      You must specify `prefix`, and `url` of your subrepo in your `default.kwargs.yaml`:
      ```yaml
      subrepo::<name>::prefix: <directory>
      subrepo::<name>::url: <git-url>
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
      - core.isValidSubrepos
    config:
      script: |
        set -e
        BASEPATH="{{ .BasePath }}"
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          if [ -z "$URL" ]
          then
            echo "Subrepo ${NAME} doesn't have url" 1>&2; exit 1
          fi
          if [ -z "$PREFIX" ]
          then
            echo "Subrepo ${NAME} doesn't have prefix" 1>&2; exit 1
          fi
          ORIGIN_EXISTS=$(python "${BASEPATH}/util/python/is_in_array.py" "${NAME}" ${ORIGINS})
          if [ $ORIGIN_EXISTS = 0 ]
          then
            echo "$NAME origin is not exist"
            sh "${BASEPATH}/util/sh/git_save.sh" "Save works"
            PREFIX_EXISTS=0
            if [ -d "$PREFIX" ]
            then
              PREFIX_EXISTS=1
              mv "${PREFIX}" "${PREFIX}.bak"
              sh "${BASEPATH}/util/sh/git_save.sh" "Move ${PREFIX}"
            fi
            git remote add "${NAME}" "${URL}"
            git subtree add --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
            git fetch "${NAME}" "${BRANCH}"
            git pull "${NAME}" "${BRANCH}"
            if [ $PREFIX_EXISTS = 1 ]
            then
              rm -Rf "${PREFIX}"
              mv "${PREFIX}.bak" "${PREFIX}"
              sh "${BASEPATH}/util/sh/git_save.sh" "Move ${PREFIX} back"
            fi
          fi
        {{ end -}}
        echo "Subrepos initialized"


  addSubrepo:
    icon: 🥂
    description: |
      Add external repository to your project.
      You need to specify `name`, `prefix` and `url`. Example:
      ```sh
      zaruba please addSubRepo name=<subrepo-name> prefix=<directory> url=<git-url>
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
    config:
      script: |
        set -e
        BASEPATH="{{ .BasePath }}"
        {{ if not .Kwargs.url }}
          echo "Subrepo url is not defined" 1>&2
          exit 1
        {{ end }}
        URL="{{ .Kwargs.url }}"
        {{ if not .Kwargs.prefix }}
          PREFIX=$(python "${BASEPATH}/util/python/get_segment.py" "${URL}" "/" "-1")
        {{ else }}
          PREFIX="{{ .Kwargs.prefix }}"
        {{ end }}
        {{ if not .Kwargs.name }}
          NAME="$PREFIX"
        {{ else }}
          NAME="{{ .Kwargs.name }}"
        {{ end }}
        echo "subrepo::${NAME}::prefix: ${PREFIX}" >> "default.kwargs.yaml"
        echo "subrepo::${NAME}::url: ${URL}" >> "default.kwargs.yaml"
        echo "Subrepo ${NAME} has been added"


  pushSubrepos:
    icon: 📤
    description: Publish subtree of your subrepo
    extend: core.runShellScript
    dependencies:
      - initSubrepos
      - updateLinks
    config:
      script: |
        set -e
        BASEPATH="{{ .BasePath }}"
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(python "${BASEPATH}/util/python/is_in_array.py" "${NAME}" ${ORIGINS})
          if [ $ORIGIN_EXISTS = 1 ]
          then
            sh "${BASEPATH}/util/sh/git_save.sh" "Save works before push"
            git subtree push --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo "Subrepos pushed"


  pullSubrepos:
    icon: 📥
    description: Publish subtree of your subrepo
    extend: core.runShellScript
    dependencies:
      - initSubrepos
    config:
      script: |
        set -e
        BASEPATH="{{ .BasePath }}"
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        ORIGINS=$(git remote)
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(python "${BASEPATH}/util/python/is_in_array.py" "${NAME}" ${ORIGINS})
          if [ $ORIGIN_EXISTS = 1 ]
          then
            sh "${BASEPATH}/util/sh/git_save.sh" "Save works before pull"
            git subtree pull --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo "Subrepos pulled"
 