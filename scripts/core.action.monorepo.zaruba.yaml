tasks:

  core.isValidSubrepos:
    icon: 🔍
    private: true
    extend: core.runShellScript
    config:
      script: |
        {{ $d := .Decoration -}}
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          if [ -z "$URL" ]
          then
            echo "{{ $d.Bold }}{{ $d.Red }}Subrepo ${NAME} doesn't have url{{ $d.Normal }}" 1>&2; exit 1
          fi
          if [ -z "$PREFIX" ]
          then
            echo "{{ $d.Bold }}{{ $d.Red }}Subrepo ${NAME} doesn't have prefix{{ $d.Normal }}" 1>&2; exit 1
          fi
        {{ end }}
        echo "{{ $d.Bold }}{{ $d.Yellow }}All Subrepos are valid{{ $d.Normal }}"
 

  initSubrepos:
    icon: 📦
    description: |
      Start a monorepo.
      You must specify `prefix`, and `url` of your subrepo in your `default.kwargs.yaml`:
      ```yaml
      subrepo::<name>::prefix: <directory>
      subrepo::<name>::url: <git-url>
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
      - core.isValidSubrepos
      - core.setupPythonUtil
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(pipenv run python "${PYTHON_UTIL}/is_in_array.py" "${NAME}" ${ORIGINS})
          if [ $ORIGIN_EXISTS = 1 ]
          then
            git remote set-url "${NAME}" "${URL}"
          elif [ $ORIGIN_EXISTS = 0 ]
          then
            echo "$NAME origin is not exist"
            sh "${SH_UTIL}/git_save.sh" "Save works"
            PREFIX_EXISTS=0
            if [ -d "$PREFIX" ]
            then
              PREFIX_EXISTS=1
              mv "${PREFIX}" "${PREFIX}.bak"
              sh "${SH_UTIL}/git_save.sh" "Move ${PREFIX}"
            fi
            sh "${SH_UTIL}/git_init_subrepo.sh" "${NAME}" "${PREFIX}" "${URL}" "${BRANCH}"
            if [ $PREFIX_EXISTS = 1 ]
            then
              rm -Rf "${PREFIX}"
              mv "${PREFIX}.bak" "${PREFIX}"
              sh "${SH_UTIL}/git_save.sh" "Move ${PREFIX} back"
            fi
          fi
        {{ end -}}
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos Initialized{{ $d.Normal }}"


  addSubrepo:
    icon: 🥂
    description: |
      Add external repository to your project.
      You need to specify `url`, `prefix`, and `name`. For example:
      ```sh
      zaruba please addSubRepo <url=git-url> [prefix=directory] [name=subrepo-name]
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
      - core.setupPythonUtil
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        {{ if not .Kwargs.url }}
          echo "{{ $d.Bold }}{{ $d.Red }}Subrepo url is not defined{{ $d.Normal }}" 1>&2
          exit 1
        {{ end }}
        URL="{{ .Kwargs.url }}"
        {{ if not .Kwargs.prefix }}
          PREFIX=$(pipenv run python "${PYTHON_UTIL}/get_segment.py" "${URL}" "/" "-1")
          PREFIX=$(pipenv run python "${PYTHON_UTIL}/get_segment.py" "${PREFIX}" "." "0")
        {{ else }}
          PREFIX="{{ .Kwargs.prefix }}"
        {{ end }}
        {{ if not .Kwargs.name }}
          NAME="$PREFIX"
        {{ else }}
          NAME="{{ .Kwargs.name }}"
        {{ end }}
        pipenv run python "${PYTHON_UTIL}/set_project_kwarg.py" "subrepo::${NAME}::prefix" "${PREFIX}"
        pipenv run python "${PYTHON_UTIL}/set_project_kwarg.py" "subrepo::${NAME}::url" "${URL}"
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepo ${NAME} has been added{{ $d.Normal }}"


  pushSubrepos:
    icon: 📤
    description: Publish subtree of your subrepo
    extend: core.runShellScript
    dependencies:
      - initSubrepos
      - updateLinks
      - core.setupPythonUtil
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        ORIGINS=$(git remote)
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(pipenv run python "${PYTHON_UTIL}/is_in_array.py" "${NAME}" ${ORIGINS})
          if [ $ORIGIN_EXISTS = 1 ]
          then
            sh "${SH_UTIL}/git_save.sh" "Save works before push"
            git subtree push --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos pushed{{ $d.Normal }}"


  pullSubrepos:
    icon: 📥
    description: Publish subtree of your subrepo
    extend: core.runShellScript
    dependencies:
      - initSubrepos
      - core.setupPythonUtil
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        {{ $names := .Kwargs.GetSubKeys "subrepo" -}}
        {{ $kwargs := .Kwargs -}}
        ORIGINS=$(git remote)
        BRANCH={{ if .Kwargs.defaultBranch }}{{ .Kwargs.defaultBranch }}{{ else }}main{{ end }}
        {{ range $index, $name := $names -}}
          PREFIX="{{ $kwargs.GetValue "subrepo" $name "prefix" }}"
          URL="{{ $kwargs.GetValue "subrepo" $name "url" }}"
          NAME="{{ $name }}"
          ORIGIN_EXISTS=$(pipenv run python "${PYTHON_UTIL}/is_in_array.py" "${NAME}" ${ORIGINS})
          if [ $ORIGIN_EXISTS = 1 ]
          then
            sh "${SH_UTIL}/git_save.sh" "Save works before pull"
            git subtree pull --prefix="${PREFIX}" "${NAME}" "${BRANCH}"
          fi
        {{ end -}}
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Subrepos pulled{{ $d.Normal }}"
 