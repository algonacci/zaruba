tasks:

  createDockerNetwork:
    icon: üê≥
    description: Create docker network based on project name
    extend: core.runShellScript
    config:
      script: |
        {{ $d := .Decoration -}}
        if [ -z $(sh "${SH_UTIL}/inspect_docker.sh" "network" ".Name" "{{ .ProjectName }}") ]
        then
          docker network create "{{ .ProjectName }}"
          echo "{{ $d.Bold }}{{ $d.Yellow }}Docker network created: {{ .ProjectName }}{{ $d.Normal }}"
        else
          echo "{{ $d.Bold }}{{ $d.Yellow }}Docker network already exists: {{ .ProjectName }}{{ $d.Normal }}"
        fi


  core.startDockerContainer:
    icon: üê≥
    description: |
      A base task to run docker container.
      It will try to run `docker run` first. 
      If container was already exists, then it will run `docker start`.
      All container's output will be shown as well.
      Several configurations are available for this task:
      ```yaml
      config:
        containerName: <containerName>      # Name of the container
        imageName: <imageName>              # Base image of the container
        port::<hostPort>: <containerPort>   # Binding <containerPort> to <hostPort>
        volume::<hostPath>: <containerPath> # Binding <containerPath> to <hostPath>
        beforeCheck: <script>               # Script to be executed before check
        afterCheck: <script>                # Script to be executed after check
        beforeStart: <script>               # Script to be executed before start
        afterStart: <script>                # Script to be executed after start
        shell: sh
        shellArg: "-c"
      ```
    private: true
    config:
      shell: "{{ if .Kwargs.defaultShell }}{{ .Kwargs.defaultShell }}{{ else }}sh{{ end }}"
      shellArg: "-c" 
    dependencies:
      - createDockerNetwork
      - updateLinks
    start:
      - "sh"
      - "-c"
      - |
        {{ $d := .Decoration -}}
        set -e
        SCRIPT_PATH="${ZARUBA_HOME}/scripts"
        SH_UTIL="${SCRIPT_PATH}/util/sh"
        {{ if .Config.containerName }}{{ else -}}
          echo "{{ $d.Bold }}{{ $d.Red }}Container name is not provided{{ $d.Normal }}" 1>&2 && exit 1
        {{ end -}}
        {{ if .Config.imageName }}{{ else -}} 
          echo "{{ $d.Bold }}{{ $d.Red }}Image name is not provided{{ $d.Normal }}" 1>&2 && exit 1
        {{ end -}}
        {{ if .Config.beforeStart }}{{ .Config.beforeStart }}{{ end }}
        {{ $this := . -}}
        {{ $workPath := .WorkPath -}}
        {{ $config := .Config -}}
        {{ $ports := $config.GetSubKeys "port" -}}
        {{ $volumes := $config.GetSubKeys "volume" -}}
        {{ $projectName := .ProjectName }}
        CONTAINER_NAME="{{ .Config.containerName }}"
        IS_RUNNING=$(sh "${SH_UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")
        if [ "${IS_RUNNING}" = true ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' was already started{{ $d.Normal }}"
        elif [ -z $(sh "${SH_UTIL}/inspect_docker.sh" "container" ".Name" "${CONTAINER_NAME}") ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Creating and starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          docker run --name "${CONTAINER_NAME}" {{ "" -}}
            --network="{{ .ProjectName }}" {{"" -}}
            {{ range $key, $val := .Env }} -e {{ $key }}={{ $val }} {{ end -}}
            {{ range $index, $hostPort := $ports -}} 
              {{ $containerPort := $config.GetValue "port" $hostPort -}}
              -p "{{ $hostPort }}:{{ $containerPort }}" {{ "" -}}
            {{ end -}}
            {{ range $index, $hostVolume := $volumes -}} 
              {{ $absHostVolume := $this.GetAbsPath $workPath $hostVolume -}}
              {{ $containerVolume := $config.GetValue "volume" $hostVolume -}}
              -v "{{ $absHostVolume }}:{{ $containerVolume }}" {{ "" -}}
            {{ end -}}
            -d {{ .Config.imageName }}
        else
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          docker start "${CONTAINER_NAME}"
        fi
        {{ if .Config.afterStart }}{{ .Config.afterStart }}{{ end }}
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Logging '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker logs --since 0m --follow "${CONTAINER_NAME}"
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Connecting container '${CONTAINER_NAME}' to '{{ $projectName }}' network{{ $d.Normal }}"
        docker network connect "{{ $projectName }}" "${CONTAINER_NAME}"
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' started{{ $d.Normal }}"
    check:
      - "sh"
      - "-c"
      - |
        {{ $d := .Decoration -}}
        SCRIPT_PATH="${ZARUBA_HOME}/scripts"
        SH_UTIL="${SCRIPT_PATH}/util/sh"
        CONTAINER_NAME="{{ .Config.containerName }}"
        {{ if .Config.beforeCheck }}{{ .Config.beforeCheck }}{{ end }}
        set -e
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting container '${CONTAINER_NAME}'{{ $d.Normal }}"
        IS_RUNNING=$(sh "${SH_UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")
        until [ "${IS_RUNNING}" = true ]
        do 
          sleep 1
          IS_RUNNING=$(sh "${SH_UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")
        done
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is running{{ $d.Normal }}"
        {{ $ports := .Config.GetSubKeys "port" -}}
        {{ range $index, $hostPort := $ports -}}
          echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
          until nc -z localhost "{{ $hostPort }}"
          do
            sleep 1
          done
          echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
        {{ end -}}
        set +e
        {{ if .Config.afterCheck }}{{ .Config.afterCheck }}{{ end }}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is ready{{ $d.Normal }}"
