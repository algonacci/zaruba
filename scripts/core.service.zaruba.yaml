tasks:

  core.startService:
    icon: üìú
    description: |
      Start service
      USAGE:
      ```yaml
      startService:
        extend: core.startService
        config:
          # Script to start the service. (no default)
          start: |
            python -m http.server {{ .GetEnv "HTTP_PORT" }}
        lconfig:
          # Port to be checked. (no default)
          ports:
          - {{ .GetEnv "HTTP_PORT" }}
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
    - updateLinks
    check:
    - "{{ .Config.cmd }}"
    - "{{ .Config.cmdArg }}"
    - |
      {{- $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      {{ if .Config.beforeCheck }}{{ .Config.beforeCheck }}{{ end }}
      {{ range $index, $port := .LConfig.ports -}}
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Waiting for port '{{ $port }}'{{ $d.Normal }}"
        sh "${UTIL}/wait_port.sh" "localhost" "{{ $port }}"
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Port '{{ $port }}' is ready{{ $d.Normal }}"
      {{ end -}}
      set +e
      {{ if .Config.afterCheck }}{{ .Config.afterCheck }}{{ end }}
      echo üéâüéâüéâ
      echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Task '{{ .Name }}' is ready{{ $d.Normal }}"


  core.startDockerContainer:
    icon: üê≥
    description: |
      Start or create and run docker container
      USAGE:
      ```yaml
      startContainer:
        config:
          # Container name (no default)
          containerName: mysql
          # Image name (no default)
          imageName: mysql:latest
          # Localhost mapping for environment variables (default: "localhost")
          localhost: host.docker.internal
          # Port to be exposed (default: "config.port", possible values: "config.port", "lconfig.ports")
          expose: lconfig.ports
          # Port mapping, only taking effect if `expose` set to "config.port" (port::<hostPort>)
          port::3307: 3306
          # Volume mapping (volume::<hostPath>)
          volume::myData: /var/data 
        lconfig:
          # port, only taking effect if `expose` set to "lconfig.ports"
          ports: []
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
    - updateLinks
    config:
      localhost: localhost
      expose: "config.port"
    start:
    - "sh"
    - "-c"
    - |
      {{ $d := .Decoration -}}
      {{ if and (ne .Config.expose "config.port") (ne .Config.expose "lconfig.ports") -}}
        echo "{{ $d.Bold }}{{ $d.Red }}'expose' value should be either 'config.port' or 'lconfig.ports'{{ $d.Normal }}"
      {{ end -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      CONTAINER_NAME="{{ .Config.containerName }}"
      sh "${UTIL}/should_not_be_empty.sh" "${CONTAINER_NAME}" "{{ $d.Bold }}{{ $d.Red }}Container name is not provided{{ $d.Normal }}"
      IMAGE_NAME="{{ .Config.imageName }}"
      sh "${UTIL}/should_not_be_empty.sh" "${IMAGE_NAME}" "{{ $d.Bold }}{{ $d.Red }}Image name is not provided{{ $d.Normal }}"
      {{ if .Config.beforeStart }}{{ .Config.beforeStart }}{{ end }}
      {{ $this := . -}}
      if [ "$(sh "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
      then
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' was already started{{ $d.Normal }}"
      elif [ ! -z $(sh "${UTIL}/inspect_docker.sh" "container" ".Name" "${CONTAINER_NAME}") ]
      then
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker start "${CONTAINER_NAME}"
      else
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Creating and starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker run --name "${CONTAINER_NAME}" {{ "" -}}
          {{ range $key, $val := .Env -}} 
            -e {{ $key }}="$(echo "{{ $val }}" | sed s/localhost/{{ $this.Config.localhost }}/g)" {{ "" -}}
          {{ end -}}
          {{ if eq $this.Config.expose "config.port" -}}
            {{ range $index, $hostPort := $this.Config.GetSubKeys "port" -}}
              {{ $containerPort := $this.Config.GetValue "port" $hostPort -}}
              -p "{{ $hostPort }}:{{ $containerPort }}" {{ "" -}}
            {{ end -}}
          {{ else if eq $this.Config.expose "lconfig.ports" -}}
            {{ range $index, $port := $this.LConfig.ports -}}
              -p "{{ $port }}:{{ $port }}" {{ "" -}}
            {{ end -}}
          {{ end -}}
          {{ range $index, $hostVolume := $this.Config.GetSubKeys "volume" -}}
            {{ $absHostVolume := $this.GetAbsPath $this.WorkPath $hostVolume -}}
            {{ $containerVolume := $this.Config.GetValue "volume" $hostVolume -}}
            -v "{{ $absHostVolume }}:{{ $containerVolume }}" {{ "" -}}
          {{ end -}}
          -d "${IMAGE_NAME}"
      fi
      {{ if .Config.afterStart }}{{ .Config.afterStart }}{{ end }}
      echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Logging '${CONTAINER_NAME}'{{ $d.Normal }}"
      docker logs --since 0m --follow "${CONTAINER_NAME}"
      echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' started{{ $d.Normal }}"
    check:
    - "sh"
    - "-c"
    - |
      {{ $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      CONTAINER_NAME="{{ .Config.containerName }}"
      {{ if .Config.beforeCheck }}{{ .Config.beforeCheck }}{{ end }}
      echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting container '${CONTAINER_NAME}'{{ $d.Normal }}"
      until [ "$(sh "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
      do
        sleep 1
      done
      echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is running{{ $d.Normal }}"
      {{ $ports := .Config.GetSubKeys "port" -}}
      {{ if eq .Config.expose "lconfig.ports" -}}{{ $ports := .LConfig.ports }}{{ end -}}
      {{ range $index, $hostPort := $ports -}}
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
        sh "${UTIL}/wait_port.sh" "localhost" "{{ $hostPort }}"
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
      {{ end -}}
      {{ if .Config.afterCheck }}{{ .Config.afterCheck }}{{ end }}
      echo üéâüéâüéâ
      echo "{{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is ready{{ $d.Normal }}"


  core.monitorPorts:
    icon: üîé
    description: |
      Throw error when any port is inactive
      USAGE:
      ```yaml
      monitorPorts:
        extend: core.monitorPorts
        dependencies:
        - runServiceA
        - runMysql
        config:
          interval: 1  # Interval (in second) for port checking, (default: 1)
        lconfig:
          # Port to be checked. (no default)
          ports:
          - '{{ .GetEnv "MYSERVICE_A_HTTP_PORT" }}'
          - 3306
      ```
    private: true
    extend: core.runCoreScript
    start:
    - "{{ .Config.cmd }}"
    - "{{ .Config.cmdArg }}"
    - |
      {{ $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      PORTS=""
      {{ range $index, $port := .LConfig.ports -}}
        PORTS="${PORTS} {{ $port }}"
      {{ end -}}
      while true
      do
        for PORT in ${PORTS}
        do
          if nc -z "localhost" "${PORT}"
          then
            continue
          fi
          echo "üîé {{ $d.Bold }}{{ $d.Red }}Port '${PORT}' is not listening{{ $d.Normal }}"
          exit 1
        done
        sleep {{ if .Config.interval }}{{ .Config.interval }}{{ else }}1{{ end }}
      done
    check:
    - "{{ .Config.cmd }}"
    - "{{ .Config.cmdArg }}"
    - |
      {{ $d := .Decoration -}}
      echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Port monitoring started{{ $d.Normal }}"
