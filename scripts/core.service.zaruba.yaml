includes:
  - ./core.service.docker.zaruba.yaml

tasks:

  core.startService:
    icon: üìú
    description: |
      A base task to run service.
      The following configuration are available:
      ```yaml
      lconfig:
        ports: [8080, 8081]    # Port to be checked before the service is considered "running"
      config
        script: <script>       # Script to start the service
        beforeCheck: <script>  # Script to be executed before check
        afterCheck: <script>   # Script to be executed after check
        beforeStart: <script>  # Script to be executed before start
        afterStart: <script>   # Script to be executed after start
        shell: sh
        shellArg: "-c"
      ```
      You can also override `start` command as needed.
    private: true
    config:
      shell: "{{ if .Kwargs.defaultShell }}{{ .Kwargs.defaultShell }}{{ else }}sh{{ end }}"
      shellArg: "-c" 
    env:
      PYTHONUNBUFFERED: 
        from: PYTHONUNBUFFERED
        default: 1
    dependencies:
      - updateLinks
    start:
      - "{{ .Config.shell }}"
      - "{{ .Config.shellArg }}"
      - |
        SCRIPT_PATH="${ZARUBA_HOME}/scripts"
        SH_UTIL="${SCRIPT_PATH}/util/sh"
        {{ if .Config.beforeStart }}{{ .Config.beforeStart }}{{ end }}
        {{ .Config.script }}
        {{ if .Config.afterStart }}{{ .Config.afterStart }}{{ end }}
    check:
      - "{{ .Config.shell }}"
      - "{{ .Config.shellArg }}"
      - |
        {{ $d := .Decoration -}}
        SCRIPT_PATH="${ZARUBA_HOME}/scripts"
        SH_UTIL="${SCRIPT_PATH}/util/sh"
        {{ if .Config.beforeCheck }}{{ .Config.beforeCheck }}{{ end }}
        set -e
        {{ range $index, $port := .LConfig.ports -}}
          echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Waiting for port '{{ $port }}'{{ $d.Normal }}"
          until nc -z localhost {{ $port }}
          do 
            sleep 1
          done
          echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Port '{{ $port }}' is ready{{ $d.Normal }}"
        {{ end }}
        set +e
        {{ if .Config.afterCheck }}{{ .Config.afterCheck }}{{ end }}
        echo üéâüéâüéâ
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Task '{{ .Name }}' is ready{{ $d.Normal }}"

  
  core.monitorPorts:
    icon: üîé
    private: true
    description: |
      Check whether all ports are used or not
      You can put nonitored ports on `lconfig.ports` and checking interval on `config.interval` as follow:
      ```yaml
      lconfig:
        ports: [8080, 8081]    # Port to be checkedTo 
      config:
        interval: 1
        shell: sh
        shellArg: "-c"
      ```
    config:
      shell: "{{ if .Kwargs.defaultShell }}{{ .Kwargs.defaultShell }}{{ else }}sh{{ end }}"
      shellArg: "-c" 
    check:
      - "{{ .Config.shell }}"
      - "{{ .Config.shellArg }}"
      - |
        {{ $d := .Decoration -}}
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Port monitoring started{{ $d.Normal }}"
    start:
      - "{{ .Config.shell }}"
      - "{{ .Config.shellArg }}"
      - |
        {{ $d := .Decoration -}}
        set -e
        PORTS=""
        {{ range $index, $port := .LConfig.ports -}}
          PORTS="${PORTS} {{ $port }}"
        {{ end }}
        while true
        do
          for PORT in ${PORTS}
          do
            if nc -z "localhost" "${PORT}" 
            then 
              continue
            fi 
            echo "üîé {{ $d.Bold }}{{ $d.Red }}Port '${PORT}' is not listening{{ $d.Normal }}"
            exit 1
          done
          sleep {{ if .Config.interval }}{{ .Config.interval }}{{ else }}1{{ end }}
        done


  serveHttp:
    icon: üåê
    description: |
      Run a static web server from your working directory.
      You can specify the port by using `port=<port>` argument.
      Otherwise, the port will be 8000.
    extend: core.startService
    lconfig:
      ports: ["{{ if .Kwargs.port }}{{ .Kwargs.port }}{{ else }}8000{{ end }}"]
    start: ["python", "-m", "http.server", "{{ index .LConfig.ports 0 }}"]


 