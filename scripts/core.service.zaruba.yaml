tasks:

  core.startService:
    icon: üìú
    description: |
      Start service
      USAGE:
      ```yaml
      startService:
        extend: core.startService
        config:
          # Script to start the service. (no default)
          start: |
            python -m http.server {{ .GetEnv "HTTP_PORT" }}
        lconfig:
          # Port to be checked. (no default)
          ports:
          - {{ .GetEnv "HTTP_PORT" }}
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
    - updateLinks
    config:
      check: |
        {{- $d := .Decoration -}}
        {{ range $index, $port := .GetLConfig "ports" -}}
          echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Waiting for port '{{ $port }}'{{ $d.Normal }}"
          . "${UTIL}/wait_port.sh" "localhost" "{{ $port }}"
          echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Port '{{ $port }}' is ready{{ $d.Normal }}"
        {{ end -}}
      completeStart: ""
      completeCheck: |
        {{- $d := .Decoration -}}
        echo üéâüéâüéâ
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Task '{{ .Name }}' is ready{{ $d.Normal }}"
    start:
    - '{{ .GetConfig "cmd" }}'
    - '{{ .GetConfig "cmdArg" }}'
    - |
        {{ .Trim (.GetConfig "setup") "\n " }}
        {{ .Trim (.GetConfig "beforeStart") "\n " }}
        {{ .Trim (.GetConfig "start") "\n " }}
        {{ .Trim (.GetConfig "afterStart") "\n " }}
        {{ .Trim (.GetConfig "completeStart") "\n " }}
    check:
    - '{{ .GetConfig "cmd" }}'
    - '{{ .GetConfig "cmdArg" }}'
    - |
        {{ .Trim (.GetConfig "setup") "\n " }}
        {{ .Trim (.GetConfig "beforeCheck") "\n " }}
        {{ .Trim (.GetConfig "check") "\n " }}
        {{ .Trim (.GetConfig "afterCheck") "\n " }}
        {{ .Trim (.GetConfig "completeCheck") "\n " }}


  core.startDockerContainer:
    icon: üê≥
    description: |
      Start or create and run docker container
      USAGE:
      ```yaml
      startContainer:
        config:
          # Docker image prefix will be the default image prefix if provided (default: empty)
          imagePrefix: local
          # whether you want to use image prefix or not (default: empty, possible value: "no", "false", "off")
          useImagePrefix: false
          # Docker env. default to 'default'
          dockerEnv: default
          # Container name (no default)
          containerName: mysql
          # Image name (no default)
          imageName: mysql
          # Image tag (no default)
          imageTag: latest
          # Localhost mapping for environment variables (default: "localhost")
          localhost: host.docker.internal
          # Port to be exposed (default: "config.port", possible values: "config.port", "lconfig.ports")
          expose: lconfig.ports
          # Port mapping, only taking effect if `expose` set to "config.port" (port::<hostPort>)
          port::3307: 3306
          # Volume mapping (volume::<hostPath>)
          volume::myData: /var/data 
          # Rebuild (default: false, possible values: "true", "false")
          rebuild: true
        lconfig:
          # port, only taking effect if `expose` set to "lconfig.ports"
          ports: []
      ```
    private: true
    extend: core.startService
    dependencies:
    - updateLinks
    inputs:
    - docker.env
    config:
      localhost: localhost
      expose: config.port
      rebuild: false
      useImagePrefix: true
      setup: |
        {{ $d := .Decoration -}}
        {{ .Trim (.GetConfig "loadBootstrapScript") "\n" }} 
        {{ .Trim (.GetConfig "loadUtilScript") "\n" }} 
        DOCKER_IMAGE_PREFIX="{{ .GetDockerImagePrefix }}"
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        . "${UTIL}/should_not_be_empty.sh" "${CONTAINER_NAME}" "{{ $d.Bold }}{{ $d.Red }}containerName is not provided{{ $d.Normal }}"
        IMAGE_NAME="{{ .GetConfig "imageName" }}"
        . "${UTIL}/should_not_be_empty.sh" "${IMAGE_NAME}" "{{ $d.Bold }}{{ $d.Red }}imageName is not provided{{ $d.Normal }}"
        set -e
      check: |
        {{ $d := .Decoration -}}
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting container '${CONTAINER_NAME}'{{ $d.Normal }}"
        until [ "$(. "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        do
          sleep 1
        done
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is running{{ $d.Normal }}"
        {{ $expose := .GetConfig "expose" -}}
        {{ if eq $expose "lconfig.ports" -}}
          {{ range $index, $hostPort := .GetLConfig "ports" -}}
            echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
            . "${UTIL}/wait_port.sh" "localhost" "{{ $hostPort }}"
            echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
          {{ end -}}
        {{ else -}}
          {{ range $index, $hostPort := .GetSubConfigKeys "port" -}}
            echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
            . "${UTIL}/wait_port.sh" "localhost" "{{ $hostPort }}"
            echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
          {{ end -}}
        {{ end -}}
      completeCheck: |
        {{- $d := .Decoration -}}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is ready{{ $d.Normal }}"
      start: |
        {{ $d := .Decoration -}}
        {{ $rebuild := .GetConfig "rebuild" -}}
        {{ $imageTag := .GetConfig "imageTag" -}}
        {{ if and (ne $rebuild "true") (ne $rebuild "false") }}
          echo "{{ $d.Bold }}{{ $d.Red }}'rebuild' value should be either 'true' or 'false'{{ $d.Normal }}" && exit 1
        {{ end -}}
        {{ $expose := .GetConfig "expose" -}}
        {{ if and (ne $expose "config.port") (ne $expose "lconfig.ports") -}}
          echo "{{ $d.Bold }}{{ $d.Red }}'expose' value should be either 'config.port' or 'lconfig.ports'{{ $d.Normal }}" && exit 1
        {{ end -}}
        {{ $this := . -}}
        {{ if eq $rebuild "true" }}. "${UTIL}/stop_and_remove_container.sh" "${CONTAINER_NAME}"{{ end }}
        if [ "$(. "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' was already started{{ $d.Normal }}"
        elif [ ! -z $(. "${UTIL}/inspect_docker.sh" "container" ".Name" "${CONTAINER_NAME}") ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          docker start "${CONTAINER_NAME}"
        else
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Creating and starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          docker run --name "${CONTAINER_NAME}" {{ "" -}}
            {{ range $key, $val := $this.GetEnvs -}} 
              -e {{ $key }}="$(echo "{{ $val }}" | sed s/localhost/{{ $this.GetConfig "localhost" }}/g)" {{ "" -}}
            {{ end -}}
            {{ if eq $expose "config.port" -}}
              {{ range $index, $hostPort := $this.GetSubConfigKeys "port" -}}
                {{ $containerPort := $this.GetConfig "port" $hostPort -}}
                -p "{{ $hostPort }}:{{ $containerPort }}" {{ "" -}}
              {{ end -}}
            {{ else if eq $expose "lconfig.ports" -}}
              {{ range $index, $port := $this.GetLConfig "ports" -}}
                -p "{{ $port }}:{{ $port }}" {{ "" -}}
              {{ end -}}
            {{ end -}}
            {{ range $index, $hostVolume := $this.GetSubConfigKeys "volume" -}}
              {{ $absHostVolume := $this.GetWorkPath $hostVolume -}}
              {{ $containerVolume := $this.GetConfig "volume" $hostVolume -}}
              -v "{{ $absHostVolume }}:{{ $containerVolume }}" {{ "" -}}
            {{ end -}}
            -d "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}{{ if $imageTag }}:{{ $imageTag }}{{ end }}"
        fi
      completeStart: |
        {{ $d := .Decoration -}}
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Logging '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker logs --since 0m --follow "${CONTAINER_NAME}"
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' started{{ $d.Normal }}"


  core.monitorPorts:
    icon: üîé
    description: |
      Throw error when any port is inactive
      USAGE:
      ```yaml
      monitorPorts:
        extend: core.monitorPorts
        dependencies:
        - runServiceA
        - runMysql
        config:
          interval: 1  # Interval (in second) for port checking, (default: 1)
        lconfig:
          # Port to be checked. (no default)
          ports:
          - '{{ .GetEnv "MYSERVICE_A_HTTP_PORT" }}'
          - 3306
      ```
    private: true
    extend: core.startService
    config:
      interval: 1
      start: |
        {{ $d := .Decoration -}}
        PORTS=""
        {{ range $index, $port := .GetLConfig "ports" -}}
          PORTS="${PORTS} {{ $port }}"
        {{ end -}}
        while true
        do
          for PORT in ${PORTS}
          do
            if nc -z "localhost" "${PORT}"
            then
              continue
            fi
            echo "üîé {{ $d.Bold }}{{ $d.Red }}Port '${PORT}' is not listening{{ $d.Normal }}"
            exit 1
          done
          sleep {{ .GetConfig "interval" }}
        done
      completeCheck: |
        {{ $d := .Decoration -}}
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Port monitoring started{{ $d.Normal }}"