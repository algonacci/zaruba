tasks:

  core.startService:
    icon: üìú
    description: |
      Start service
      USAGE:
      ```yaml
      startService:
        extend: core.startService
        config:
          # Script to start the service. (no default)
          start: |
            python -m http.server {{ .GetEnv "HTTP_PORT" }}
        lconfig:
          # Port to be checked. (no default)
          ports:
          - {{ .GetEnv "HTTP_PORT" }}
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
    - updateLinks
    check:
    - "{{ .Config.cmd }}"
    - "{{ .Config.cmdArg }}"
    - |
      {{- $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      {{ if .Config.beforeCheck }}{{ .Config.beforeCheck }}{{ end }}
      {{ range $index, $port := .LConfig.ports -}}
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Waiting for port '{{ $port }}'{{ $d.Normal }}"
        sh "${UTIL}/wait_port.sh" "localhost" "{{ $port }}"
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Port '{{ $port }}' is ready{{ $d.Normal }}"
      {{ end -}}
      set +e
      {{ if .Config.afterCheck }}{{ .Config.afterCheck }}{{ end }}
      echo üéâüéâüéâ
      echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Task '{{ .Name }}' is ready{{ $d.Normal }}"


  core.startDockerContainer:
    icon: üê≥
    description: |
      Start or create and run docker container
      USAGE:
      ```yaml
      startContainer:
        config:
          # Container name (no default)
          containerName: mysql
          # Image name (no default)
          imageName: mysql:latest
          # Port mapping (port::<hostPort>)
          port::3307: 3306
          # Volume mapping (volume::<hostPath>)
          volume::myData: /var/data 
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
    - createDockerNetwork
    - updateLinks
    start:
    - "sh"
    - "-c"
    - |
      {{ $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      {{ if .Config.containerName }}{{ else -}}
        echo "{{ $d.Bold }}{{ $d.Red }}Container name is not provided{{ $d.Normal }}" 1>&2 && exit 1
      {{ end -}}
      {{ if .Config.imageName }}{{ else -}}
        echo "{{ $d.Bold }}{{ $d.Red }}Image name is not provided{{ $d.Normal }}" 1>&2 && exit 1
      {{ end -}}
      {{ if .Config.beforeStart }}{{ .Config.beforeStart }}{{ end }}
      {{ $this := . -}}
      {{ $workPath := .WorkPath -}}
      {{ $config := .Config -}}
      {{ $ports := $config.GetSubKeys "port" -}}
      {{ $volumes := $config.GetSubKeys "volume" -}}
      {{ $projectName := .ProjectName }}
      CONTAINER_NAME="{{ .Config.containerName }}"
      IS_RUNNING=$(sh "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")
      if [ "${IS_RUNNING}" = true ]
      then
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' was already started{{ $d.Normal }}"
      elif [ -z $(sh "${UTIL}/inspect_docker.sh" "container" ".Name" "${CONTAINER_NAME}") ]
      then
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Creating and starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker run --name "${CONTAINER_NAME}" {{ "" -}}
          --network="{{ .ProjectName }}" {{"" -}}
          {{ range $key, $val := .Env }} -e {{ $key }}={{ $val }} {{ end -}}
          {{ range $index, $hostPort := $ports -}}
            {{ $containerPort := $config.GetValue "port" $hostPort -}}
            -p "{{ $hostPort }}:{{ $containerPort }}" {{ "" -}}
          {{ end -}}
          {{ range $index, $hostVolume := $volumes -}}
            {{ $absHostVolume := $this.GetAbsPath $workPath $hostVolume -}}
            {{ $containerVolume := $config.GetValue "volume" $hostVolume -}}
            -v "{{ $absHostVolume }}:{{ $containerVolume }}" {{ "" -}}
          {{ end -}}
          -d {{ .Config.imageName }}
      else
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker start "${CONTAINER_NAME}"
      fi
      {{ if .Config.afterStart }}{{ .Config.afterStart }}{{ end }}
      echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Logging '${CONTAINER_NAME}'{{ $d.Normal }}"
      docker logs --since 0m --follow "${CONTAINER_NAME}"
      echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Connecting container '${CONTAINER_NAME}' to '{{ $projectName }}' network{{ $d.Normal }}"
      docker network connect "{{ $projectName }}" "${CONTAINER_NAME}"
      echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' started{{ $d.Normal }}"
    check:
    - "sh"
    - "-c"
    - |
      {{ $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      CONTAINER_NAME="{{ .Config.containerName }}"
      {{ if .Config.beforeCheck }}{{ .Config.beforeCheck }}{{ end }}
      echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting container '${CONTAINER_NAME}'{{ $d.Normal }}"
      IS_RUNNING=$(sh "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")
      until [ "${IS_RUNNING}" = true ]
      do
        sleep 1
        IS_RUNNING=$(sh "${UTIL}/inspect_docker.sh" "container" ".State.Running" "${CONTAINER_NAME}")
      done
      echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is running{{ $d.Normal }}"
      {{ $ports := .Config.GetSubKeys "port" -}}
      {{ range $index, $hostPort := $ports -}}
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
        sh "${UTIL}/wait_port.sh" "localhost" "{{ $hostPort }}"
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
      {{ end -}}
      {{ if .Config.afterCheck }}{{ .Config.afterCheck }}{{ end }}
      echo üéâüéâüéâ
      echo "{{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is ready{{ $d.Normal }}"


  core.monitorPorts:
    icon: üîé
    description: |
      Throw error when any port is inactive
      USAGE:
      ```yaml
      monitorPorts:
        extend: core.monitorPorts
        dependencies:
        - runServiceA
        - runMysql
        config:
          interval: 1  # Interval (in second) for port checking, (default: 1)
        lconfig:
          # Port to be checked. (no default)
          ports:
          - '{{ .GetEnv "MYSERVICE_A_HTTP_PORT" }}'
          - 3306
      ```
    private: true
    extend: core.runCoreScript
    start:
    - "{{ .Config.cmd }}"
    - "{{ .Config.cmdArg }}"
    - |
      {{ $d := .Decoration -}}
      {{ if .Config.setup }}{{ .Config.setup }}{{ end }}
      PORTS=""
      {{ range $index, $port := .LConfig.ports -}}
        PORTS="${PORTS} {{ $port }}"
      {{ end -}}
      while true
      do
        for PORT in ${PORTS}
        do
          if nc -z "localhost" "${PORT}"
          then
            continue
          fi
          echo "üîé {{ $d.Bold }}{{ $d.Red }}Port '${PORT}' is not listening{{ $d.Normal }}"
          exit 1
        done
        sleep {{ if .Config.interval }}{{ .Config.interval }}{{ else }}1{{ end }}
      done
    check:
    - "{{ .Config.cmd }}"
    - "{{ .Config.cmdArg }}"
    - |
      {{ $d := .Decoration -}}
      echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Port monitoring started{{ $d.Normal }}"
