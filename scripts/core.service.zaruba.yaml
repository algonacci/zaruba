tasks:

  core.startService:
    icon: üìú
    description: |
      Start service and check it's readiness.
      Common config:
        setup       : Script to be executed before start service or check service readiness.
        start       : Script to start the service (e.g: python -m http.server 9000).
        beforeStart : Script to be executed before start service.
        afterStart  : Script to be executed after start service.
        beforeCheck : Script to be executed before check service readiness.
        afterCheck  : Script to be executed before check service readiness.
        finish      : Script to be executed after start service or check service readiness.
      Common lconfig:
        ports: Port to be checked to confirm service readiness (e.g: [9000])
    private: true
    extend: core.runCoreScript
    dependencies:
    - updateLinks
    config:
      beforeStart: ""
      start: ""
      afterStart: ""
      beforeCheck: ""
      check: |
        {{- $d := .Decoration -}}
        {{ range $index, $port := .GetLConfig "ports" -}}
          echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Waiting for port '{{ $port }}'{{ $d.Normal }}"
          invoke_core_sh wait_port "localhost" "{{ $port }}"
          echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Port '{{ $port }}' is ready{{ $d.Normal }}"
        {{ end -}}
      afterCheck: ""
    lconfig:
      ports: []
    start:
    - '{{ .GetConfig "cmd" }}'
    - '{{ .GetConfig "cmdArg" }}'
    - |
        {{ .Trim (.GetConfig "_setup") "\n " }}
        {{ .Trim (.GetConfig "setup") "\n " }}
        {{ .Trim (.GetConfig "beforeStart") "\n " }}
        {{ .Trim (.GetConfig "_start") "\n " }}
        {{ .Trim (.GetConfig "start") "\n " }}
        {{ .Trim (.GetConfig "afterStart") "\n " }}
        {{ .Trim (.GetConfig "finish") "\n " }}
        {{- $d := .Decoration -}}
        echo üéâüéâüéâ
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Task '{{ .Name }}' is started{{ $d.Normal }}"
    check:
    - '{{ .GetConfig "cmd" }}'
    - '{{ .GetConfig "cmdArg" }}'
    - |
        {{ .Trim (.GetConfig "_setup") "\n " }}
        {{ .Trim (.GetConfig "setup") "\n " }}
        {{ .Trim (.GetConfig "beforeCheck") "\n " }}
        {{ .Trim (.GetConfig "_check") "\n " }}
        {{ .Trim (.GetConfig "check") "\n " }}
        {{ .Trim (.GetConfig "afterCheck") "\n " }}
        {{ .Trim (.GetConfig "finish") "\n " }}
        {{- $d := .Decoration -}}
        echo üéâüéâüéâ
        echo "üìú {{ $d.Bold }}{{ $d.Yellow }}Task '{{ .Name }}' is ready{{ $d.Normal }}"
  

  core.startNvmService:
    icon: üê∏
    description: |
      Start service and check it's readiness.
      Common config:
        setup       : Script to be executed before start service or check service readiness.
        start       : Script to start the service (e.g: python -m http.server 9000).
        beforeStart : Script to be executed before start service.
        afterStart  : Script to be executed after start service.
        beforeCheck : Script to be executed before check service readiness.
        afterCheck  : Script to be executed before check service readiness.
        finish      : Script to be executed after start service or check service readiness.
      Common lconfig:
        ports: Port to be checked to confirm service readiness (e.g: [9000])
    private: true
    extend: core.startService
    configRef: core.nvm
    config:
      _setup: |
        set -e
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }} 
        {{ .Trim (.GetConfig "includeUtilScript") "\n" }} 
        {{ .Trim (.GetConfig "includeNvmScript") "\n" }} 


  core.startDockerContainer:
    icon: üê≥
    description: |
      Start docker container and check it's readiness.
      If container is already started, it's stdout/stderr will be shown.
      If container is exist but not started, it will be started.
      If container is not exist, it will be created and started.
      Common config:
        setup                 : Script to be executed before start service or check service readiness.
        beforeStart           : Script to be executed before start service.
        afterStart            : Script to be executed after start service.
        beforeCheck           : Script to be executed before check service readiness.
        afterCheck            : Script to be executed before check service readiness.
        finish                : Script to be executed after start service or check service readiness.
        useImagePrefix        : Whether image prefix should be used or not
        imagePrefix           : Image prefix
        imageName             : Image name
        imageTag              : Image tag
        containerName         : Name of the container
        dockerEnv             : Docker env to be used when useImagePrefix is true,
                                but imagePrefix is not provided
        expose                : Ports to be exposed. Either 'config.port' or 'lconfig.ports'
        port::<host-port>     : Map <host-port> to container's port.
                                Only applicable if expose is set to config.port
        volume::<host-volume> : Map <host-volume> to file/directory inside the container
        rebuild               : Should container be rebuild (This will not rebuild the image)
        command               : Command to be used (Single Line).
                                Leave blank to use container's CMD.
                                The command will be executed from inside the container.
        checkCommand          : Command to check container readiness (Single Line).
                                The command will be executed from inside the container.
        localhost             : Localhost mapping (e.g: host.docker.container)
      Common lconfig:
        ports : Ports to be exposed. Only taking effect if expose is set to lconfig.ports.
    private: true
    extend: core.startService
    dependencies:
    - updateLinks
    inputs:
    - docker.env
    configRef: core.docker
    config:
      containerName: ""
      imagePrefix: ""
      imageName: ""
      imageTag: ""
      useImagePrefix: true
      command: ""
      checkCommand: ""
      rebuild: false
      localhost: localhost
      expose: config.port
      hostDockerInternal: '{{ if .GetEnv "ZARUBA_HOST_DOCKER_INTERNAL" }}{{ .GetEnv "ZARUBA_HOST_DOCKER_INTERNAL" }}{{ else }}host.docker.internal{{ end }}'
      _setup.dockerImagePrefix: |
        DOCKER_IMAGE_PREFIX="$(getDockerImagePrefix)"
        if [ ! -z "${DOCKER_IMAGE_PREFIX}" ]
        then
          DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}/"
        fi
      _setup.containerName: |
        {{ $d := .Decoration -}}
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        invoke_core_sh should_not_be_empty "${CONTAINER_NAME}" "{{ $d.Bold }}{{ $d.Red }}containerName is not provided{{ $d.Normal }}"
      _setup.imageName: |
        {{ $d := .Decoration -}}
        IMAGE_NAME="{{ .GetConfig "imageName" }}"
        invoke_core_sh should_not_be_empty "${IMAGE_NAME}" "{{ $d.Bold }}{{ $d.Red }}imageName is not provided{{ $d.Normal }}"
      _setup.validateExpose: |
        {{ $d := .Decoration -}}
        {{ $expose := .GetConfig "expose" -}}
        {{ if and (ne $expose "config.port") (ne $expose "lconfig.ports") -}}
          echo "{{ $d.Bold }}{{ $d.Red }}'expose' value should be either 'config.port' or 'lconfig.ports'{{ $d.Normal }}" && exit 1
        {{ end -}}
      _setup: |
        set -e
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }} 
        {{ .Trim (.GetConfig "includeUtilScript") "\n" }} 
        {{ .Trim (.GetConfig "includeDockerScript") "\n" }}
        {{ .Trim (.GetConfig "_setup.dockerImagePrefix") "\n" }} 
        {{ .Trim (.GetConfig "_setup.containerName") "\n" }} 
        {{ .Trim (.GetConfig "_setup.imageName") "\n" }} 
        {{ .Trim (.GetConfig "_setup.validateExpose") "\n" }} 
      _check.containerState: |
        {{ $d := .Decoration -}}
        until [ "$(invoke_core_sh inspect_docker "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        do
          sleep 1
        done
        while [ "$(invoke_core_sh inspect_docker "container" ".State.Health" "${CONTAINER_NAME}")" = false ]
        do
          sleep 1
        done
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is running{{ $d.Normal }}"
      _check.checkCommand: |
        {{ $d := .Decoration -}}
        {{ if .GetConfig "checkCommand" -}}
        (echo $- | grep -Eq ^.*e.*$) && _OLD_STATE=-e || _OLD_STATE=+e
        set +e
        docker exec "${CONTAINER_NAME}" {{ .GetConfig "checkCommand" }}
        until [ "$?" = "0" ]
        do
          docker exec "${CONTAINER_NAME}" {{ .GetConfig "checkCommand" }}
          sleep 3
        done
        set "${_OLD_STATE}"
        {{ end -}}
      _check.lConfigPorts: |
        {{ $d := .Decoration -}}
        {{ range $index, $hostPort := .GetLConfig "ports" -}}
          echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
          invoke_core_sh wait_port "localhost" "{{ $hostPort }}"
          echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
        {{ end -}}
      _check.configPorts: |
        {{ $d := .Decoration -}}
        {{ range $index, $hostPort := .GetSubConfigKeys "port" -}}
          echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port '{{ $hostPort }}'{{ $d.Normal }}"
          invoke_core_sh wait_port "localhost" "{{ $hostPort }}"
          echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
        {{ end -}}
      _check: |
        {{ $d := .Decoration -}}
        {{ .GetConfig "_check.containerState" }}
        {{ $expose := .GetConfig "expose" -}}
        {{ if eq $expose "lconfig.ports" -}}
          {{ .GetConfig "_check.lConfigPorts" }}
        {{ else -}}
          {{ .GetConfig "_check.configPorts" }}
        {{ end -}}
        {{ .GetConfig "_check.checkCommand" }}
        sleep 1
      _start.rebuildContainer: |
        invoke_core_sh stop_container "${CONTAINER_NAME}"
        invoke_core_sh remove_container "${CONTAINER_NAME}"
      _start.logContainer: |
        {{ $d := .Decoration -}}
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Logging '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker logs --since 0m --follow "${CONTAINER_NAME}"
      _start.runContainer.env: |
        {{ $this := . -}}
        {{ range $key, $val := $this.GetEnvs -}} 
          -e "{{ $key }}={{ if eq ($this.GetConfig "localhost") "localhost" }}{{ $val }}{{ else }}{{ $this.ReplaceAllWith $val "localhost" "127.0.0.1" "0.0.0.0" ($this.GetConfig "localhost") }}{{ end }}" {{ "" -}}
        {{ end -}}
      _start.runContainer.port: |
        {{ $this := . -}}
        {{ if eq (.GetConfig "expose") "config.port" -}}
          {{ range $index, $hostPort := $this.GetSubConfigKeys "port" -}}
            {{ $containerPort := $this.GetConfig "port" $hostPort -}}
            -p "{{ $hostPort }}:{{ $containerPort }}" {{ "" -}}
          {{ end -}}
        {{ else if eq (.GetConfig "expose") "lconfig.ports" -}}
          {{ range $index, $port := $this.GetLConfig "ports" -}}
            -p "{{ $port }}:{{ $port }}" {{ "" -}}
          {{ end -}}
        {{ end -}}
      _start.runContainer.volume: |
        {{ $this := . -}}
        {{ range $index, $hostVolume := $this.GetSubConfigKeys "volume" -}}
          {{ $absHostVolume := $this.GetWorkPath $hostVolume -}}
          {{ $containerVolume := $this.GetConfig "volume" $hostVolume -}}
          -v "{{ $absHostVolume }}:{{ $containerVolume }}" {{ "" -}}
        {{ end -}}
      _start.runContainer: |
        {{ $d := .Decoration -}}
        {{ $imageTag := .GetConfig "imageTag" -}}
        {{ $this := . -}}
        docker run --name "${CONTAINER_NAME}" {{ "" -}}
        {{ .GetConfig "_start.runContainer.env" -}}
        {{ .GetConfig "_start.runContainer.port" -}}
        {{ .GetConfig "_start.runContainer.volume" -}}
        {{ if ne (.GetConfig "hostDockerInternal") "host.docker.internal" }}--add-host "{{ .GetConfig "hostDockerInternal" }}:host.docker.internal"{{ end }} {{ "" -}}
        -d "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}{{ if $imageTag }}:{{ $imageTag }}{{ end }}" {{ .GetConfig "command" }}
      _start: |
        {{ $d := .Decoration -}}
        {{ $rebuild := .GetConfig "rebuild" -}}
        {{ if .IsTrue $rebuild }}{{ .GetConfig "_start.rebuildContainer" }}{{ end }}
        if [ "$(invoke_core_sh inspect_docker "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' was already started{{ $d.Normal }}"
          {{ .GetConfig "_start.logContainer" }}
        elif [ ! -z $(invoke_core_sh inspect_docker "container" ".Name" "${CONTAINER_NAME}") ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Retrieve previous log of '${CONTAINER_NAME}'{{ $d.Normal }}"
          sleep 1
          docker logs --tail 20 "${CONTAINER_NAME}"
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          docker start "${CONTAINER_NAME}"
          {{ .GetConfig "_start.logContainer" }}
        else
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Creating and starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          {{ .GetConfig "_start.runContainer" }}
          {{ .GetConfig "_start.logContainer" }}
        fi


  core.monitorPorts:
    icon: üîé
    description: |
      Throw error when any port is inactive
      Common lconfig:
        ports: Ports to be checked (e.g: [8080, 3306])
    private: true
    extend: core.startService
    config:
      interval: 1
      _setup.ports: |
        PORTS=""
        {{ range $index, $port := .GetLConfig "ports" -}}
          PORTS="${PORTS} {{ $port }}"
        {{ end -}}
      _setup: '{{ .GetConfig "_setup.ports" }}'
      _start.checkPorts: |
        {{ $d := .Decoration -}}
        for PORT in ${PORTS}
        do
          if nc -z "localhost" "${PORT}"
          then
            continue
          fi
          echo "üîé {{ $d.Bold }}{{ $d.Red }}Port '${PORT}' is not listening{{ $d.Normal }}"
          exit 1
        done
      _start: |
        {{ $d := .Decoration -}}
        while true
        do
          {{ .GetConfig "_start.checkPorts" }}
          sleep {{ .GetConfig "interval" }}
        done
      _check: |
        {{ $d := .Decoration -}}
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Port monitoring started for: ${PORTS}{{ $d.Normal }}"
    lconfig:
      ports: [8080]
    

  core.mysql.startDockerContainer:
    icon: üê¨ 
    private: true
    extend: core.startDockerContainer
    config:
      checkCommand: mysqladmin -u "root" -p{{ .GetEnv "MYSQL_PASSWORD" }} status
  

  core.cassandra.startDockerContainer:
    icon: üëÄ
    private: true
    extend: core.startDockerContainer
    config:
      checkCommand: cqlsh -e "describe keyspaces"
  
