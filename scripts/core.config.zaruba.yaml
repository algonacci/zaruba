configs:

  core.showVersion:
    showVersionScript: |
      {{ $d := .Decoration -}}
      cd ${ZARUBA_HOME}
      echo "{{ $d.Bold }}{{ $d.Yellow }}Current version: $(invoke_core_sh get_latest_git_tag) - $(invoke_core_sh get_latest_git_commit){{ $d.Normal }}"


  core.shell:
    playBellScript: echo $'\a'
    initThirdPartiesScript: |
      THIRD_PARTIES="${ZARUBA_HOME}/scripts/thirdparties"
      if [ ! -d "${THIRD_PARTIES}" ]
      then
        mkdir -p "${THIRD_PARTIES}"
        chown "${CURRENT_USER}" "${THIRD_PARTIES}"
      fi
    includeBootstrapScript: |
      if [ -f "${HOME}/.bashrc" ]
      then
        . "${HOME}/.bashrc"
      fi
      THIRD_PARTIES="${ZARUBA_HOME}/scripts/thirdparties"
      BOOTSTRAP_SCRIPT="${ZARUBA_HOME}/scripts/bootstrap.sh"
      . "${BOOTSTRAP_SCRIPT}"
    includeUtilScript: |
      invoke_core_py() {
        export PIPENV_IGNORE_VIRTUALENVS=1
        export PIPENV_DONT_LOAD_ENV=1
        export PIPENV_PIPFILE="${ZARUBA_HOME}/scripts/util/python/Pipfile"
        pipenv run python "${ZARUBA_HOME}/scripts/util/python/${1}.py" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}"
      }
      invoke_core_sh() {
        . "${ZARUBA_HOME}/scripts/util/sh/${1}.sh" "${2}" "${3}" "${4}" "${5}" "${6}" "${7}" "${8}" "${9}" "${10}" "${11}" "${12}" "${13}" "${14}" "${15}" "${16}"
      }


  core.docker:
    dockerEnv: '{{ .GetValue "docker.env" }}'
    includeDockerScript: |
      getDockerImagePrefix() {
      {{ if and (.GetConfig "useImagePrefix") (.IsFalse (.GetConfig "useImagePrefix")) -}}
        echo ""
      {{ else if .GetConfig "imagePrefix" -}}
        echo "{{ .GetConfig "imagePrefix" }}"
      {{ else if and (.GetConfig "dockerEnv") (.GetValue "dockerImagePrefix" (.GetConfig "dockerEnv")) -}}
        echo "{{ .GetValue "dockerImagePrefix" (.GetConfig "dockerEnv") }}"
      {{ else if .GetValue "dockerImagePrefix" "default" -}}
        echo "{{ .GetValue "dockerImagePrefix" "default" }}"
      {{ else }}
        echo "local"
      {{ end -}}
      }
  

  core.nvm:
    nodeVersion: node
    installTypeScript: false
    compileTypeScript: false
    typeScriptVersion: ""
    removeNodeModules: false
    npmCleanCache: false
    npmRebuild: false
    includeNvmScript: |
      if [ "$(invoke_core_sh is_command_exist nvm)" = 1 ]
      then
        if [ "$(invoke_core_sh is_command_error nvm ls "{{ if .GetConfig "nodeVersion" }}{{ .GetConfig "nodeVersion" }}{{ else }}node{{ end }}" )" ]
        then
          nvm install "{{ if .GetConfig "nodeVersion" }}{{ .GetConfig "nodeVersion" }}{{ else }}node{{ end }}"
        else
          nvm use "{{ if .GetConfig "nodeVersion" }}{{ .GetConfig "nodeVersion" }}{{ else }}node{{ end }}"
        fi
      fi
    typeScriptInstallScript: |
      {{ if .IsTrue (.GetConfig "installTypeScript") -}}
        if [ -f "./node_modules/.bin/tsc" ] || [ "$(invoke_core_sh is_command_exist tsc)" = 1 ]
        then
          echo "Typescript is already installed"
        else
          npm install -g typescript{{ if .GetConfig "typeScriptVersion" }}@{{ .GetConfig "typeScriptVersion" }}{{ end }}
        fi
      {{ end -}}
    typeScriptCompileScript: |
      {{ if .IsTrue (.GetConfig "compileTypeScript") -}}
        if [ -f "./node_modules/.bin/tsc" ]
        then
          ./node_modules/.bin/tsc
        else
          tsc
        fi
      {{ end -}}
    removeNodeModulesScript: |
      {{ if .IsTrue (.GetConfig "removeNodeModules") -}}
        rm -Rf node_modules
      {{ end -}}
    npmRebuildScript: |
      {{ if .IsTrue (.GetConfig "npmRebuild") -}}
        npm rebuild
      {{ end -}}
    npmInstallScript: |
      if [ ! -d "node_modules" ]
      then
        npm install
      fi
    npmCleanCacheScript: |
      {{ if .IsTrue (.GetConfig "npmCleanCache") -}}
        npm cache clean --force
      {{ end -}}