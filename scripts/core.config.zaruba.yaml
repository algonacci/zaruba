configs:


  core.shell:
    playBellScript: echo $'\a'
    includeUtilScript: . "${ZARUBA_HOME}/scripts/util.sh"
    includeBootstrapScript: |
      if [ -f "${HOME}/.profile" ]
      then
          . "${HOME}/.profile"
      fi
      if [ -f "${HOME}/.bashrc" ]
      then
          . "${HOME}/.bashrc"
      fi
      BOOTSTRAP_SCRIPT="${ZARUBA_HOME}/scripts/bootstrap.sh"
      . "${BOOTSTRAP_SCRIPT}"


  core.docker:
    dockerEnv: '{{ .GetValue "docker.env" }}'
    helmEnv: '{{ .GetValue "helm.env" }}'
    kubeContext: '{{ .GetValue "kube.context" }}'
    useImagePrefix: true
    imagePrefix: ''
    imagePrefixTrailingSlash: false
    initDockerImagePrefixScript: |
      {{ if .IsFalse (.GetConfig "useImagePrefix") -}}
        DOCKER_IMAGE_PREFIX=""
      {{ else if .GetConfig "imagePrefix" -}}
        DOCKER_IMAGE_PREFIX="{{ .GetConfig "imagePrefix" }}"
      {{ else if and (.GetConfig "dockerEnv") (.GetValue "dockerImagePrefix" (.GetConfig "dockerEnv")) -}}
        DOCKER_IMAGE_PREFIX="{{ .GetValue "dockerImagePrefix" (.GetConfig "dockerEnv") }}"
      {{ else if .GetValue "dockerImagePrefix" "default" -}}
        DOCKER_IMAGE_PREFIX="{{ .GetValue "dockerImagePrefix" "default" }}"
      {{ else -}}
        DOCKER_IMAGE_PREFIX="local"
      {{ end -}}
      {{ if .IsTrue (.GetConfig "imagePrefixTrailingSlash" ) -}}
        if [ ! -z "${DOCKER_IMAGE_PREFIX}" ]
        then
          DOCKER_IMAGE_PREFIX="${DOCKER_IMAGE_PREFIX}/"
        fi
      {{ end -}}
  

  core.nvm:
    nodeVersion: node
    installTypeScript: false
    compileTypeScript: false
    typeScriptVersion: ""
    removeNodeModules: false
    npmCleanCache: false
    npmRebuild: false
    useNvmScript: |
      if [ "$(is_command_exist nvm)" = 1 ]
      then
        if [ "$(is_command_error nvm ls "{{ if .GetConfig "nodeVersion" }}{{ .GetConfig "nodeVersion" }}{{ else }}node{{ end }}" )" ]
        then
          nvm install "{{ if .GetConfig "nodeVersion" }}{{ .GetConfig "nodeVersion" }}{{ else }}node{{ end }}"
        else
          nvm use "{{ if .GetConfig "nodeVersion" }}{{ .GetConfig "nodeVersion" }}{{ else }}node{{ end }}"
        fi
      fi
    tsInstallScript: |
      {{ if .IsTrue (.GetConfig "installTypeScript") -}}
        if [ -f "./node_modules/.bin/tsc" ] || [ "$(is_command_exist tsc)" = 1 ]
        then
          echo "Typescript is already installed"
        else
          npm install -g typescript{{ if .GetConfig "typeScriptVersion" }}@{{ .GetConfig "typeScriptVersion" }}{{ end }}
        fi
      {{ end -}}
    tsCompileScript: |
      {{ if .IsTrue (.GetConfig "compileTypeScript") -}}
        if [ -f "./node_modules/.bin/tsc" ]
        then
          ./node_modules/.bin/tsc
        else
          tsc
        fi
      {{ end -}}
    removeNodeModulesScript: |
      {{ if .IsTrue (.GetConfig "removeNodeModules") -}}
        rm -Rf node_modules
      {{ end -}}
    npmRebuildScript: |
      {{ if .IsTrue (.GetConfig "npmRebuild") -}}
        npm rebuild
      {{ end -}}
    npmInstallScript: |
      if [ ! -d "node_modules" ]
      then
        npm install
      fi
    npmCleanCacheScript: |
      {{ if .IsTrue (.GetConfig "npmCleanCache") -}}
        npm cache clean --force
      {{ end -}}
  

  generator.fastApi:
    serviceTemplateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiService'
    moduleTemplateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
    serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
    moduleName: '{{ .GetValue "generator.fastApi.module.name" }}'
    createServiceScript: | 
      {{- $d := .Decoration -}}
      if [ ! -d "./{{ .GetConfig "serviceName" }}" ]
      then
        SERVICE_TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "serviceTemplateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        create_fast_service "template_location=${SERVICE_TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}"
        if [ -f "./main.zaruba.yaml" ]
        then
          if [ ! -d "./shared-libs/python/helpers" ]
          then
            mkdir -p "./shared-libs/python/helpers"
            cp -rnT "./${SERVICE_NAME}/helpers" "./shared-libs/python/helpers"
          fi
          add_link "shared-libs/python/helpers" "${SERVICE_NAME}/helpers"
          link_resource "shared-libs/python/helpers" "${SERVICE_NAME}/helpers"
        fi
      fi
    createModuleScript: |
      {{- $d := .Decoration -}}
      {{ .GetConfig "createServiceScript" }}
      if [ ! -d "./{{ .GetConfig "serviceName" }}/{{ .GetConfig "moduleName" }}" ]
      then
        MODULE_TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "moduleTemplateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        should_be_dir "./${SERVICE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME} directory should be exist{{ $d.Normal }}"
        create_fast_module "template_location=${MODULE_TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}"
      fi

