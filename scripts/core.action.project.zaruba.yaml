tasks:

  core.checkIsValidProject:
    icon: 🔎
    private: true
    extend: core.runShellScript
    config:
      script: |
        {{ $d := .Decoration -}}
        if [ ! -e main.zaruba.yaml ]
        then
          echo "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project{{ $d.Normal }}" 1>&2 
          echo "{{ $d.Bold }}{{ $d.Red }}The task has to be executed in a zaruba project directory{{ $d.Normal }}" 1>&2 
          echo "{{ $d.Bold }}{{ $d.Red }}You might want to 'initProject' first{{ $d.Normal }}" 1>&2 
          exit 1
        fi
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is a valid zaruba project{{ $d.Normal }}"

 
  core.checkIsNotProject:
    icon: 🔎
    private: true
    extend: core.runShellScript
    config:
      script: |
        {{ $d := .Decoration -}}
        if [ -e main.zaruba.yaml ]
        then
          echo "{{ $d.Bold }}{{ $d.Red }}$(pwd) is a zaruba project{{ $d.Normal }}" 1>&2
          echo "{{ $d.Bold }}{{ $d.Red }}The task cannot be executed in a zaruba project directory{{ $d.Normal }}" 1>&2 
          exit 1
        fi
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is not a zaruba project{{ $d.Normal }}"

  
  initProject:
    icon: 🚧
    description: Init a zaruba project in your working directory.
    extend: core.runShellScript
    dependencies:
      - core.checkIsNotProject
    config:
      script: | 
        {{ $d := .Decoration -}}
        git init
        cp "${SCRIPT_PATH}/project-template/default.kwargs.yaml" ./default.kwargs.yaml
        cp "${SCRIPT_PATH}/project-template/main.zaruba.yaml" ./main.zaruba.yaml
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Project created{{ $d.Normal }}"

  
  addDocker:
    icon: 🐳
    description: |
      Create docker task
      You need to specify `image`, `task`, and `container`. For example:
      ```sh
      zaruba please addDocker  <image=nginx> [container=myNginx] [task=runMyNginx]
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
      - core.setupPythonUtil
    config:
      script: |
        {{ $d := .Decoration -}}
        export PIPENV_PIPFILE="${PYTHON_UTIL}/Pipfile"
        set -e
        IMAGE="{{ if .Kwargs.image }}{{ .Kwargs.image }}{{ end }}"
        CONTAINER="{{ if .Kwargs.container }}{{ .Kwargs.container }}{{ end }}"
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ end }}"
        pipenv run python "${PYTHON_UTIL}/create_docker_task.py" "${IMAGE}" "${CONTAINER}" "${TASK}"
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"
  
 
  addService:
    icon: 📦
    description: |
      Create service task
      You need to specify `location`, task, and `type`. For example:
      ```sh
      zaruba please addService  <location=./service> [type=python] [task=runService]
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
      - core.setupPythonUtil
    config:
      script: |
        {{ $d := .Decoration -}}
        export PIPENV_PIPFILE="${PYTHON_UTIL}/Pipfile"
        set -e
        LOCATION="{{ if .Kwargs.location }}{{ .Kwargs.location }}{{ end }}"
        TYPE="{{ if .Kwargs.type }}{{ .Kwargs.type }}{{ end }}"
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ end }}"
        PORTS="{{ if .Kwargs.ports }}{{ .Kwargs.ports }}{{ end }}"
        pipenv run python "${PYTHON_UTIL}/create_service_task.py" "${LOCATION}" "${TYPE}" "${TASK}" "${PORTS}"
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"

 
  updateLinks:
    icon: 🔗
    description: |
      Organize your shared library
      You must specify links `default.kwargs.yaml`:
      ```yaml
      link::<destination>: <source>
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
    config:
      script: |
        {{ $d := .Decoration -}}
        {{ $this := . -}}
        {{ $workPath := .WorkPath }}
        {{ $destinations := .Kwargs.GetSubKeys "link" -}}
        {{ $kwargs := .Kwargs -}}
        {{ range $index, $destination := $destinations -}}
          {{ $source := $kwargs.GetValue "link" $destination -}}
          {{ $absSource := $this.GetAbsPath $workPath $source -}}
          {{ $absDestination := $this.GetAbsPath $workPath $destination -}}
          rm -Rf "{{ $absDestination }}"
          cp -r "{{ $absSource }}" "{{ $absDestination }}"
          chmod 555 "{{ $absDestination }}"
        {{ end -}}
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Links updated{{ $d.Normal }}"
