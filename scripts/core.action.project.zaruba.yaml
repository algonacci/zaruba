tasks:

  core.checkIsValidProject:
    icon: 🔎
    private: true
    extend: core.runShellScript
    config:
      script: |
        {{ $d := .Decoration -}}
        if [ ! -e main.zaruba.yaml ]
        then
          echo "{{ $d.Bold }}{{ $d.Red }}$(pwd) is not a zaruba project{{ $d.Normal }}" 1>&2 
          echo "{{ $d.Bold }}{{ $d.Red }}The task has to be executed in a zaruba project directory{{ $d.Normal }}" 1>&2 
          echo "{{ $d.Bold }}{{ $d.Red }}You might want to 'initProject' first{{ $d.Normal }}" 1>&2 
          exit 1
        fi
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is a valid zaruba project{{ $d.Normal }}"

 
  core.checkIsNotProject:
    icon: 🔎
    private: true
    extend: core.runShellScript
    config:
      script: |
        {{ $d := .Decoration -}}
        if [ -e main.zaruba.yaml ]
        then
          echo "{{ $d.Bold }}{{ $d.Red }}$(pwd) is a zaruba project{{ $d.Normal }}" 1>&2
          echo "{{ $d.Bold }}{{ $d.Red }}The task cannot be executed in a zaruba project directory{{ $d.Normal }}" 1>&2 
          exit 1
        fi
        echo "{{ $d.Bold }}{{ $d.Yellow }}Current directory is not a zaruba project{{ $d.Normal }}"

  
  initProject:
    icon: 🚧
    description: Init a zaruba project in your working directory.
    extend: core.runShellScript
    dependencies:
      - core.checkIsNotProject
    config:
      script: | 
        {{ $d := .Decoration -}}
        git init
        cp "${SCRIPT_PATH}/templates/project/default.kwargs.yaml" ./default.kwargs.yaml
        cp "${SCRIPT_PATH}/templates/project/main.zaruba.yaml" ./main.zaruba.yaml
        cp "${SCRIPT_PATH}/templates/project/.gitignore" ./.gitignore
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Project created{{ $d.Normal }}"

  
  addDocker:
    icon: 🐳
    description: |
      Create docker task
      You need to specify `image`, `task`, and `container`. For example:
      ```sh
      zaruba please addDocker  <image=nginx> [container=myNginx] [task=runMyNginx] [templates=templatePath1:templatePath2]
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        TEMPLATES="{{ if .Kwargs.templates }}{{ .Kwargs.templates }}{{ end }}"
        IMAGE="{{ if .Kwargs.image }}{{ .Kwargs.image }}{{ end }}"
        CONTAINER="{{ if .Kwargs.container }}{{ .Kwargs.container }}{{ end }}"
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ end }}"
        sh "${UTIL}/py.sh" create_docker_task "${TEMPLATES}" "${IMAGE}" "${CONTAINER}" "${TASK}"
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"
  
 
  addService:
    icon: 📦
    description: |
      Create service task
      You need to specify `location`, `task`, `type`, and `templates`. For example:
      ```sh
      zaruba please addService  <location=./service> [type=python] [task=runService] [ports=port1,port2] [templates=templatePath1:templatePath2]
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        TEMPLATES="{{ if .Kwargs.templates }}{{ .Kwargs.templates }}{{ end }}"
        LOCATION="{{ if .Kwargs.location }}{{ .Kwargs.location }}{{ end }}"
        TYPE="{{ if .Kwargs.type }}{{ .Kwargs.type }}{{ end }}"
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ end }}"
        PORTS="{{ if .Kwargs.ports }}{{ .Kwargs.ports }}{{ end }}"
        sh "${UTIL}/py.sh" create_service_task "${TEMPLATES}" "${LOCATION}" "${TYPE}" "${TASK}" "${PORTS}"
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"

 
  createService:
    icon: 🍄
    description: |
      Create service task
      You need to specify `location`, `task`, `type`, and `templates`. For example:
      ```sh
      zaruba please createService <location=./service> [type=python] [task=runService] [templates=templatePath1:templatePath2]
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
    config:
      script: |
        {{ $d := .Decoration -}}
        set -e
        TEMPLATES="{{ if .Kwargs.templates }}{{ .Kwargs.templates }}{{ end }}"
        LOCATION="{{ if .Kwargs.location }}{{ .Kwargs.location }}{{ end }}"
        TYPE="{{ if .Kwargs.type }}{{ .Kwargs.type }}{{ end }}"
        PORTS="{{ if .Kwargs.ports }}{{ .Kwargs.ports }}{{ end }}"
        sh "${UTIL}/py.sh" create_service "${TEMPLATES}" "${LOCATION}" "${TYPE}" "${PORTS}"
        echo 🎉🎉🎉

 
  updateLinks:
    icon: 🔗
    description: |
      Organize your shared library
      You must specify links in `default.kwargs.yaml`:
      ```yaml
      link::<destination>: <source>
      ```
    extend: core.runShellScript
    dependencies:
      - core.checkIsValidProject
    config:
      script: |
        {{ $d := .Decoration -}}
        {{ $this := . -}}
        {{ $workPath := .WorkPath }}
        {{ $destinations := .Kwargs.GetSubKeys "link" -}}
        {{ $kwargs := .Kwargs -}}
        {{ range $index, $destination := $destinations -}}
          {{ $source := $kwargs.GetValue "link" $destination -}}
          {{ $absSource := $this.GetAbsPath $workPath $source -}}
          {{ $absDestination := $this.GetAbsPath $workPath $destination -}}
          sh "${UTIL}/update_link.sh" "{{ $absSource }}" "{{ $absDestination }}"
        {{ end -}}
        echo 🎉🎉🎉
        echo "{{ $d.Bold }}{{ $d.Yellow }}Links updated{{ $d.Normal }}"

  clearLog:
    icon: 🔥
    extend: core.runShellScript
    description: Clear log
    config:
      script: |
        {{ $d := .Decoration -}}
        rm -Rf log.zaruba.csv
        echo "{{ $d.Bold }}{{ $d.Yellow }}Log removed{{ $d.Normal }}"
  

  showLog:
    icon: 🔎
    extend: core.runShellScript
    description: |
      Show log for all/particular tasks using regex
      Usage:
      ```sh
      zaruba please showLog
      zaruba please showLog task="test.*"
      ```
    logless: true
    config:
      script: |
        if [ ! -f log.zaruba.csv ]
        then
          echo "Log is not exist" 1>&2
          exit 1
        fi
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ else }}.*{{ end }}"
        sh "${UTIL}/py.sh" show_log "log.zaruba.csv" "${TASK}"
