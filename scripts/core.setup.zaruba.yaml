tasks:

  core.setupPyUtil:
    icon: üêç
    description: |
      Setup python helper utitities.
      USAGE:
      ```yaml
      runTask:
        extend: core.runCoreScript
        dependencies: 
        - core.setupPyUtil
        config:
          start: |
            . ${PY_UTIL} "show_log"
      ```
    private: true
    extend: core.runCoreScript
    logless: true
    config:
      start: |
        . ${UTIL}/py_install.sh
  

  setupUbuntu:
    icon: üî®
    description: |
      Install essential packages for ubuntu/mint/debian. Root privilege is required
      USAGE:
        sudo -E zaruba please setupUbuntu
    extend: core.runCoreScript
    timeout: 1h
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install essential packages for ubuntu/mint/debian. Root privilege is required."
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        . ${UTIL}/check_setup_ubuntu.sh "${HOME}"
        echo "üì° {{ $d.Bold }}{{ $d.Yellow }}Update repository{{ $d.Normal }}"
        apt-get update
        apt-get upgrade -y
        echo "üîΩ {{ $d.Bold }}{{ $d.Yellow }}Install packages{{ $d.Normal }}"
        apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git ncat make tmux zsh neovim cowsay figlet lolcat
        if [ ! -z "$(docker -v)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Docker was already installed{{ $d.Normal }}"
        else
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Install docker{{ $d.Normal }}"
          apt-get install -y docker.io
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
        echo "TIPS:"
        echo "* If you are using WSL, please enable WSL2 Backend for best experience (https://docs.docker.com/docker-for-windows/wsl/)"
    

  setupPyenv:
    icon: üî®
    description: |
      Install Pyenv and pipenv. Useful if you are going to start with Python.
      Some zaruba tasks required python and pipenv to be installed, so you likely going to run this anyway.
      USAGE:
        zaruba please setupPyenv
    extend: core.runCoreScript
    timeout: 1h
    config:
      pythonVersion: '{{ if .GetKwarg "pythonVersion" }}{{ .GetKwarg "pythonVersion" }}{{ else }}3.8.6{{ end }}'
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install pyenv and pipenv in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" pyenv)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Pyenv was already installed{{ $d.Normal }}"
        else
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install pyenv{{ $d.Normal }}"
          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | sh
          . "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/pyenv.sh")" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install python {{ .GetConfig "pythonVersion" }}{{ $d.Normal }}"
          pyenv install {{ .GetConfig "pythonVersion" }}
          pyenv global {{ .GetConfig "pythonVersion" }}
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" python)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Python was already installed{{ $d.Normal }}"
        else
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install python {{ .GetConfig "pythonVersion" }}{{ $d.Normal }}"
          pyenv install {{ .GetConfig "pythonVersion" }}
          pyenv global {{ .GetConfig "pythonVersion" }}
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" pipenv)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Pipenv was already installed{{ $d.Normal }}"
        else
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install pipenv{{ $d.Normal }}"
          pip install pipenv
          if [ -d "${HOME}/.pipenv/shims" ]
          then
            chmod 755 "${HOME}/.pipenv/shims"
          fi
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"


  setupNvm:
    icon: üî®
    description: |
      Install NVM for Node.js development.
      USAGE:
        zaruba please setupNvm
    extend: core.runCoreScript
    timeout: 1h
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install nvm, typescript, and node-gyp in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" nvm)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}NVM was already installed{{ $d.Normal }}"
        else
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install NVM{{ $d.Normal }}"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.. | sh
          . "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/nvm.sh")" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          nvm install node
          . "${BOOTSTRAP_SCRIPT}"
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" node-gyp)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Node-gyp was already installed{{ $d.Normal }}"
        else 
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install node-gyp{{ $d.Normal }}"
          npm install -g node-gyp
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" tsc)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Typescript was already installed{{ $d.Normal }}"
        else
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install typescript{{ $d.Normal }}"
          npm install -g typescript
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
       

  setupSdkman:
    icon: üî®
    description: |
      Install SDKMan for Java/Scala development.
      USAGE:
        zaruba please setupSdkman
    extend: core.runCoreScript
    timeout: 1h
    config:
      cmd: /bin/bash
      javaVersion: '{{ if .GetKwarg "javaVersion" }}{{ .GetKwarg "javaVersion" }}{{ else }}8.0.275.open-adpt{{ end }}'
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install sdkman, java, and scala in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" sdk)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Sdkman was already installed{{ $d.Normal }}"
        else
          echo "‚òï {{ $d.Bold }}{{ $d.Yellow }}Install sdkman{{ $d.Normal }}"
          curl -s "https://get.sdkman.io" | bash
          . "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/sdkman.sh")" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          echo "‚òï{{ $d.Bold }}{{ $d.Yellow }}Install java {{ .GetConfig "javaVersion" }}{{ $d.Normal }}"
          sdk install java {{ .GetConfig "javaVersion" }}
          echo "‚òï {{ $d.Bold }}{{ $d.Yellow }}Install scala{{ $d.Normal }}"
          sdk install scala
        fi 
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" java)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Java was already installed{{ $d.Normal }}"
        else
          echo "‚òï{{ $d.Bold }}{{ $d.Yellow }}Install java {{ .GetConfig "javaVersion" }}{{ $d.Normal }}"
          sdk install java {{ .GetConfig "javaVersion" }}
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" scala)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Scala was already installed{{ $d.Normal }}"
        else
          echo "‚òï{{ $d.Bold }}{{ $d.Yellow }}Install scala{{ $d.Normal }}"
          sdk install scala
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
  
  
  setupSpark:
    icon: üî®
    description: |
      Install Spark and hadoop.
      USAGE:
        zaruba please setupSpark
    extend: core.runCoreScript
    timeout: 1h
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install spark and hadoop in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" spark-shell)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Spark was already installed{{ $d.Normal }}"
        else
          echo "‚òï {{ $d.Bold }}{{ $d.Yellow }}Install spark and hadoop{{ $d.Normal }}"
          wget https://apachemirror.sg.wuchna.com/spark/spark-3.0.1/spark-3.0.1-bin-hadoop2.7.tgz
          mkdir -p "${HOME}/.spark"
          tar -xvzf spark-3.0.1-bin-hadoop2.7.tgz -C "${HOME}/.spark"
          . "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/spark.sh")" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
  
  
  setupKubeClient:
    icon: üî®
    description: |
      Install kubectl and helm.
      USAGE:
        zaruba please setupSpark
    extend: core.runCoreScript
    timeout: 1h
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install Kubectl and helm in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" kubectl)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Kubectl was already installed{{ $d.Normal }}"
        else
          echo "üé° {{ $d.Bold }}{{ $d.Yellow }}Install Kubectl{{ $d.Normal }}"
          wget "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod 755 kubectl
          mkdir -p "${HOME}/.local/bin"
          mv kubectl "${HOME}/.local/bin"
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" helm)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Helm was already installed{{ $d.Normal }}"
        else
          echo "üé° {{ $d.Bold }}{{ $d.Yellow }}Install helm{{ $d.Normal }}"
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          export HELM_INSTALL_DIR="${HOME}/.local/bin"
          ./get_helm.sh --no-sudo
          rm ./get_helm.sh
        fi
        if [ ! -z "$(. "${UTIL}/is_command_exist.sh" helmfile)" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Helmfile was already installed{{ $d.Normal }}"
        else
          echo "üé° {{ $d.Bold }}{{ $d.Yellow }}Install helmfile{{ $d.Normal }}"
          wget https://github.com/roboll/helmfile/releases/download/v0.138.2/helmfile_linux_amd64
          chmod 755 ./helmfile_linux_amd64
          mkdir -p "${HOME}/.local/bin"
          mv ./helmfile_linux_amd64 "${HOME}/.local/bin/helmfile"
        fi