inputs:

  setup.initPyUtil:
    default: true
    description: |
      Whether you want to setup python utility for zaruba or not.
      Possible values are: "true", "yes", "on", "false", "no", or "off".
      If you are sure that zaruba's python utility has been set up, you can speed up the process a bit by answering "false", "no" or "off".


  setup.homeDir:
    description: |
      Your home directory. Leave it blank if you want the task to figure out your home directory by itself.

  
  setup.userPassword:
    description: |
      Your user password. Leave blank if you already run the task with "sudo"
    secret: true

  
  setup.allowRoot:
    default: false
    description: Allow to run task as root.


  setup.nodeVersion:
    default: node
    description: |
      Node version to be installed along with nvm.
      If you already have nvm installed, please use nvm instead (i.e: nvm install <version>).

  
  setup.pythonVersion:
    default: 3.8.6
    description: |
      Python version to be installed along with pyenv.
      If you already have pyenv installed, please use pyenv instead (i.e: pyenv install <version>).

  
  setup.javaVersion:
    default: 8.0.275.open-adpt
    description: |
      Java version to be installed along with sdkman.
      If you already have sdkman installed, please use sdkman instead (i.e: sdk install java <version>).

    
  setup.sparkVersion:
    default: 3.1.1
    description: Spark version to be installed.


  setup.hadoopVersion:
    default: 2.7
    description: Hadoop version to be installed along with spark.

  
  setup.sparkDownloadUrl:
    default: https://downloads.apache.org/spark/spark-3.1.1/spark-3.1.1-bin-hadoop2.7.tgz
    description: URL to download spark

  
  setup.helmfileVersion:
    default: v0.138.2
    description: Helmfile version to be installed.


  setup.injectBootstrap:
    default: true
    description: |
      Either you want to inject zaruba's bootstrap to .zshrc/bashrc or not.
      Possible values are: "true", "yes", "on", "false", "no", or "off".


tasks:

  core.checkBootstrap:
    icon: üêö
    private: true
    extend: core.runScript
    config:
      start: |
        {{ $d := .Decoration -}}
        CURRENT_USER="$(. "${ZARUBA_HOME}/scripts/util/sh/get_current_user.sh")"
        BOOTSTRAP_SCRIPT="${ZARUBA_HOME}/scripts/bootstrap.sh"
        if [ ! -f "${BOOTSTRAP_SCRIPT}" ]
        then
          touch "${BOOTSTRAP_SCRIPT}"
          chmod 755 "${BOOTSTRAP_SCRIPT}"
          chown "${CURRENT_USER}" "${BOOTSTRAP_SCRIPT}"
        fi
        . "${BOOTSTRAP_SCRIPT}"
        if echo "$PATH" | grep -Fqe ".local/bin"
        then
          echo "{{ $d.Faint }}${HOME}/.local/bin is already in the PATH{{ $d.Normal }}"
        else
          TEMPLATE_CONTENT="$(cat "${ZARUBA_HOME}/scripts/templates/shell/include_local_bin.sh")"
          . "${ZARUBA_HOME}/scripts/util/sh/append_if_exist.sh" "${TEMPLATE_CONTENT}" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
        fi
        {{ if .IsTrue (.GetValue "setup.injectBootstrap") }}
        . "${ZARUBA_HOME}/scripts/util/sh/inject_bootstrap.sh" "${HOME}/.bashrc"
        . "${ZARUBA_HOME}/scripts/util/sh/inject_bootstrap.sh" "${HOME}/.zshrc"
        {{ end }}
 

  core.setupPyUtil:
    icon: üêç
    description: |
      Setup python helper utitities.
      USAGE:
      ```yaml
      runTask:
        extend: core.runCoreScript
        dependencies: 
        - core.setupPyUtil
        config:
          start: |
            . ${invoke_core_py} "show_log"
      ```
    private: true
    extend: core.runCoreScript
    saveLog: false
    config:
      start: |
        {{ if eq (.GetValue "setup.initPyUtil") "true" }}
        {{ $d := .Decoration -}}
        if [ -z "$(pipenv --version)" ]
        then
            echo "{{ $d.Bold }}{{ $d.Red }}Pipenv is not installed{{ $d.Normal }}"
            echo "Please perform:"
            echo "* 'zaruba please setupPyenv' (recommended) or"
            echo "* 'pip install pipenv' (if you don't want to install pyenv)"
            exit 1
        fi
        export PIPENV_IGNORE_VIRTUALENVS=1
        export PIPENV_DONT_LOAD_ENV=1
        export PIPENV_PIPFILE="${ZARUBA_HOME}/scripts/util/python/Pipfile"
        pipenv sync
        {{ end }}
  

  setupUbuntu:
    icon: üî®
    description: |
      Install essential packages for ubuntu/mint/debian. Root privilege is required
      USAGE:
        sudo -E zaruba please setupUbuntu
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.userPassword
    - setup.allowRoot
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install essential packages for ubuntu/mint/debian. Root privilege is required."
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        if [ $(whoami) = "root" ]
        then
          {{ if .IsFalse (.GetValue "setup.allowRoot") }}
            if echo "${1}" | grep -q "/root$"
            then
                echo "{{ $d.Bold}}{{ $d.Red }}Your home directory seems to be '/root'. If this is intentional please set 'setup.allowRoot' to 'true'. Otherwise re-run this task with 'sudo -E'{{ $d.Normal}}"
                exit 1
            fi
          {{ end }}
          . "${ZARUBA_HOME}/scripts/util/sh/setup_ubuntu.sh"
        else
          {{ if .GetValue "setup.userPassword" }}
            echo "${ZARUBA_INPUT_SETUP_USERPASSWORD}" | sudo -E -S "${ZARUBA_HOME}/scripts/util/sh/setup_ubuntu.sh"
          {{ else }}
            echo "{{ $d.Bold}}{{ $d.Red }}You need to set 'setup.userPassword' or run this task with 'sudo -E'{{ $d.Normal}}"
            exit 1
          {{ end }}
        fi


  setupTmux:
    icon: üî®
    description: |
      Setup tmux.
      USAGE:
        zaruba please setupTmux
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.homeDir
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will setup tmux. Tmux should be installed first"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetValue "setup.homeDir" }}HOME="{{ .GetValue "setup.homeDir" }}"{{ end }}
        if [ "$(invoke_core_sh is_command_exist tmux -V)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Tmux was already installed{{ $d.Normal }}"
        else
          echo "{{ $d.Bold }}{{ $d.Red }}Tmux was not installed. Please install tmux first{{ $d.Normal }}"
          exit 1
        fi
        if [ -d "${HOME}/.tmux/plugins/tpm" ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Tmux plugin was already installed{{ $d.Normal }}"
        else
          git clone https://github.com/tmux-plugins/tpm "${HOME}/.tmux/plugins/tpm"
        fi
        if [ -f "${HOME}/.tmux.conf" ]
        then
          mv "${HOME}/.tmux.conf" "${HOME}/.tmux.bak.conf"
        fi
        cp "${ZARUBA_HOME}/scripts/templates/tmux.conf" "${HOME}/.tmux.conf"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"


  setupPyenv:
    icon: üî®
    description: |
      Install Pyenv and pipenv. Useful if you are going to start with Python.
      Some zaruba tasks required python and pipenv to be installed, so you likely going to run this anyway.
      USAGE:
        zaruba please setupPyenv
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.homeDir
    - setup.pythonVersion
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install pyenv and pipenv in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetValue "setup.homeDir" }}HOME="{{ .GetValue "setup.homeDir" }}"{{ end }}
        if [ "$(invoke_core_sh is_command_exist pyenv --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Pyenv was already installed{{ $d.Normal }}"
        else
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install pyenv{{ $d.Normal }}"
          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | sh
          TEMPLATE_CONTENT="$(cat "${ZARUBA_HOME}/scripts/templates/shell/pyenv.sh")"
          invoke_core_sh append_if_exist "${TEMPLATE_CONTENT}" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install python {{ .GetValue "setup.pythonVersion" }}{{ $d.Normal }}"
          pyenv install {{ .GetValue "setup.pythonVersion" }}
          pyenv global {{ .GetValue "setup.pythonVersion" }}
        fi
        if [ "$(invoke_core_sh is_command_exist python --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Python was already installed{{ $d.Normal }}"
        else
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install python {{ .GetValue "setup.pythonVersion" }}{{ $d.Normal }}"
          pyenv install {{ .GetValue "setup.pythonVersion" }}
          pyenv global {{ .GetValue "setup.pythonVersion" }}
        fi
        if [ "$(invoke_core_sh is_command_exist pipenv --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Pipenv was already installed{{ $d.Normal }}"
        else
          echo "üêç {{ $d.Bold }}{{ $d.Yellow }}Install pipenv{{ $d.Normal }}"
          pip install pipenv
          if [ -d "${HOME}/.pipenv/shims" ]
          then
            chmod 755 "${HOME}/.pipenv/shims"
          fi
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"


  setupNvm:
    icon: üî®
    description: |
      Install NVM for Node.js development.
      USAGE:
        zaruba please setupNvm
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.homeDir
    - setup.nodeVersion
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install nvm, typescript, and node-gyp in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetValue "setup.homeDir" }}HOME="{{ .GetValue "setup.homeDir" }}"{{ end }}
        if [ "$(invoke_core_sh is_command_exist nvm --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}NVM was already installed{{ $d.Normal }}"
        else
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install NVM{{ $d.Normal }}"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | sh
          TEMPLATE_CONTENT="$(cat "${ZARUBA_HOME}/scripts/templates/shell/nvm.sh")"
          invoke_core_sh append_if_exist "${TEMPLATE_CONTENT}" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          nvm install "{{ .GetValue "setup.nodeVersion" }}"
          . "${BOOTSTRAP_SCRIPT}"
        fi
        if [ "$(invoke_core_sh is_command_exist node-gyp --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Node-gyp was already installed{{ $d.Normal }}"
        else 
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install node-gyp{{ $d.Normal }}"
          npm install -g node-gyp
        fi
        if [ "$(invoke_core_sh is_command_exist tsc --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Typescript was already installed{{ $d.Normal }}"
        else
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install typescript{{ $d.Normal }}"
          npm install -g typescript
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
       

  setupSdkman:
    icon: üî®
    description: |
      Install SDKMan for Java/Scala development.
      USAGE:
        zaruba please setupSdkman
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.homeDir
    - setup.javaVersion
    config:
      cmd: /bin/bash
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install sdkman, java, and scala in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetValue "setup.homeDir" }}HOME="{{ .GetValue "setup.homeDir" }}"{{ end }}
        if [ "$(invoke_core_sh is_command_exist sdk version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Sdkman was already installed{{ $d.Normal }}"
        else
          echo "‚òï {{ $d.Bold }}{{ $d.Yellow }}Install sdkman{{ $d.Normal }}"
          curl -s "https://get.sdkman.io" | bash
          TEMPLATE_CONTENT="$(cat "${ZARUBA_HOME}/scripts/templates/shell/sdkman.sh")"
          invoke_core_sh append_if_exist "${TEMPLATE_CONTENT}" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          echo "‚òï{{ $d.Bold }}{{ $d.Yellow }}Install java {{ .GetValue "setup.javaVersion" }}{{ $d.Normal }}"
          sdk install java {{ .GetValue "setup.javaVersion" }}
          echo "‚òï {{ $d.Bold }}{{ $d.Yellow }}Install scala{{ $d.Normal }}"
          sdk install scala
        fi 
        if [ "$(invoke_core_sh is_command_exist java -version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Java was already installed{{ $d.Normal }}"
        else
          echo "‚òï{{ $d.Bold }}{{ $d.Yellow }}Install java {{ .GetValue "setup.javaVersion" }}{{ $d.Normal }}"
          sdk install java {{ .GetValue "setup.javaVersion" }}
        fi
        if [ "$(invoke_core_sh is_command_exist scala -version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Scala was already installed{{ $d.Normal }}"
        else
          echo "‚òï{{ $d.Bold }}{{ $d.Yellow }}Install scala{{ $d.Normal }}"
          sdk install scala
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
  
  
  setupSpark:
    icon: üî®
    description: |
      Install Spark and hadoop.
      USAGE:
        zaruba please setupSpark
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.homeDir
    - setup.sparkDownloadUrl
    - setup.sparkVersion
    - setup.hadoopVersion
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install spark and hadoop in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetValue "setup.homeDir" }}HOME="{{ .GetValue "setup.homeDir" }}"{{ end }}
        if [ "$(invoke_core_sh is_command_exist spark-shell --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Spark was already installed{{ $d.Normal }}"
        else
          echo "‚òï {{ $d.Bold }}{{ $d.Yellow }}Install spark and hadoop{{ $d.Normal }}"
          wget -O spark.tgz "{{ .GetValue "setup.sparkDownloadUrl" }}"
          mkdir -p "${HOME}/.spark"
          tar -xvzf spark.tgz -C "${HOME}/.spark"
          TEMPLATE_CONTENT='{{ .ParseFile (.GetRelativePath "./templates/shell/spark.sh") }}'
          invoke_core_sh append_if_exist "${TEMPLATE_CONTENT}" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
          rm spark.tgz
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
  
  
  setupKubeClient:
    icon: üî®
    description: |
      Install kubectl and helm.
      USAGE:
        zaruba please setupKubeClient
    extend: core.runCoreScript
    timeout: 1h
    inputs:
    - setup.homeDir
    - setup.helmfileVersion
    config:
      beforeStart: |
        {{ $d := .Decoration -}}
        echo "This command will install Kubectl and helm in your home directory. Root privilege is not required"
        echo "If this command doesn't run successfully, please open an issue on https://github.com/state-alcemists/zaruba."
        echo "Please also specify your OS version."
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetValue "setup.homeDir" }}HOME="{{ .GetValue "setup.homeDir" }}"{{ end }}
        if [ "$(invoke_core_sh is_command_exist kubectl version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Kubectl was already installed{{ $d.Normal }}"
        else
          echo "üé° {{ $d.Bold }}{{ $d.Yellow }}Install Kubectl{{ $d.Normal }}"
          wget "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod 755 kubectl
          mkdir -p "${HOME}/.local/bin"
          mv kubectl "${HOME}/.local/bin"
        fi
        if [ "$(invoke_core_sh is_command_exist helm version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Helm was already installed{{ $d.Normal }}"
        else
          echo "üé° {{ $d.Bold }}{{ $d.Yellow }}Install helm{{ $d.Normal }}"
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          export HELM_INSTALL_DIR="${HOME}/.local/bin"
          ./get_helm.sh --no-sudo
          rm ./get_helm.sh
        fi
        if [ "$(invoke_core_sh is_command_exist helmfile --version)" = 1 ]
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Helmfile was already installed{{ $d.Normal }}"
        else
          echo "üé° {{ $d.Bold }}{{ $d.Yellow }}Install helmfile{{ $d.Normal }}"
          wget https://github.com/roboll/helmfile/releases/download/{{ .GetValue "setup.helmfileVersion" }}/helmfile_linux_amd64
          chmod 755 ./helmfile_linux_amd64
          mkdir -p "${HOME}/.local/bin"
          mv ./helmfile_linux_amd64 "${HOME}/.local/bin/helmfile"
        fi