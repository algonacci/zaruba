tasks:

  core.setupPyUtil:
    icon: üêç
    description: |
      Setup python helper utitities.
      USAGE:
      ```yaml
      runTask:
        extend: core.runCoreScript
        dependencies: 
        - core.setupPyUtil
        config:
          start: |
            sh ${PY_UTIL} "show_log"
      ```
    private: true
    extend: core.runCoreScript
    config:
      start: |
        sh ${UTIL}/py_install.sh
  

  setupUbuntu:
    icon: üî®
    description: |
      Setup ubuntu machine (or ubuntu WSL)
      USAGE:
        sudo -E zaruba please setupUbuntu
        sudo -E zaruba please user=<user> home=<home>
    extend: core.runCoreScript
    dependencies:
    - core.ubuntu.setup
    - core.ubuntu.setupDocker
    - core.ubuntu.setupNvm
    - core.ubuntu.setupPyenv
    config:
      start: |
        {{ $d := .Decoration -}}
        CURRENT_USER="{{ if .GetKwarg "user" }}{{ .GetKwarg "user" }}{{ else }}$(sh "${UTIL}/get_current_user.sh"){{ end }}"
        if [ -d "${HOME}/.local" ]
        then
          chown -R "${CURRENT_USER}" "${HOME}/.local"
        fi
        if [ -d "${HOME}/.config" ]
        then
          chown -R "${CURRENT_USER}" "${HOME}/.config"
        fi
        if [ -d "${HOME}/.cache" ]
        then
          chown -R "${CURRENT_USER}" "${HOME}/.cache"
        fi
        if echo "$PATH" | grep -Fqe ".local/bin"
        then
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}~/.local/bin is already in the PATH{{ $d.Normal }}"
        else
          sh "${UTIL}/append_if_exist.sh" 'export PATH=$PATH:$HOME/.local/bin' "${HOME}/.bashrc"
          sh "${UTIL}/append_if_exist.sh" 'export PATH=$PATH:$HOME/.local/bin' "${HOME}/.zshrc"
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Complete !!!{{ $d.Normal }}"
        echo "TIPS: Restart your terminal. If you are using WSL, please enable WSL2 Backend for best experience (https://docs.docker.com/docker-for-windows/wsl/)"
    

  core.ubuntu.setup:
    icon: üî®
    extend: core.runCoreScript
    private: true
    timeout: 1h
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        sh ${UTIL}/check_setup_ubuntu.sh "${HOME}"
        echo "üì° {{ $d.Bold }}{{ $d.Yellow }}Update repository{{ $d.Normal }}"
        apt-get update
        apt-get upgrade -y
        echo "üîΩ {{ $d.Bold }}{{ $d.Yellow }}Install packages{{ $d.Normal }}"
        apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git ncat make tmux zsh neovim cowsay figlet lolcat


  core.ubuntu.setupDocker:
    icon: üî®
    extend: core.runCoreScript
    private: true
    timeout: 1h
    dependencies:
    - core.ubuntu.setup
    config:
      start: |
        {{ $d := .Decoration -}}
        if [ -z "$(docker -v)" ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Install docker{{ $d.Normal }}"
          apt-get install -y docker.io
        else
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Docker was already installed{{ $d.Normal }}"
        fi


  core.ubuntu.setupPyenv:
    icon: üî®
    extend: core.runCoreScript
    private: true
    timeout: 1h
    dependencies:
    - core.ubuntu.setup
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        CURRENT_USER="{{ if .GetKwarg "user" }}{{ .GetKwarg "user" }}{{ else }}$(sh "${UTIL}/get_current_user.sh"){{ end }}"
        if [ ! -d "${HOME}/.pyenv" ]
        then
          curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | sh
          sh "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/pyenv.sh")" "${HOME}/.bashrc"
          sh "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/pyenv.sh")" "${HOME}/.zshrc"
          "${ZARUBA_HOME}/scripts/templates/shell/pyenv.sh"
          export PATH="${HOME}/.pyenv/bin:$PATH"
          chown -R "${CURRENT_USER}" "${HOME}/.pyenv"
          pyenv install 3.8.6
          pyenv global 3.8.6
          chmod 755 "${HOME}/.pyenv/shims"
        else
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Pyenv was already installed{{ $d.Normal }}"
        fi
        export PATH="${HOME}/.pyenv/bin:${PATH}:${HOME}/.local/bin"
        if [ -z "$(pipenv --version)" ]
        then
          "${HOME}/.pyenv/versions/3.8.6/bin/python3.8" -m pip install pipenv
        else
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Pipenv was already installed{{ $d.Normal }}"
        fi


  core.ubuntu.setupNvm:
    icon: üî®
    extend: core.runCoreScript
    private: true
    timeout: 1h
    dependencies:
    - core.ubuntu.setup
    config:
      start: |
        {{ $d := .Decoration -}}
        {{ if .GetKwarg "home" }}HOME="{{ .GetKwarg "home" }}"{{ end }}
        CURRENT_USER="{{ if .GetKwarg "user" }}{{ .GetKwarg "user" }}{{ else }}$(sh "${UTIL}/get_current_user.sh"){{ end }}"
        if [ ! -d "${HOME}/.nvm" ]
        then
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install NVM{{ $d.Normal }}"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.0/install.sh | sh
          NVM_DIR="$HOME/.nvm"
          \. "$NVM_DIR/nvm.sh"
          nvm install node
          chown -R "${CURRENT_USER}" "$NVM_DIR"
          sh "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/nvm.sh")" "${HOME}/.bashrc"
          sh "${UTIL}/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/nvm.sh")" "${HOME}/.zshrc"
        else
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}NVM was already installed{{ $d.Normal }}"
        fi
        NODE_VERSION=$(ls "${HOME}/.nvm/versions/node")
        export PATH="${PATH}:${HOME}/.nvm/versions/node/${NODE_VERSION}/bin"
        "${ZARUBA_HOME}/scripts/templates/shell/nvm.sh"
        if [ -z "$(node-gyp -v)" ]
        then
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install node-gyp{{ $d.Normal }}"
          npm install -g node-gyp
        else
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Node-gyp was already installed{{ $d.Normal }}"
        fi
        if [ -z "$(tsc -v)" ]
        then
          echo "üê∏ {{ $d.Bold }}{{ $d.Yellow }}Install typescript{{ $d.Normal }}"
          npm install -g typescript
        else
          echo "üëè {{ $d.Bold }}{{ $d.Yellow }}Typescript was already installed{{ $d.Normal }}"
        fi
        