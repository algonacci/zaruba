tasks:

  core.makeDockerTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    - core.isProject
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/default'
      imageName: '{{ .GetValue "generatorDockerImageName" }}'
      containerName: '{{ .GetValue "generatorDockerContainerName" }}'
      serviceName: '{{ .GetValue "generatorServiceName" }}'
      serviceEnvs: '{{ .GetValue "generatorServiceEnvs" }}'
      servicePorts: '{{ .GetValue "generatorServicePorts" }}'
      dependencies: '{{ .GetValue "generatorTaskDependencies" }}'
      start.declareVariable: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .EscapeShellArg (.GetConfig "templateLocation") }}
        DESTINATION="./zaruba-tasks"
        IMAGE_NAME={{ .EscapeShellArg (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .EscapeShellArg (.GetConfig "containerName") }}
        CONTAINER_NAME=$({{ .Zaruba }} getValue "${CONTAINER_NAME}" \
          "$({{ .Zaruba }} strToCamel "${IMAGE_NAME}")" \
        )
        SERVICE_NAME={{ .EscapeShellArg (.GetConfig "serviceName") }}
        SERVICE_NAME=$({{ .Zaruba }} getValue "${SERVICE_NAME}" \
          "${CONTAINER_NAME}" \
        )
        PASCAL_SERVICE_NAME="$({{ .Zaruba }} strToPascal "${SERVICE_NAME}")"
        SERVICE_ENVS={{ .EscapeShellArg (.GetConfig "serviceEnvs") }}
        if [ "$({{ .Zaruba}} isValidMap "$SERVICE_ENVS")" -eq 0 ]
        then
          echo "{{ $d.Red }}{{ $d.Bold }}${SERVICE_ENVS} is not a valid map{{ $d.Normal }}"
          exit 1
        fi
        SERVICE_PORTS={{ .EscapeShellArg (.GetConfig "servicePorts") }}
        if [ "$({{ .Zaruba}} isValidList "$SERVICE_PORTS")" -eq 0 ]
        then
          echo "{{ $d.Red }}{{ $d.Bold }}${SERVICE_PORTS} is not a valid port{{ $d.Normal }}"
          exit 1
        fi
        DEPENDENCIES={{ .EscapeShellArg (.GetConfig "dependencies") }}
        if [ "$({{ .Zaruba}} isValidList "$DEPENDENCIES")" -eq 0 ]
        then
          echo "{{ $d.Red }}{{ $d.Bold }}${SERVICE_PORTS} is not a valid port{{ $d.Normal }}"
          exit 1
        fi
        TASK_FILE_NAME="${DESTINATION}/${SERVICE_NAME}.zaruba.yaml"
        if [ -f "${TASK_FILE_NAME}" ]
        then
          echo "{{ $d.Red }}{{ $d.Bold }}file already exist: ${TASK_FILE_NAME}{{ $d.Normal }}"
          exit 1
        fi
      start.createReplacementMap: |
        REPLACEMENT_MAP=$({{ .Zaruba }} mapSet "{}" \
          "zarubaImageName" "${IMAGE_NAME}" \
          "zarubaContainerName" "${CONTAINER_NAME}" \
          "zarubaServiceName" "${SERVICE_NAME}" \
          "ZarubaServiceName" "${PASCAL_SERVICE_NAME}" \
        )
      start.linkToProject: |
        {{ .Zaruba }} includeFileToProject "./main.zaruba.yaml" "${TASK_FILE_NAME}"
        {{ .Zaruba }} syncProjectEnvFiles "./main.zaruba.yaml"
        if [ "$({{ .Zaruba }} isTaskExist "./main.zaruba.yaml" "pull${PASCAL_SERVICE_NAME}")" -eq 1 ]
        then
          {{ .Zaruba }} createTaskIfNotExist "./main.zaruba.yaml" "pullImage"
          {{ .Zaruba }} addTaskDependency "./main.zaruba.yaml" "pull" "[\"run${PASCAL_SERVICE_NAME}\"]"
        fi
        if [ "$({{ .Zaruba }} isTaskExist "./main.zaruba.yaml" "run${PASCAL_SERVICE_NAME}")" -eq 1 ]
        then
          {{ .Zaruba }} createTaskIfNotExist "./main.zaruba.yaml" "run"
          {{ .Zaruba }} addTaskDependency "./main.zaruba.yaml" "run" "[\"run${PASCAL_SERVICE_NAME}\"]"
          {{ .Zaruba }} createTaskIfNotExist "./main.zaruba.yaml" "runContainer"
          {{ .Zaruba }} addTaskDependency "./main.zaruba.yaml" "runContainer" "[\"run${PASCAL_SERVICE_NAME}\"]"
        fi
        if [ "$({{ .Zaruba }} isTaskExist "./main.zaruba.yaml" "stop${PASCAL_SERVICE_NAME}Container")" -eq 1 ]
        then
          {{ .Zaruba }} createTaskIfNotExist "./main.zaruba.yaml" "stopContainer"
          {{ .Zaruba }} addTaskDependency "./main.zaruba.yaml" "stopContainer" "[\"stop${PASCAL_SERVICE_NAME}Container\"]"
        fi
        if [ "$({{ .Zaruba }} isTaskExist "./main.zaruba.yaml" "remove${PASCAL_SERVICE_NAME}Container")" -eq 1 ]
        then
          {{ .Zaruba }} createTaskIfNotExist "./main.zaruba.yaml" "removeContainer"
          {{ .Zaruba }} addTaskDependency "./main.zaruba.yaml" "removeContainer" "[\"remove${PASCAL_SERVICE_NAME}Container\"]"
        fi
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "start.declareVariable" }}
        {{ .GetConfig "start.createReplacementMap" }}
        {{ .Zaruba }} generate "${TEMPLATE_LOCATION}" "${DESTINATION}" "${REPLACEMENT_MAP}"
        {{ .GetConfig "start.linkToProject" }}
        {{ .Zaruba }} addTaskDependency ./main.zaruba.yaml "run${PASCAL_SERVICE_NAME}" "${DEPENDENCIES}"
        {{ .Zaruba }} setTaskEnv ./main.zaruba.yaml "run${PASCAL_SERVICE_NAME}" "${SERVICE_ENVS}"
        PORT_VALUE="$({{ .Zaruba }} join "${SERVICE_PORTS}" )"
        PORT_CONFIG="$({{ .Zaruba }} mapSet "{}" "ports" "$PORT_VALUE" )"
        {{ .Zaruba }} setTaskConfig ./main.zaruba.yaml "run${PASCAL_SERVICE_NAME}" "${PORT_CONFIG}"
        echo ðŸŽ‰ðŸŽ‰ðŸŽ‰
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"

