tasks:

  core.makeDockerTask:
    extend: core.runCoreScript
    private: true
    dependencies:
      - core.showAdv
      - core.isProject
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/templates/task/docker/default'
      imageName: '{{ .GetValue "dockerImageName" }}'
      containerName: '{{ .GetValue "dockerContainerName" }}'
      serviceName: '{{ .GetValue "serviceName" }}'
      servicePorts: '{{ .GetValue "servicePorts" }}'
      serviceEnvs: '{{ .GetValue "serviceEnvs" }}'
      dependencies: '{{ .GetValue "taskDependencies" }}'
      registerRunner: true
      replacementMap: '{}'
      _generatorScriptLocation: "${ZARUBA_HOME}/bash/generateDockerTask.sh"
      _generatorFunctionName: "generateDockerTask"
      _setup: |
        TEMPLATE_LOCATION={{ .EscapeShellArg (.GetConfig "templateLocation") }}
        IMAGE_NAME={{ .EscapeShellArg (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .EscapeShellArg (.GetConfig "containerName") }}
        SERVICE_NAME={{ .EscapeShellArg (.GetConfig "serviceName") }}
        SERVICE_PORTS={{ .EscapeShellArg (.GetConfig "servicePorts") }}
        SERVICE_ENVS={{ .EscapeShellArg (.GetConfig "serviceEnvs") }}
        DEPENDENCIES={{ .EscapeShellArg (.GetConfig "dependencies") }}
        REPLACEMENT_MAP={{ .EscapeShellArg (.GetConfig "replacementMap") }}
      _start: |
        {{- $d := .Decoration -}}
        . "{{ .GetConfig "_generatorScriptLocation" }}"
        {{ .GetConfig "_generatorFunctionName" }} \
          "${TEMPLATE_LOCATION}" \
          "${IMAGE_NAME}" \
          "${CONTAINER_NAME}" \
          "${SERVICE_NAME}" \
          "${SERVICE_PORTS}" \
          "${SERVICE_ENVS}" \
          "${DEPENDENCIES}" \
          "${REPLACEMENT_MAP}" \
          "{{ if .IsFalse (.GetConfig "registerRunner") }}0{{ else }}1{{ end }}"
        echo ðŸŽ‰ðŸŽ‰ðŸŽ‰
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"
      start: ''

