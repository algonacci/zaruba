tasks:

  core.startDockerContainer:
    icon: üê≥
    description: |
      Start docker container and check it's readiness.
      If container is already started, it's stdout/stderr will be shown.
      If container is exist but not started, it will be started.
      If container is not exist, it will be created and started.
      Common config:
        setup          : Script to be executed before start service or check service readiness.
        beforeStart    : Script to be executed before start service.
        afterStart     : Script to be executed after start service.
        beforeCheck    : Script to be executed before check service readiness.
        afterCheck     : Script to be executed before check service readiness.
        finish         : Script to be executed after start service or check service readiness.
        useImagePrefix : Whether image prefix should be used or not
        imagePrefix    : Image prefix
        imageName      : Image name
        imageTag       : Image tag
        containerName  : Name of the container
        dockerEnv      : Docker env to be used when useImagePrefix is true,
                         but imagePrefix is not provided
        ports          : Port to be checked to confirm service readiness, 
                         separated by new line.
        volumes        : Host-container volume mappings,
                         separated by new line.
        rebuild        : Should container be rebuild (This will not rebuild the image)
        command        : Command to be used (Single Line).
                         Leave blank to use container's CMD.
                         The command will be executed from inside the container.
        checkCommand   : Command to check container readiness (Single Line).
                         The command will be executed from inside the container.
        localhost      : Localhost mapping (e.g: host.docker.container)
    private: true
    extend: core.startService
    dependencies:
      - updateProjectLinks
    inputs:
      - dockerEnv
    configRef: coreDocker
    config:
      containerName: ""
      imagePrefix: ""
      imageName: ""
      imageTag: ""
      useImagePrefix: true
      command: ""
      checkCommand: ""
      rebuild: false
      ports: ""
      volumes: ""
      localhost: localhost
      imagePrefixTrailingSlash: true
      hostDockerInternal: '{{ if .GetEnv "ZARUBA_HOST_DOCKER_INTERNAL" }}{{ .GetEnv "ZARUBA_HOST_DOCKER_INTERNAL" }}{{ else }}host.docker.internal{{ end }}'
      _setup.containerName: |
        {{ $d := .Decoration -}}
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        should_not_be_empty "${CONTAINER_NAME}" "{{ $d.Bold }}{{ $d.Red }}containerName is not provided{{ $d.Normal }}"
      _setup.imageName: |
        {{ $d := .Decoration -}}
        IMAGE_NAME="{{ .GetConfig "imageName" }}"
        should_not_be_empty "${IMAGE_NAME}" "{{ $d.Bold }}{{ $d.Red }}imageName is not provided{{ $d.Normal }}"
      _setup: |
        set -e
        {{ .Trim (.GetConfig "includeBootstrapScript") "\n" }} 
        {{ .Trim (.GetConfig "includeUtilScript") "\n" }} 
        {{ .Trim (.GetConfig "initDockerImagePrefixScript") "\n" }}
        {{ .Trim (.GetConfig "_setup.containerName") "\n" }} 
        {{ .Trim (.GetConfig "_setup.imageName") "\n" }} 
      _check.containerState: |
        {{ $d := .Decoration -}}
        until [ "$(inspect_docker "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        do
          sleep 1
        done
        while [ "$(inspect_docker "container" ".State.Health" "${CONTAINER_NAME}")" = false ]
        do
          sleep 1
        done
        echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' is running{{ $d.Normal }}"
      _check.checkCommand: |
        {{ $d := .Decoration -}}
        {{ if .GetConfig "checkCommand" -}}
        (echo $- | grep -Eq ^.*e.*$) && _OLD_STATE=-e || _OLD_STATE=+e
        set +e
        sleep 3
        docker exec "${CONTAINER_NAME}" {{ .GetConfig "checkCommand" }}
        until [ "$?" = "0" ]
        do
          sleep 3
          docker exec "${CONTAINER_NAME}" {{ .GetConfig "checkCommand" }}
        done
        set "${_OLD_STATE}"
        {{ end -}}
      _check.configPorts: |
        {{ $d := .Decoration -}}
        {{ $this := . -}}
        {{ range $index, $port := .Split (.Trim (.GetConfig "ports") "\n ") "\n" -}}
          {{ if ne $port "" -}}
            {{ $portParts := $this.Split ($this.Trim $port  " ") ":" -}}
            {{ $hostPort := index $portParts 0 -}}
            echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Waiting for host port: '{{ $hostPort }}'{{ $d.Normal }}"
            wait_port "localhost" {{ $hostPort }}
            echo "üîé {{ $d.Bold }}{{ $d.Yellow }}Host port '{{ $hostPort }}' is ready{{ $d.Normal }}"
          {{ end -}}
        {{ end -}}
      _check: |
        {{ $d := .Decoration -}}
        {{ .GetConfig "_check.containerState" }}
        {{ .GetConfig "_check.configPorts" }}
        {{ .GetConfig "_check.checkCommand" }}
        sleep 1
      _start.rebuildContainer: |
        stop_container "${CONTAINER_NAME}"
        remove_container "${CONTAINER_NAME}"
      _start.logContainer: |
        {{ $d := .Decoration -}}
        echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Logging '${CONTAINER_NAME}'{{ $d.Normal }}"
        docker logs --since 0m --follow "${CONTAINER_NAME}"
      _start.runContainer.env: |
        {{ $this := . -}}
        {{ if eq (.GetConfig "localhost") "localhost" -}}
          {{ range $key, $val := $this.GetEnvs -}}
            -e "{{ $key}}={{ $val }}" {{ "" -}}
          {{ end -}}
        {{ else -}}
          {{ range $key, $val := $this.GetEnvs -}}
            {{ $val = $this.ReplaceAll $val "localhost" ($this.GetConfig "localhost") -}}
            {{ $val = $this.ReplaceAll $val "127.0.0.1" ($this.GetConfig "localhost") -}}
            {{ $val = $this.ReplaceAll $val "0.0.0.0" ($this.GetConfig "localhost") -}}
            -e "{{ $key}}={{ $val }}" {{ "" -}}
          {{ end -}}
        {{ end -}}
      _start.runContainer.ports: |
        {{ $this := . -}}
        {{ range $index, $port := .Split (.Trim (.GetConfig "ports") "\n ") "\n" -}}
          {{ if ne $port "" -}}
            {{ $portParts := $this.Split ($this.Trim $port  " ") ":" -}}
            {{ if eq (len $portParts) 1 -}}
              -p {{ $port }}:{{ $port }} {{ "" -}}
            {{ else -}}
              {{ $hostPort := index $portParts 0 -}}
              {{ $containerPort := index $portParts 1 -}}
              -p {{ $hostPort }}:{{ $containerPort }} {{ "" -}}
            {{ end -}}
          {{ end -}}
        {{ end -}}
      _start.runContainer.volumes: |
        {{ $this := . -}}
        {{ range $index, $volume := .Split (.Trim (.GetConfig "volumes") "\n ") "\n" -}}
          {{ if ne $volume "" -}}
            {{ $volumeParts := $this.Split ($this.Trim $volume  " ") ":" -}}
            {{ if eq (len $volumeParts) 2 -}}
              {{ $absHostVolume := $this.GetRelativePath (index $volumeParts 0) -}}
              {{ $containerVolume := index $volumeParts 1 -}}
              -v "{{ $absHostVolume }}:{{ $containerVolume }}" {{ "" -}}
            {{ end -}}
          {{ end -}}
        {{ end -}}
      _start.runContainer: |
        {{ $d := .Decoration -}}
        {{ $imageTag := .GetConfig "imageTag" -}}
        {{ $this := . -}}
        docker run --name "${CONTAINER_NAME}" {{ "" -}}
        {{ .GetConfig "_start.runContainer.env" -}}
        {{ .GetConfig "_start.runContainer.ports" -}}
        {{ .GetConfig "_start.runContainer.volumes" -}}
        {{ if ne (.GetConfig "hostDockerInternal") "host.docker.internal" }}--add-host "{{ .GetConfig "hostDockerInternal" }}:host.docker.internal"{{ end }} {{ "" -}}
        -d "${DOCKER_IMAGE_PREFIX}${IMAGE_NAME}{{ if $imageTag }}:{{ $imageTag }}{{ end }}" {{ .GetConfig "command" }}
      _start: |
        {{ $d := .Decoration -}}
        {{ $rebuild := .GetConfig "rebuild" -}}
        {{ if .IsTrue $rebuild }}{{ .GetConfig "_start.rebuildContainer" }}{{ end }}
        if [ "$(inspect_docker "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Container '${CONTAINER_NAME}' was already started{{ $d.Normal }}"
          {{ .GetConfig "_start.logContainer" }}
        elif [ ! -z $(inspect_docker "container" ".Name" "${CONTAINER_NAME}") ]
        then
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Retrieve previous log of '${CONTAINER_NAME}'{{ $d.Normal }}"
          sleep 1
          docker logs --tail 20 "${CONTAINER_NAME}"
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          docker start "${CONTAINER_NAME}"
          {{ .GetConfig "_start.logContainer" }}
        else
          echo "üê≥ {{ $d.Bold }}{{ $d.Yellow }}Creating and starting container '${CONTAINER_NAME}'{{ $d.Normal }}"
          {{ .GetConfig "_start.runContainer" }}
          {{ .GetConfig "_start.logContainer" }}
        fi
      check: ""