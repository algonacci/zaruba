tasks:

  core.makeServiceTask:
    extend: core.runCoreScript
    private: true
    dependencies:
      - core.showAdv
      - core.isProject
    config:
      allowInexistServiceLocation: false
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/templates/task/service/default'
      serviceLocation: '{{ .GetValue "serviceLocation" }}'
      serviceName: '{{ .GetValue "serviceName" }}'
      imageName: '{{ .GetValue "serviceImageName" }}'
      containerName: '{{ .GetValue "serviceContainerName" }}'
      serviceStartCommand: '{{ .GetValue "startCommand" }}'
      serviceRunnerVersion: ''
      servicePorts: '{{ .GetValue "servicePorts" }}'
      serviceEnvs: '{{ .GetValue "serviceEnvs" }}'
      dependencies: '{{ .GetValue "taskDependencies" }}'
      registerRunner: true
      replacementMap: '{}'
      generatorScriptLocation: "${ZARUBA_HOME}/bash/generateServiceTask.sh"
      generatorFunctionName: "generateServiceTask"
      generatorFunctionArgs: |
        "${TEMPLATE_LOCATION}" \
        "${SERVICE_LOCATION}" \
        "${SERVICE_NAME}" \
        "${IMAGE_NAME}" \
        "${CONTAINER_NAME}" \
        "${SERVICE_START_COMMAND}" \
        "${SERVICE_RUNENR_VERSION}" \
        "${SERVICE_PORTS}" \
        "${SERVICE_ENVS}" \
        "${DEPENDENCIES}" \
        "${REPLACEMENT_MAP}" \
        "{{ if .IsFalse (.GetConfig "registerRunner") }}0{{ else }}1{{ end }}"
      _setup: |
        set -e
        {{ .Util.Str.Trim (.GetConfig "includeUtilScript") "\n" }}
        . "${ZARUBA_HOME}/bash/generatorUtil.sh"
        {{ if .IsTrue (.GetConfig "allowInexistServiceLocation") -}}
        mkdir -p "{{ .GetConfig "serviceLocation" }}"
        {{ end -}}
        TEMPLATE_LOCATION={{ .Util.Str.EscapeShellArg (.GetConfig "templateLocation") }}
        SERVICE_LOCATION={{ .Util.Str.EscapeShellArg (.GetConfig "serviceLocation") }}
        SERVICE_NAME={{ .Util.Str.EscapeShellArg (.GetConfig "serviceName") }}
        IMAGE_NAME={{ .Util.Str.EscapeShellArg (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .Util.Str.EscapeShellArg (.GetConfig "containerName") }}
        SERVICE_START_COMMAND={{ .Util.Str.EscapeShellArg (.GetConfig "serviceStartCommand") }}
        SERVICE_RUNNER_VERSION={{ .Util.Str.EscapeShellArg (.GetConfig "serviceRunnerVersion") }}
        SERVICE_PORTS={{ .Util.Str.EscapeShellArg (.GetConfig "servicePorts") }}
        SERVICE_ENVS={{ .Util.Str.EscapeShellArg (.GetConfig "serviceEnvs") }}
        DEPENDENCIES={{ .Util.Str.EscapeShellArg (.GetConfig "dependencies") }}
        REPLACEMENT_MAP={{ .Util.Str.EscapeShellArg (.GetConfig "replacementMap") }}
        # ensure SERVICE_NAME is not empty
        SERVICE_NAME="$(getServiceName "${SERVICE_NAME}" "${SERVICE_LOCATION}")"
        # ensure IMAGE_NAME is not empty
        IMAGE_NAME="$(getServiceImageName "${IMAGE_NAME}" "${SERVICE_NAME}")"
        # ensure CONTAINER_NAME is not empty
        CONTAINER_NAME="$(getServiceContainerName "${CONTAINER_NAME}" "${SERVICE_NAME}")"
      _start: |
        __PWD="$(pwd)"
        . "{{ .GetConfig "generatorScriptLocation" }}"
        {{ .GetConfig "generatorFunctionName" }} \
        {{ .GetConfig "generatorFunctionArgs" }}
        cd "${__PWD}"
      _finish: |
        {{- $d := .Decoration -}}
        "{{ .ZarubaBin }}" project syncEnv "./main.zaruba.yaml"
        echo ðŸŽ‰ðŸŽ‰ðŸŽ‰
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task for ${SERVICE_NAME} has been created{{ $d.Normal }}"
      start: ''
