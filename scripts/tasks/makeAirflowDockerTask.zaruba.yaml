tasks: 

  makeAirflowDockerTask:
    extend: core.makeDockerTask
    inputs:
      - dockerContainerName
      - serviceName
      - serviceEnvs
      - taskDependencies
      - redisServiceName
      - postgreServiceName
    config:
      redisServiceName: '{{ .GetValue "redisServiceName" }}'
      postgreServiceName: '{{ .GetValue "postgreServiceName" }}'
      beforeStart: |
        . "${ZARUBA_HOME}/bash/generate_docker_task.sh"
        REDIS_SERVICE={{ .EscapeShellArg (.GetConfig "redisServiceName") }}
        REDIS_TASK="run$("{{ .ZarubaBin }}" str toPascal "${REDIS_SERVICE}")"
        POSTGRE_SERVICE={{ .EscapeShellArg (.GetConfig "postgreServiceName") }}
        POSTGRE_TASK="run$("{{ .ZarubaBin }}" str toPascal "${POSTGRE_SERVICE}")"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaRedisTask" "${REDIS_TASK}" )"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaRedisService" "${REDIS_SERVICE}" )"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaPostgreTask" "${POSTGRE_TASK}" )"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaPostgreService" "${POSTGRE_SERVICE}" )"
        if [ "$("{{ .ZarubaBin }}" task isExist ./main.zaruba.yaml "${REDIS_TASK}")" = 0 ]
        then
          echo "create redis task: ${REDIS_TASK}"
          generate_docker_task \
            "${ZARUBA_HOME}/templates/task/docker/redis" "" "${REDIS_SERVICE}" \
            "" "[]" "{}" "[]" "{}"
        fi
        if [ "$("{{ .ZarubaBin }}" task isExist ./main.zaruba.yaml "${POSTGRE_TASK}")" = 0 ]
        then
          echo "create postgre task: ${POSTGRE_TASK}"
          generate_docker_task \
            "${ZARUBA_HOME}/templates/task/docker/postgre" "" "${POSTGRE_SERVICE}" \
            "" "[]" "{}" "[]" "{}" "1"
        fi
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/templates/task/docker/airflow'

