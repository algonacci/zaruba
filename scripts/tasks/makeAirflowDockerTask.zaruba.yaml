tasks: 

  makeAirflowDockerTask:
    extend: core.makeDockerTask
    inputs:
      - generatorDockerContainerName
      - generatorServiceName
      - generatorServiceEnvs
      - generatorTaskDependencies
      - airflowRedisTask
      - airflowPostgreTask
    config:
      replacementMap: |
        {
          "zarubaAirflowRedisTask": "{{ .GetValue "airflowRedisTask" }}",
          "zarubaAirflowPosgreTask": "{{ .GetValue "airflowPostgreTask" }}"
        }
      beforeStart: |
        . "${ZARUBA_HOME}/bash/generate_docker_task.sh"
        . "${ZARUBA_HOME}/bash/get_service_name_by_task_name.sh"
        REPLACEMENT_MAP={{ .EscapeShellArg (.GetConfig "replacementMap" ) }}

        REDIS_TASK="$("{{ .ZarubaBin }}" getFromMap "${REPLACEMENT_MAP}" "zarubaAirflowRedisTask" )"
        REDIS_SERVICE="$(get_service_name_by_task_name "${REDIS_TASK}")"
        if [ "$("{{ .ZarubaBin }}" isTaskExist ./main.zaruba.yaml "${REDIS_SERVICE}")" = 0 ]
        then
          echo "create redis task: ${REDIS_SERVICE}"
          generate_docker_task \
            "${ZARUBA_HOME}/templates/task/docker/redis" \
            "" \
            "${REDIS_SERVICE}" \
            "" \
            "[]" \
            "{}" \
            "[]" \
            "{}"
        fi

        POSTGRE_TASK="$("{{ .ZarubaBin }}" getFromMap "${REPLACEMENT_MAP}" "zarubaAirflowPosgreTask" )"
        POSTGRE_SERVICE="$(get_service_name_by_task_name "${POSTGRE_TASK}")"
        if [ "$("{{ .ZarubaBin }}" isTaskExist ./main.zaruba.yaml "${POSTGRE_SERVICE}")" = 0 ]
        then
          echo "create postgre task: ${POSTGRE_SERVICE}"
          generate_docker_task \
            "${ZARUBA_HOME}/templates/task/docker/postgre" \
            "" \
            "${POSTGRE_SERVICE}" \
            "" \
            "[]" \
            "{}" \
            "[]" \
            "{}"
        fi
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/templates/task/docker/airflow'

