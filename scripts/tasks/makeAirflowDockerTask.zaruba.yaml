tasks: 

  makeAirflowDockerTask:
    extend: core.makeDockerTask
    inputs:
      - generatorDockerContainerName
      - generatorServiceName
      - generatorServiceEnvs
      - generatorTaskDependencies
      - generatorRedisTask
      - generatorPostgreTask
    config:
      generatorRedisTask: '{{ .GetValue "generatorRedisTask" }}'
      generatorPostgreTask: '{{ .GetValue "generatorPostgreTask" }}'
      beforeStart: |
        . "${ZARUBA_HOME}/bash/generate_docker_task.sh"
        . "${ZARUBA_HOME}/bash/get_service_name_by_task_name.sh"
        REDIS_TASK={{ .EscapeShellArg (.GetConfig "generatorRedisTask") }}
        REDIS_SERVICE="$(get_service_name_by_task_name "${REDIS_TASK}")"
        POSTGRE_TASK={{ .EscapeShellArg (.GetConfig "generatorPostgreTask") }}
        POSTGRE_SERVICE="$(get_service_name_by_task_name "${POSTGRE_TASK}")"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaRedisTask" "${REDIS_TASK}" )"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaRedisService" "${REDIS_SERVICE}" )"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaPostgreTask" "${POSTGRE_TASK}" )"
        REPLACEMENT_MAP="$("{{ .ZarubaBin }}" map set "${REPLACEMENT_MAP}" "zarubaPostgreService" "${POSTGRE_SERVICE}" )"
        if [ "$("{{ .ZarubaBin }}" task isExist ./main.zaruba.yaml "${REDIS_SERVICE}")" = 0 ]
        then
          echo "create redis task: ${REDIS_SERVICE}"
          generate_docker_task \
            "${ZARUBA_HOME}/templates/task/docker/redis" "" "${REDIS_SERVICE}" \
            "" "[]" "{}" "[]" "{}"
        fi
        if [ "$("{{ .ZarubaBin }}" task isExist ./main.zaruba.yaml "${POSTGRE_SERVICE}")" = 0 ]
        then
          echo "create postgre task: ${POSTGRE_SERVICE}"
          generate_docker_task \
            "${ZARUBA_HOME}/templates/task/docker/postgre" "" "${POSTGRE_SERVICE}" \
            "" "[]" "{}" "[]" "{}" "1"
        fi
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/templates/task/docker/airflow'

