tasks:

  core.runScript:
    icon: üìî
    description: |
      Run script
      USAGE:
      ```yaml
      runTask:
        extend: core.runScript
        config:
          # Executable. (default: sh)
          cmd: sh
          # Executable argument to run script. (default: -c)
          cmdArg: -c
          # Before start script. (no default)
          beforeStart: ""
          # Start script. (no default)
          start: ""
          # After start script. (no default)
          afterStart: ""
          # Executed even before "BeforeStart". (no default)
          setup: ""
      ```
    private: true
    config:
      cmd: '{{ if .GetKwarg "defaultShell" }}{{ .GetKwarg "defaultShell" }}{{ else }}{{ .GetDefaultShell }}{{ end }}'
      cmdArg: "-c"
    env:
      PYTHONUNBUFFERED:
        from: PYTHONUNBUFFERED
        default: 1
    start:
    - '{{ .GetConfig "cmd" }}'
    - '{{ .GetConfig "cmdArg" }}'
    - |
        {{ .GetConfig "setup" }}
        {{ .GetConfig "beforeStart" }}
        {{ .GetConfig "start" }}
        {{ .GetConfig "afterStart" }}


  core.runCoreScript:
    icon: üìî
    description: |
      Run script for core tasks
      USAGE:
      ```yaml
      runTask:
        extend: core.runCoreScript
        config:
          # Start script. (default: "echo No script defined")
          start: "echo No script defined"
      ```
    private: true
    extend: core.runShellScript
    dependencies:
    - core.checkThirdParties
    - core.checkBootstrap
    config:
      setup: |
        {{ $task := .GetTask "core.runShellScript" -}}
        {{ $task.GetConfig "setup" }}
        set -e
        UTIL="${ZARUBA_HOME}/scripts/util/sh"
        PY_UTIL="${UTIL}/py_util.sh"
      start: echo "No script defined"


  core.checkThirdParties:
    icon: üêö
    private: true
    extend: core.runScript
    config:
      start: |
        THIRD_PARTIES="${ZARUBA_HOME}/scripts/thirdparties"
        if [ ! -d "${THIRD_PARTIES}" ]
        then
          mkdir -p "${THIRD_PARTIES}"
          chown "${CURRENT_USER}" "${THIRD_PARTIES}"
        fi
  

  core.checkBootstrap:
    icon: üêö
    private: true
    extend: core.runScript
    config:
      start: |
        {{ $d := .Decoration -}}
        CURRENT_USER="$(. "${ZARUBA_HOME}/scripts/util/sh/get_current_user.sh")"
        BOOTSTRAP_SCRIPT="${ZARUBA_HOME}/scripts/bootstrap.sh"
        if [ ! -f "${BOOTSTRAP_SCRIPT}" ]
        then
          touch "${BOOTSTRAP_SCRIPT}"
          chmod 755 "${BOOTSTRAP_SCRIPT}"
          chown "${CURRENT_USER}" "${BOOTSTRAP_SCRIPT}"
        fi
        . "${BOOTSTRAP_SCRIPT}"
        if echo "$PATH" | grep -Fqe ".local/bin"
        then
          echo "{{ $d.Faint }}${HOME}/.local/bin is already in the PATH{{ $d.Normal }}"
        else
          . "${ZARUBA_HOME}/scripts/util/sh/append_if_exist.sh" "$(cat "${ZARUBA_HOME}/scripts/templates/shell/include_local_bin.sh")" "${BOOTSTRAP_SCRIPT}"
          . "${BOOTSTRAP_SCRIPT}"
        fi
        . "${ZARUBA_HOME}/scripts/util/sh/inject_bootstrap.sh" "${HOME}/.bashrc"
        . "${ZARUBA_HOME}/scripts/util/sh/inject_bootstrap.sh" "${HOME}/.zshrc"
 

  core.runShellScript:
    icon: üêö
    description: |
      Run shell script
      USAGE:
      ```yaml
      runTask:
        extend: core.runShellScript
        config:
          # Start script. (default: "echo hello world")
          start: echo hello world
      ```
    private: true
    extend: core.runScript
    dependencies:
    - core.checkThirdParties
    - core.checkBootstrap
    config:
      setup: |
        alias sh=.
        THIRD_PARTIES="${ZARUBA_HOME}/scripts/thirdparties"
        BOOTSTRAP_SCRIPT="${ZARUBA_HOME}/scripts/bootstrap.sh"
        . "${BOOTSTRAP_SCRIPT}"
      start: "echo hello world"


  core.runPythonScript:
    icon: üêç
    description: |
      Run python script
      USAGE:
      ```yaml
      runTask:
        extend: core.runPythonScript
        config:
          # Start script. (default: "print('hello world')")
          start: print('hello world')
      ```
    private: true
    extend: core.runScript
    config:
      cmd: python
      start: "print('hello world')"


  core.runNodeJsScript:
    icon: üê∏
    description: |
      Run Node.Js script
      USAGE:
      ```yaml
      runTask:
        extend: core.runNodeJsScript
        config:
          # Start script. (default: "console.log('hello world')")
          start: console.log('hello world')
      ```
    private: true
    extend: core.runScript
    config:
      cmd: node
      cmdArg: "-p"
      start: "console.log('hello world')"
