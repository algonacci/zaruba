inputs:

  generator.templates:
    description: |
      Additional template locations.
      Use colon (:) as separator.
      Leave blank if you don't have any additional template

  generator.docker.image.prefix:
    description: Docker image prefix. Can be left blank.

  generator.docker.image.tag:
    description: Docker image tag. Can be left blank.

  generator.docker.image.name:
    default: default
    description: Docker image. Can be left blank.

  generator.docker.container:
    description: | 
      Container name. 
      Will be inferred from generator.docker.image.name if left blank.
  
  generator.service.name:
    description: |
      Service name.
      Will be inferred from generator.docker.container or generator.service.location if letf blank.

  generator.service.location:
    description: Location of the service. Required.

  generator.service.type:
    default: default
    description: |
      Service type (eg: nodejs, go, python, fastapi, or default).

  generator.service.ports:
    description: |
      Service's port list. Use comma (,) as separator.
      Will be inferred from service's environment if left blank.

  generator.module.name:
    description: Module name. Required.
  
  generator.url:
    description: URL to be handled. Required.

  generator.event.name:
    description: Name of the event to be handled. Required.
  
  generator.crud.entity:
    description: Name of the entity to be handled. Required.
  
  generator.crud.fields:
    description: |
      Fields of generator.entity.
      Use comma (,) as separator.
  

tasks:

  core.generate:
    icon: üè≠
    description: |
      Base task to generate something.
      USAGE:
      ```yaml
      addTask:
        extend: core.generate
        config:
          start: |
            . ${invoke_core_py} copyAndReplace source.yaml destination.yaml ${VALUES}
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
    - core.setupPyUtil
    - core.isProject
    - core.showAdv
    inputs:
    - generator.templates
    config:
      setup: |
        {{ .Trim (.GetConfig "loadBootstrapScript") "\n" }} 
        {{ .Trim (.GetConfig "loadUtilScript") "\n" }} 
        TEMPLATE_PATHS="{{ if .GetValue "generator.templates" }}{{ .GetValue "generator.templates" }}:{{ end }}${ZARUBA_HOME}/scripts/templates"
        # Usage: copy_and_create_link <template_path> <link_source> <link_destination>
        copy_and_create_link()
        {
          mkdir -p "${2}"
          cp -rnT "${1}" "${2}"
          invoke_core_py add_link "${2}" "${3}"
          invoke_core_sh link_resource "${2}" "${3}"
        }
        set -e

  
  makeHelmCharts:
    icon: üö¢
    description: |
      Add helm charts to the project to make deployment easier.
      USAGE:
        zaruba please makeHelmCharts
    extend: core.generate
    dependencies:
    - core.isNotContainHelmCharts
    config:
      start: |
        {{- $d := .Decoration -}}
        HELM_DEPLOYMENT_TEMPLATE="{{ .DirPath }}/templates/helmDeployments"
        LOCATION=helm-deployments
        mkdir -p "${LOCATION}"
        cp -r "${HELM_DEPLOYMENT_TEMPLATE}/helmfile.yaml" "${LOCATION}/helmfile.yaml"
        cp -r "${HELM_DEPLOYMENT_TEMPLATE}/charts" "${LOCATION}/charts"
        cp -r "${HELM_DEPLOYMENT_TEMPLATE}/values" "${LOCATION}/values"
        invoke_core_py create_helm_task
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Helm charts created{{ $d.Normal }}"

 
  makeServiceDeployment:
    icon: üö¢
    description: |
      Add helm charts to the project to make deployment easier.
    extend: core.generate
    dependencies:
    - core.isContainHelmCharts
    inputs:
    - generator.service.location
    - generator.service.ports
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        PORTS="{{ .GetValue "generator.service.ports" }}"
        invoke_core_py create_service_deployment "${LOCATION}" "${PORTS}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Deployment created{{ $d.Normal }}"


  makeDockerTask:
    icon: üê≥
    description: |
      Add docker task to the project.
    extend: core.generate
    inputs:
    - generator.docker.image.name
    - generator.docker.image.prefix
    - generator.docker.image.tag
    - generator.docker.container
    - generator.service.name
    config:
      start: |
        {{- $d := .Decoration -}}
        IMAGE_NAME="{{ .GetValue "generator.docker.image.name" }}"
        IMAGE_PREFIX="{{ .GetValue "generator.docker.image.prefix" }}"
        IMAGE_TAG="{{ .GetValue "generator.docker.image.tag" }}"
        CONTAINER_NAME="{{ .GetValue "generator.docker.container" }}"
        SERVICE_NAME="{{ .GetValue "generator.service.name" }}"
        invoke_core_py create_docker_task "${TEMPLATE_PATHS}" "${IMAGE_NAME}" "${IMAGE_PREFIX}" "${IMAGE_TAG}" "${CONTAINER_NAME}" "${SERVICE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"


  makeServiceTask:
    icon: üì¶
    description: |
      Add service task to the project.
    extend: core.generate
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.type
    - generator.service.ports
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        SERVICE_TYPE="{{ .GetValue "generator.service.type" }}"
        SERVICE_PORTS="{{ .GetValue "generator.service.ports" }}"
        SERVICE_NAME="{{ .GetValue "generator.service.name" }}"
        invoke_core_py create_service_task "${TEMPLATE_PATHS}" "${LOCATION}" "${SERVICE_NAME}" "${SERVICE_TYPE}" "${SERVICE_PORTS}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"


  makeFastService:
    icon: ‚ö°
    description: |
      Make "messagebus and RDBMS ready" FastAPI service.
    extend: core.generate
    inputs:
    - generator.service.location
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        ENV_PREFIX=$(invoke_core_py get_env_prefix "${LOCATION}")
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        echo "{{ $d.Yellow }}Creating directory on ${LOCATION}{{ $d.Normal }}"
        mkdir -p "${LOCATION}"
        echo "{{ $d.Yellow }}Copying files from template...{{ $d.Normal }}"
        cp "${FAST_TEMPLATE}/.gitignore" "${LOCATION}/.gitignore"
        cp "${FAST_TEMPLATE}/.dockerignore" "${LOCATION}/.dockerignore"
        cp "${FAST_TEMPLATE}/Dockerfile" "${LOCATION}/Dockerfile"
        cp "${FAST_TEMPLATE}/main.py" "${LOCATION}/main.py"
        cp "${FAST_TEMPLATE}/Pipfile" "${LOCATION}/Pipfile"
        cp "${FAST_TEMPLATE}/Pipfile.lock" "${LOCATION}/Pipfile.lock"
        cp "${FAST_TEMPLATE}/start.sh" "${LOCATION}/start.sh"
        chmod 755 "${LOCATION}/start.sh"
        cp "${FAST_TEMPLATE}/template.env" "${LOCATION}/template.env"
        cp -r "${FAST_TEMPLATE}/schema" "${LOCATION}/schema"
        invoke_core_py replace_all "${LOCATION}" "ZARUBA_ENV_PREFIX=${ENV_PREFIX}"
        copy_and_create_link "${FAST_TEMPLATE}/transport" "shared-libs/python/transport" "${LOCATION}/transport"
        copy_and_create_link "${FAST_TEMPLATE}/database" "shared-libs/python/database" "${LOCATION}/database"
        echo üéâüéâüéâ
        

  makeFastModule:
    icon: ‚ö°
    description: |
      Make module for FastService.
    inputs:
    - generator.service.location
    - generator.module.name
    extend: core.generate
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_not_be_dir "${LOCATION}/${MODULE}" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE} is already exist{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        cp -r "${FAST_TEMPLATE}/module" "${LOCATION}/${MODULE}"
        invoke_core_py replace_all "${LOCATION}/${MODULE}" "module=${MODULE}"
        invoke_core_py register_fast_module "${LOCATION}" "${MODULE}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Module ${LOCATION}/${MODULE} created {{ $d.Normal }}"


  makeFastRoute:
    icon: ‚ö°
    description: |
      Make route handler in FastService's module.
    extend: core.generate
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.url
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/route.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/route.py should be exist{{ $d.Normal }}"
        URL="{{ .GetValue "generator.url" }}"
        invoke_core_sh should_not_be_empty "${URL}" "{{ $d.Bold }}{{ $d.Red }}generator.url is required.{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_route "${LOCATION}" "${MODULE}" "${URL}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Route for ${URL} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"


  makeFastEventHandler:
    icon: ‚ö°
    description: |
      Make event handler in FastService's module.
    extend: core.generate
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.event.name
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/event.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/event.py should be exist{{ $d.Normal }}"
        EVENT="{{ .GetValue "generator.event.name" }}"
        invoke_core_sh should_not_be_empty "${EVENT}" "{{ $d.Bold }}{{ $d.Red }}generator.event.name is required.{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_event_handler "${LOCATION}" "${MODULE}" "${EVENT}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Event handler for ${EVENT} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"


  makeFastRPCHandler:
    icon: ‚ö°
    description: |
      Make RPC handler in FastService's module.
    extend: core.generate
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.event.name
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/event.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/event.py should be exist{{ $d.Normal }}"
        EVENT="{{ .GetValue "generator.event.name" }}"
        invoke_core_sh should_not_be_empty "${EVENT}" "{{ $d.Bold }}{{ $d.Red }}generator.event.name is required.{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_rpc_handler "${LOCATION}" "${MODULE}" "${EVENT}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}RPC handler for ${EVENT} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"


  makeFastCRUD:
    icon: ‚ö°
    description: |
      Make CRUD handler in FastService's module.
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.crud.entity
    - generator.crud.fields
    extend: core.generate
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/event.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/event.py should be exist{{ $d.Normal }}"
        ENTITY="{{ .GetValue "generator.crud.entity" }}"
        invoke_core_sh should_not_be_empty "${ENTITY}" "{{ $d.Bold }}{{ $d.Red }}generator.crud.entity is required.{{ $d.Normal }}"
        FIELDS="{{ .GetValue "generator.crud.fields" }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_crud "${LOCATION}" "${MODULE}" "${ENTITY}" "${FIELDS}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}CRUD for ${ENTITY} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"
