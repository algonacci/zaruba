inputs:

  generator.docker.image.name:
    description: Docker image name
    prompt: Docker image name (Required)
    validation: ^[a-z0-9_]+$

  generator.docker.container.name:
    description: Docker container name 
    prompt: Docker container name (Can be blank)
    validation: ^[a-zA-Z0-9_]*$
  
  generator.service.name:
    description: Service name
    prompt: Service name
    validation: ^[a-zA-Z0-9_]*$

  generator.service.ports:
    description: Service ports, comma separated
    prompt: Service ports, comma separated (Can be blank)
    validation: ^[a-zA-Z0-9_,]*$

  generator.service.startCommand:
    description: Service start command
    prompt: Command to run the service (Required)
    validation: ^.+$

  generator.service.location:
    description: service location, relative to current directory
    prompt: Service location, relative to current directory (Required)
    validation: ^.+$

  generator.service.docker.image.name:
    description: Service's docker image name
    prompt: Service's Docker image name (Can be blank)
    validation: ^[a-z0-9_]*$

  generator.service.docker.container.name:
    description: Service's docker container name
    prompt: Service's docker container name (Can be blank)
    validation: ^[a-zA-Z0-9_]*$
 
  generator.module.name:
    description: Module name
    prompt: Module Name (Required)
    validation: ^[a-zA-Z0-9_]+$
  
  generator.url:
    description: URL to be handled
    prompt: URL to be handled (Required)
    validation: ^[a-zA-Z0-9_\-/]+$

  generator.event.name:
    description: Event name
    prompt: Event name (Required)
    validation: ^[a-zA-Z0-9_\-\.]+$
  
  generator.crud.entity:
    description: Entity name.
    prompt: Entity (Required)
    validation: ^[a-zA-Z0-9_]+$
  
  generator.crud.fields:
    description: Field names.
    prompt: Field names (comma separated)
    validation: ^[a-zA-Z0-9_,]*$
  

tasks:

  core.makeDockerTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    config:
      imageName: '{{ .GetValue "generator.docker.image.name" }}'
      containerName: '{{ .GetValue "generator.docker.container.name" }}'
      serviceName: '{{ .GetValue "generator.service.name" }}'
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/default.zaruba.yaml'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION="{{ .GetConfig "templateLocation" }}"
        IMAGE_NAME="{{ .GetConfig "imageName" }}"
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        SERVICE_NAME="{{ .GetConfig "serviceName" }}"
        invoke_core_py create_docker_task "${TEMPLATE_LOCATION}" "${IMAGE_NAME}" "${CONTAINER_NAME}" "${SERVICE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"

 
  core.makePresetDockerTask:
    extend: core.makeDockerTask
    private: true
    config:
      template: ''
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/{{ .GetConfig "template" }}.zaruba.yaml'


  core.makeServiceTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    config:
      imageName: '{{ .GetValue "generator.service.docker.image.name" }}'
      containerName: '{{ .GetValue "generator.service.docker.container.name" }}'
      serviceName: '{{ .GetValue "generator.service.name" }}'
      servicePorts: '{{ .GetValue "generator.service.ports" }}'
      serviceLocation: '{{ .GetValue "generator.service.location" }}'
      serviceStartCommand: '{{ .GetValue "generator.service.startCommand" }}'
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/service/default.zaruba.yaml'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION="{{ .GetConfig "templateLocation" }}"
        IMAGE_NAME="{{ .GetConfig "imageName" }}"
        CONTAINER_NAME="{{ .GetConfig "containerName" }}"
        SERVICE_NAME="{{ .GetConfig "serviceName" }}"
        SERVICE_PORTS="{{ .GetConfig "servicePorts" }}"
        SERVICE_LOCATION="{{ .GetConfig "serviceLocation" }}"
        SERVICE_START_COMMAND="{{ .GetConfig "serviceStartCommand" }}"
        invoke_core_py create_service_task "${TEMPLATE_LOCATION}" "${SERVICE_NAME}" "${IMAGE_NAME}" "${CONTAINER_NAME}" "${SERVICE_LOCATION}" "${SERVICE_START_COMMAND}" "${SERVICE_PORTS}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"

 
  core.makePresetServiceTask:
    extend: core.makeServiceTask
    private: true
    config:
      template: ''
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/service/{{ .GetConfig "template" }}.zaruba.yaml'

    
  makeDockerTask:
    icon: üê≥
    extend: core.makeDockerTask
    inputs:
    - generator.docker.image.name
    - generator.docker.container.name
    - generator.service.name
  

  makeMysqlDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: mysql


  makeRabbitmqDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: rabbitmq


  makeElasticSearchDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: elasticsearch


  makeCassandraDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: cassandra


  makeRedisDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: redis


  makeMongoDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: mongo


  makeServiceTask:
    icon: üìú
    extend: core.makeServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.startCommand
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name

  
  makeFastApiServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: fastapi

  
  makeGoServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: go

 
  makeNodeJsServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: nodejs

 
  makePythonServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: python


  makeStaticServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: static

 
  makeHelmDeployment:
    icon: üö¢
    description: |
      Add helm charts to the project to make deployment easier.
    extend: core.runCoreScript
    dependencies:
    - core.isContainHelmCharts
    - core.showAdv
    inputs:
    - generator.service.name
    config:
      start: |
        {{- $d := .Decoration -}}
        SERVICE_NAME="{{ .GetValue "generator.service.name" }}"
        invoke_core_py create_helm_deployment "${SERVICE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Deployment created{{ $d.Normal }}"
  

  makeFastService:
    icon: ‚ö°
    description: |
      Make "messagebus and RDBMS ready" FastAPI service.
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    inputs:
    - generator.service.location
    config:
      start: |
        {{- $d := .Decoration -}}
        copy_and_create_link()
        {
          mkdir -p "${2}"
          cp -rnT "${1}" "${2}"
          invoke_core_py add_link "${2}" "${3}"
          invoke_core_sh link_resource "${2}" "${3}"
        }
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        ENV_PREFIX=$(invoke_core_py get_env_prefix "${LOCATION}")
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        echo "{{ $d.Yellow }}Creating directory on ${LOCATION}{{ $d.Normal }}"
        mkdir -p "${LOCATION}"
        echo "{{ $d.Yellow }}Copying files from template...{{ $d.Normal }}"
        cp "${FAST_TEMPLATE}/.gitignore" "${LOCATION}/.gitignore"
        cp "${FAST_TEMPLATE}/.dockerignore" "${LOCATION}/.dockerignore"
        cp "${FAST_TEMPLATE}/Dockerfile" "${LOCATION}/Dockerfile"
        cp "${FAST_TEMPLATE}/main.py" "${LOCATION}/main.py"
        cp "${FAST_TEMPLATE}/Pipfile" "${LOCATION}/Pipfile"
        cp "${FAST_TEMPLATE}/Pipfile.lock" "${LOCATION}/Pipfile.lock"
        cp "${FAST_TEMPLATE}/start.sh" "${LOCATION}/start.sh"
        chmod 755 "${LOCATION}/start.sh"
        cp "${FAST_TEMPLATE}/template.env" "${LOCATION}/template.env"
        cp -r "${FAST_TEMPLATE}/schema" "${LOCATION}/schema"
        invoke_core_py replace_all "${LOCATION}" "ZARUBA_ENV_PREFIX=${ENV_PREFIX}"
        copy_and_create_link "${FAST_TEMPLATE}/transport" "shared-libs/python/transport" "${LOCATION}/transport"
        copy_and_create_link "${FAST_TEMPLATE}/database" "shared-libs/python/database" "${LOCATION}/database"
        echo üéâüéâüéâ
        

  makeFastModule:
    icon: ‚ö°
    description: |
      Make module for FastService.
    inputs:
    - generator.service.location
    - generator.module.name
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_not_be_dir "${LOCATION}/${MODULE}" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE} is already exist{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        cp -r "${FAST_TEMPLATE}/module" "${LOCATION}/${MODULE}"
        invoke_core_py replace_all "${LOCATION}/${MODULE}" "module=${MODULE}"
        invoke_core_py register_fast_module "${LOCATION}" "${MODULE}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Module ${LOCATION}/${MODULE} created {{ $d.Normal }}"


  makeFastRoute:
    icon: ‚ö°
    description: |
      Make route handler in FastService's module.
    extend: core.runCoreScript
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.url
    dependencies:
    - core.showAdv
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/route.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/route.py should be exist{{ $d.Normal }}"
        URL="{{ .GetValue "generator.url" }}"
        invoke_core_sh should_not_be_empty "${URL}" "{{ $d.Bold }}{{ $d.Red }}generator.url is required.{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_route "${LOCATION}" "${MODULE}" "${URL}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Route for ${URL} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"


  makeFastEventHandler:
    icon: ‚ö°
    description: |
      Make event handler in FastService's module.
    extend: core.runCoreScript
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.event.name
    dependencies:
    - core.showAdv
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/event.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/event.py should be exist{{ $d.Normal }}"
        EVENT="{{ .GetValue "generator.event.name" }}"
        invoke_core_sh should_not_be_empty "${EVENT}" "{{ $d.Bold }}{{ $d.Red }}generator.event.name is required.{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_event_handler "${LOCATION}" "${MODULE}" "${EVENT}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Event handler for ${EVENT} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"


  makeFastRPCHandler:
    icon: ‚ö°
    description: |
      Make RPC handler in FastService's module.
    extend: core.runCoreScript
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.event.name
    dependencies:
    - core.showAdv
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/event.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/event.py should be exist{{ $d.Normal }}"
        EVENT="{{ .GetValue "generator.event.name" }}"
        invoke_core_sh should_not_be_empty "${EVENT}" "{{ $d.Bold }}{{ $d.Red }}generator.event.name is required.{{ $d.Normal }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_rpc_handler "${LOCATION}" "${MODULE}" "${EVENT}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}RPC handler for ${EVENT} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"


  makeFastCRUD:
    icon: ‚ö°
    description: |
      Make CRUD handler in FastService's module.
    inputs:
    - generator.service.location
    - generator.module.name
    - generator.crud.entity
    - generator.crud.fields
    dependencies:
    - core.showAdv
    extend: core.runCoreScript
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ .GetValue "generator.service.location" }}"
        invoke_core_sh should_not_be_empty "${LOCATION}" "{{ $d.Bold }}{{ $d.Red }}generator.service.location is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/main.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/main.py should be exist{{ $d.Normal }}"
        MODULE="{{ .GetValue "generator.module.name" }}"
        invoke_core_sh should_not_be_empty "${MODULE}" "{{ $d.Bold }}{{ $d.Red }}generator.module.name is required{{ $d.Normal }}"
        invoke_core_sh should_be_file "${LOCATION}/${MODULE}/event.py" "{{ $d.Bold }}{{ $d.Red }}${LOCATION}/${MODULE}/event.py should be exist{{ $d.Normal }}"
        ENTITY="{{ .GetValue "generator.crud.entity" }}"
        invoke_core_sh should_not_be_empty "${ENTITY}" "{{ $d.Bold }}{{ $d.Red }}generator.crud.entity is required.{{ $d.Normal }}"
        FIELDS="{{ .GetValue "generator.crud.fields" }}"
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        invoke_core_py create_fast_crud "${LOCATION}" "${MODULE}" "${ENTITY}" "${FIELDS}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}CRUD for ${ENTITY} created on ${LOCATION}/${MODULE}{{ $d.Normal }}"
