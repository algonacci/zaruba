tasks:

  core.generate:
    icon: üè≠
    description: |
      Base task to generate something.
      USAGE:
      ```yaml
      addTask:
        extend: core.generate
      config:
        start: |
          sh ${RUN_PY} copyAndReplace source.yaml destination.yaml ${KWARGS}
      ```
    private: true
    extend: core.runCoreScript
    dependencies:
      - core.setupPyUtil
      - core.isProject
    config:
      setup: |
        {{ .GetTaskConfig "core.runCoreScript" "setup" }}
        TEMPLATE_PATHS="{{ if .Kwargs.templates }}{{ .Kwargs.templates }}:{{ end }}${ZARUBA_HOME}/scripts/templates"


  makeDockerTask:
    icon: üê≥
    description: |
      Add docker task to the project.
      USAGE:
        zaruba please addDocker image=nginx
        zaruba please addDocker image=nginx container=myNginx task=runMyNginx templates=./templates
      ARGUMENTS:
        image:      Docker image. (required)
        container:  Container name. (optional, if not provided, will be inferred from `image`)
        task:       Task name. (optional, if not provided, will be inferred from `image`)
        templates:  Template directories, colon separated. (optional, used to define custom template path)
    extend: core.generate
    config:
      start: |
        {{- $d := .Decoration -}}
        IMAGE="{{ if .Kwargs.image }}{{ .Kwargs.image }}{{ end }}"
        CONTAINER="{{ if .Kwargs.container }}{{ .Kwargs.container }}{{ end }}"
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ end }}"
        sh "${RUN_PY}" create_docker_task "${TEMPLATE_PATHS}" "${IMAGE}" "${CONTAINER}" "${TASK}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"


  makeServiceTask:
    icon: üì¶
    description: |
      Add service task to the project.
      USAGE:
        zaruba please addService location=fibo
        zaruba please addService location=fibo type=default task=runFibo templates=./templates
      ARGUMENTS:
        location:   Service location. (required)
        type:       Service type. (optional, default to 'default')
        task:       Task name. (optional, if not provided, will be inferred from `location`)
        templates:  Template directories, colon separated. (optional, used to define custom template path)
        ports:      Service ports, colon separated. (optional, will be infered from environment if not defined)
    extend: core.generate
    config:
      start: |
        {{- $d := .Decoration -}}
        LOCATION="{{ if .Kwargs.location }}{{ .Kwargs.location }}{{ end }}"
        TYPE="{{ if .Kwargs.type }}{{ .Kwargs.type }}{{ end }}"
        TASK="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ end }}"
        PORTS="{{ if .Kwargs.ports }}{{ .Kwargs.ports }}{{ end }}"
        sh "${RUN_PY}" create_service_task "${TEMPLATE_PATHS}" "${LOCATION}" "${TYPE}" "${TASK}" "${PORTS}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"


  makeFastService:
    icon: ‚ö°
    description: |
      Make FastAPI service that use Rabbitmq as messagebus
      USAGE:
        zaruba please makeFastService location=myService
        zaruba please makeFastService location=myService task=runMyService
      ARGUMENTS:
        location:   Service location. (required)
        task:       Task name. (optional, if not provided, will be inferred from `location`)
    extend: core.generate
    config:
      start: |
        {{- $d := .Decoration -}}
        RMQ_TASK_NAME=$(sh "${RUN_PY}" find_task_name "config.containerName=rabbitmq.*")
        if [ -e "$RMQ_TASK_NAME" ]
        then
          echo "{{ $d.Red }}{{ $d.Bold }}Rabbitmq task not found.{{ $d.Normal }}"
          echo "You can make rabbitmq task by running {{ $d.Yellow }}zaruba please makeDockerTask image=rabbitmq{{ $d.Normal }}"
          exit 1
        fi
        LOCATION="{{ if .Kwargs.location }}{{ .Kwargs.location }}{{ else }}$(sh "${RUN_PY}" get_random_name){{ end }}"
        TASK_NAME="{{ if .Kwargs.task }}{{ .Kwargs.task }}{{ else }}$(sh "${RUN_PY}" get_task_name "$LOCATION"){{ end }}"
        TASK_FILE_NAME="$(sh "${RUN_PY}" get_task_file_name "${TASK_NAME}")"
        ENV_PREFIX=$(sh "${RUN_PY}" get_env_prefix "${LOCATION}")
        FAST_TEMPLATE="{{ .DirPath }}/templates/fastService"
        echo "{{ $d.Yellow }}Creating directory on ${LOCATION}{{ $d.Normal }}"
        mkdir -p "${LOCATION}"
        echo "{{ $d.Yellow }}Copying files from template...{{ $d.Normal }}"
        cp "${FAST_TEMPLATE}/Dockerfile" "${LOCATION}/Dockerfile"
        cp "${FAST_TEMPLATE}/Pipfile" "${LOCATION}/Pipfile"
        cp "${FAST_TEMPLATE}/"*.* "${LOCATION}/"
        sh "${RUN_PY}" replace_all "${LOCATION}" "ZARUBA_ENV_PREFIX=${ENV_PREFIX}"
        TRANSPORT_SHARED_LIB="shared-libs/python/transport"
        if [ ! -d "${TRANSPORT_SHARED_LIB}" ]
        then
          echo "Creating transport shared library on ${TRANSPORT_SHARED_LIB}"
          mkdir -p "${TRANSPORT_SHARED_LIB}"
          cp -rT "${FAST_TEMPLATE}/transport" "${TRANSPORT_SHARED_LIB}"
        fi
        sh "${RUN_PY}" add_link "${TRANSPORT_SHARED_LIB}" "${LOCATION}/transport"
        sh "${UTIL}/link_resource.sh" "${TRANSPORT_SHARED_LIB}" "${LOCATION}/transport"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service created on ${LOCATION}{{ $d.Normal }}"
        sh "${RUN_PY}" create_service_task "${TEMPLATE_PATHS}" "${LOCATION}" "fastapi" "${TASK_NAME}" "${ENV_PREFIX}_HTTP_PORT"
        sh "${RUN_PY}" add_task_dependency "${TASK_FILE_NAME}" "${TASK_NAME}" "${RMQ_TASK_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task ${TASK_NAME}created {{ $d.Normal }}"
  

  makeFastModule:
    icon: ‚ö°
    extend: core.generate