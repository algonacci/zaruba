inputs:

  generator.docker.image.name:
    description: Docker image name (Required)
    prompt: Docker image name
    validation: ^[a-z0-9_]+$


  generator.docker.container.name:
    description: Docker container name (Can be blank)
    prompt: Docker container name
    validation: ^[a-zA-Z0-9_]*$

  
  generator.service.name:
    description: Service name (Can be blank)
    prompt: Service name
    validation: ^[a-zA-Z0-9_]*$


  generator.service.ports:
    description: |
      Service ports (number or environment variable), comma separated.
      E.g: 3000,HTTP_PORT,PROMETHEUS_PORT
    prompt: "Service ports"
    validation: ^[a-zA-Z0-9_,]*$
  

  generator.service.envs:
    description: |
      Service environments, comma separated.
      E.g: HTTP_PORT=3000,MODE=writer

      Many applications rely on environment variables to configure their behavior.
      You might need to see service's documentation or open environment files (.env, template.env, etc) to see available options.
      If there is no documentation/environment files available, you probably need to run-through the code or ask the developer team.
    prompt: "Service environments"


  generator.task.dependencies:
    description: |
      Task's dependencies, comma separated.
      E.g: runMysql, runRedis

      For example, you want to make sure that MySQL and Redis is already running before starting this task.

      In that case, assuming runMySql and runRedis are tasks to run MySQL and Redis respectively, then you need to set this task's dependencies into:
        runMysql,runRedis
    prompt: "Task dependencies"


  generator.service.location:
    description: Service location, relative to this directory
    prompt: "Service location"
    validation: ^.+$


  generator.service.docker.image.name:
    description: |
      Service's docker image name (Can be blank)
    prompt: Service's docker image name
    validation: ^[a-z0-9_]*$


  generator.service.docker.container.name:
    description: |
      Service's docker container name (Can be blank)
    prompt: Service's docker container name
    validation: ^[a-zA-Z0-9_]*$


  generator.service.startCommand:
    description: Command to start the service (Required)
    prompt: Start command
    validation: ^.+$


  generator.goService.startCommand:
    description: Command to start the service (Required)
    prompt: Start command
    default: go run .
    validation: ^.+$


  generator.nodeJsService.startCommand:
    description: Command to start the service (Required)
    prompt: Start command
    options:
    - npm start
    - node start
    - node main
    - node index
    default: npm start
    validation: ^.+$


  generator.nodeJsService.runnerVersion:
    description: NodeJs version (Required)
    prompt: NodeJs version
    options: [node, 16, 15, 14, 13, 12, 11, 10]
    default: node
    validation: ^.+$

   
  generator.pythonService.startCommand:
    description: Command to start the service (Required)
    prompt: Start command
    options:
    - pipenv run python start.py
    - pipenv run python main.py
    - pipenv run python index.py
    default: pipenv run python start.py
    validation: ^.+$

  
  generator.fastApi.service.name:
    description: Service name (Required)
    prompt: Service name
    validation: ^[a-zA-Z0-9_]+$


  generator.fastApi.module.name:
    description: Module name (Required)
    prompt: Module name
    validation: ^[a-zA-Z0-9_]+$


  generator.fastApi.url:
    description: |
      URL to be handled (Required)
    prompt: URL to be handled
    validation: ^[a-zA-Z0-9_\-/\{\}]+$


  generator.fastApi.httpMethod:
    description: HTTP Method (Required)
    prompt: HTTP Method
    options: [get, post, put, delete]
    default: get
    validation: ^[a-z]+$
    allowCustom: false


  generator.fastApi.event.name:
    description: |
      Event name (Required)
    prompt: Event name
    validation: ^[a-zA-Z0-9_\-\.]+$


  generator.fastApi.rpc.name:
    description: |
      RPC name (Required)
    prompt: RPC name
    validation: ^[a-zA-Z0-9_\-\.]+$

 
  generator.fastApi.crud.entity:
    description: |
      Entity name (Required)
      Usually plural word (e.g: books, articles)
    prompt: Entity name
    validation: ^[a-zA-Z0-9_]+$

  
  generator.fastApi.crud.fields:
    description: |
      Field names, comma separated.
      E.g: name,address
      The following fields are included by default:
      - id
      - created_at
      - updated_at
    prompt: Field names
    validation: ^[a-zA-Z0-9_,]*$
  

tasks:

  core.makeDockerTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    - core.isProject
    config:
      imageName: '{{ .GetValue "generator.docker.image.name" }}'
      containerName: '{{ .GetValue "generator.docker.container.name" }}'
      serviceName: '{{ .GetValue "generator.service.name" }}'
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/default.zaruba.yaml'
      serviceEnvs: '{{ .GetValue "generator.service.envs" }}'
      dependencies: '{{ .GetValue "generator.task.dependencies" }}'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        IMAGE_NAME={{ .SingleQuoteShellValue (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .SingleQuoteShellValue (.GetConfig "containerName") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        SERVICE_ENVS={{ .SingleQuoteShellValue (.GetConfig "serviceEnvs") }}
        DEPENDENCIES={{ .SingleQuoteShellValue (.GetConfig "dependencies") }}
        create_docker_task "template_location=${TEMPLATE_LOCATION}" "image_name=${IMAGE_NAME}" "container_name=${CONTAINER_NAME}" "service_name=${SERVICE_NAME}" "envs=${SERVICE_ENVS}" "dependencies=${DEPENDENCIES}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"

 
  core.makePresetDockerTask:
    extend: core.makeDockerTask
    private: true
    config:
      template: ''
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/{{ .GetConfig "template" }}.zaruba.yaml'


  core.makeServiceTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    - core.isProject
    config:
      imageName: '{{ .GetValue "generator.service.docker.image.name" }}'
      containerName: '{{ .GetValue "generator.service.docker.container.name" }}'
      serviceName: '{{ .GetValue "generator.service.name" }}'
      servicePorts: '{{ .GetValue "generator.service.ports" }}'
      serviceLocation: '{{ .GetValue "generator.service.location" }}'
      serviceStartCommand: '{{ .GetValue "generator.service.startCommand" }}'
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/service/default.zaruba.yaml'
      serviceEnvs: '{{ .GetValue "generator.service.envs" }}'
      dependencies: '{{ .GetValue "generator.task.dependencies" }}'
      runnerVersion: ''
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        IMAGE_NAME={{ .SingleQuoteShellValue (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .SingleQuoteShellValue (.GetConfig "containerName") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        SERVICE_PORTS={{ .SingleQuoteShellValue (.GetConfig "servicePorts") }}
        SERVICE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "serviceLocation") }}
        SERVICE_START_COMMAND={{ .SingleQuoteShellValue (.GetConfig "serviceStartCommand") }}
        RUNNER_VERSION={{ .SingleQuoteShellValue (.GetConfig "runnerVersion") }}
        SERVICE_ENVS={{ .SingleQuoteShellValue (.GetConfig "serviceEnvs") }}
        DEPENDENCIES={{ .SingleQuoteShellValue (.GetConfig "dependencies") }}
        create_service_task "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "image_name=${IMAGE_NAME}" "container_name=${CONTAINER_NAME}" "location=${SERVICE_LOCATION}" "start_command=${SERVICE_START_COMMAND}" "ports=${SERVICE_PORTS}" "envs=${SERVICE_ENVS}" "dependencies=${DEPENDENCIES}" "runner_version=${RUNNER_VERSION}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"

 
  core.makePresetServiceTask:
    extend: core.makeServiceTask
    private: true
    config:
      template: ''
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/service/{{ .GetConfig "template" }}.zaruba.yaml'

    
  makeDockerTask:
    icon: üê≥
    extend: core.makeDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.image.name
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
  

  makeMysqlDockerTask:
    extend: core.makePresetDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
    config:
      template: mysql


  makeRabbitmqDockerTask:
    extend: core.makePresetDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
    config:
      template: rabbitmq


  makeElasticsearchDockerTask:
    extend: core.makePresetDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
    config:
      template: elasticsearch


  makeCassandraDockerTask:
    extend: core.makePresetDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
    config:
      template: cassandra


  makeRedisDockerTask:
    extend: core.makePresetDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
    config:
      template: redis


  makeMongoDockerTask:
    extend: core.makePresetDockerTask
    autoTerminate: true
    inputs:
    - generator.docker.container.name
    - generator.service.name
    - generator.service.envs
    - generator.task.dependencies
    config:
      template: mongo


  makeServiceTask:
    icon: üìú
    extend: core.makeServiceTask
    autoTerminate: true
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.envs
    - generator.service.startCommand
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    - generator.task.dependencies

  
  makeFastApiServiceTask:
    extend: core.makePresetServiceTask
    autoTerminate: true
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.envs
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    - generator.task.dependencies
    config:
      template: fastapi

  
  makeGoServiceTask:
    extend: core.makePresetServiceTask
    autoTerminate: true
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.envs
    - generator.service.ports
    - generator.goService.startCommand
    - generator.task.dependencies
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      serviceStartCommand: '{{ .GetValue "generator.goService.startCommand" }}'
      template: go

 
  makeNodeJsServiceTask:
    extend: core.makePresetServiceTask
    autoTerminate: true
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.envs
    - generator.service.ports
    - generator.nodeJsService.startCommand
    - generator.nodeJsService.runnerVersion
    - generator.task.dependencies
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      serviceStartCommand: '{{ .GetValue "generator.nodeJsService.startCommand" }}'
      runnerVersion: '{{ .GetValue "generator.nodeJsService.runnerVersion" }}'
      template: nodejs

 
  makePythonServiceTask:
    extend: core.makePresetServiceTask
    autoTerminate: true
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.envs
    - generator.service.ports
    - generator.pythonService.startCommand
    - generator.task.dependencies
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      serviceStartCommand: '{{ .GetValue "generator.pythonService.startCommand" }}'
      template: python


  makeStaticServiceTask:
    extend: core.makePresetServiceTask
    autoTerminate: true
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.envs
    - generator.service.ports
    - generator.task.dependencies
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: static

 
  makeHelmDeployment:
    icon: üö¢
    description: |
      Add helm charts to the project to make deployment easier.
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.isContainHelmCharts
    - core.showAdv
    inputs:
    - generator.service.name
    config:
      start: |
        {{- $d := .Decoration -}}
        SERVICE_NAME="{{ .GetValue "generator.service.name" }}"
        create_helm_deployment "${SERVICE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Deployment created{{ $d.Normal }}"
  

  makeFastApiService:
    icon: ‚ö°
    description: Make Fast API service
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.showAdv
    inputs:
    - generator.fastApi.service.name
    configRef: generator.fastApi
    config:
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "createServiceScript" }}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API service created: ${SERVICE_NAME}{{ $d.Normal }}"
        echo "You probably need to check the following files:"
        echo "- ${SERVICE_NAME}/main.py"
        

  makeFastApiModule:
    icon: ‚ö°
    description: Make FastAPI module
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.showAdv
    configRef: generator.fastApi
    config:
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "createModuleScript" }}
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API module created: ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"
        echo "You probably need to check the following files:"
        echo "- ${SERVICE_NAME}/main.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/controller.py"
        

  makeFastApiRoute:
    icon: ‚ö°
    description: Make FastAPI route handler
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.httpMethod
    - generator.fastApi.url
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.showAdv
    configRef: generator.fastApi
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      httpMethod: '{{ .GetValue "generator.fastApi.httpMethod" }}'
      url: '{{ .GetValue "generator.fastApi.url" }}'
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "createModuleScript" }}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        URL={{ .SingleQuoteShellValue (.GetConfig "url") }}
        HTTP_METHOD={{ .SingleQuoteShellValue (.GetConfig "httpMethod") }}
        create_fast_route "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "http_method=${HTTP_METHOD}" "url=${URL}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API Route handler created: ${HTTP_METHOD} ${URL} on ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"
        echo "You probably need to check the following files:"
        echo "- ${SERVICE_NAME}/main.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/controller.py"
    

  makeFastApiEventHandler:
    icon: ‚ö°
    description: Make FastAPI event handler
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.event.name
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.showAdv
    configRef: generator.fastApi
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      eventName: '{{ .GetValue "generator.fastApi.event.name" }}'
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "createModuleScript" }}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        EVENT_NAME={{ .SingleQuoteShellValue (.GetConfig "eventName") }}
        should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME}/${MODULE_NAME} directory should be exist{{ $d.Normal }}"
        create_fast_event_handler "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "event_name=${EVENT_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API event handler created: ${EVENT_NAME} on ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"
        echo "You probably need to check the following files:"
        echo "- ${SERVICE_NAME}/main.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/controller.py"


  makeFastApiRpcHandler:
    icon: ‚ö°
    description: Make FastAPI Route
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.rpc.name
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.showAdv
    configRef: generator.fastApi
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      rpcName: '{{ .GetValue "generator.fastApi.rpc.name" }}'
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "createModuleScript" }}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        RPC_NAME={{ .SingleQuoteShellValue (.GetConfig "rpcName") }}
        should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME}/${MODULE_NAME} directory should be exist{{ $d.Normal }}"
        create_fast_rpc_handler "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "rpc_name=${RPC_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API RPC handler created: ${RPC_NAME} on ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"
        echo "You probably need to check the following files:"
        echo "- ${SERVICE_NAME}/main.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/controller.py"


  makeFastApiCrud:
    icon: ‚ö°
    description: Make FastAPI crud
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.crud.entity
    - generator.fastApi.crud.fields
    extend: core.runCoreScript
    autoTerminate: true
    dependencies:
    - core.showAdv
    configRef: generator.fastApi
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiCrud'
      entityName: '{{ .GetValue "generator.fastApi.crud.entity" }}'
      fieldNames: '{{ .GetValue "generator.fastApi.crud.fields" }}'
      start: |
        {{- $d := .Decoration -}}
        {{ .GetConfig "createModuleScript" }}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        ENTITY_NAME={{ .SingleQuoteShellValue (.GetConfig "entityName") }}
        FIELD_NAMES={{ .SingleQuoteShellValue (.GetConfig "fieldNames") }}
        should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME} directory should be exist{{ $d.Normal }}"
        create_fast_crud "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "entity_name=${ENTITY_NAME}" "field_names=${FIELD_NAMES}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API module created: ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"
        echo "You probably need to check the following files:"
        echo "- ${SERVICE_NAME}/main.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/controller.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/handle<Entity>Event.py"
        echo "- ${SERVICE_NAME}/${MODULE_NAME}/handle<Entity>Route.py"
        echo "- ${SERVICE_NAME}/repos/<entity>.py"
        echo "- ${SERVICE_NAME}/repos/db<Entity>.py"
        echo "- ${SERVICE_NAME}/schemas/<entity>.py"