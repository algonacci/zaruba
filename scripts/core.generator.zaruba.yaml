inputs:

  generator.docker.image.name:
    description: Docker image name
    prompt: Docker image name (Required)
    validation: ^[a-z0-9_]+$

  generator.docker.container.name:
    description: Docker container name 
    prompt: Docker container name (Can be blank)
    validation: ^[a-zA-Z0-9_]*$
  
  generator.service.name:
    description: Service name
    prompt: Service name
    validation: ^[a-zA-Z0-9_]*$

  generator.service.ports:
    description: Service ports, comma separated
    prompt: Service ports, comma separated (Can be blank)
    validation: ^[a-zA-Z0-9_,]*$

  generator.service.location:
    description: service location, relative to current directory
    prompt: Service location, relative to current directory (Required)
    validation: ^.+$

  generator.service.docker.image.name:
    description: Service's docker image name
    prompt: Service's Docker image name (Can be blank)
    validation: ^[a-z0-9_]*$

  generator.service.docker.container.name:
    description: Service's docker container name
    prompt: Service's docker container name (Can be blank)
    validation: ^[a-zA-Z0-9_]*$

  generator.service.startCommand:
    description: Service start command
    prompt: Command to run the service (Required)
    validation: ^.+$

  generator.goService.startCommand:
    description: Service start command
    prompt: Command to run the service (Required)
    default: go run .
    validation: ^.+$

  generator.nodeJsService.startCommand:
    description: Service start command
    prompt: Command to run the service (Required)
    options:
    - npm start
    - node start
    - node main
    - node index
    default: npm start
    validation: ^.+$

  generator.nodeJsService.runnerVersion:
    description: NodeJs version
    prompt: NodeJs version to run the service (Required)
    option: [node, 16, 15, 14, 13, 12, 11, 10]
    default: node
    validation: ^.+$
   
  generator.pythonService.startCommand:
    description: Service start command
    prompt: Command to run the service (Required)
    options:
    - pipenv run python start.py
    - pipenv run python main.py
    - pipenv run python index.py
    default: pipenv run python start.py
    validation: ^.+$
  
  generator.fastApi.service.name:
    description: Service name
    prompt: Service name (Required)
    validation: ^[a-zA-Z0-9_]+$

  generator.fastApi.module.name:
    description: Service name
    prompt: Service name (Required)
    validation: ^[a-zA-Z0-9_]+$

  generator.fastApi.url:
    description: URL to be handled
    prompt: URL to be handled (Required)
    validation: ^[a-zA-Z0-9_\-/]+$

  generator.fastApi.httpMethod:
    description: HTTP Method
    prompt: HTTP Method
    options: [get, post, put, delete]
    default: get
    validation: ^[a-z]+$
    allowCustom: false

  generator.fastApi.event.name:
    description: Event name
    prompt: Event name (Required)
    validation: ^[a-zA-Z0-9_\-\.]+$

  generator.fastApi.rpc.name:
    description: RPC name
    prompt: RPC name (Required)
    validation: ^[a-zA-Z0-9_\-\.]+$
 
  generator.fastApi.crud.entity:
    description: Entity name.
    prompt: Entity (Required)
    validation: ^[a-zA-Z0-9_]+$
  
  generator.fastApi.crud.fields:
    description: Field names.
    prompt: Field names (comma separated)
    validation: ^[a-zA-Z0-9_,]*$
  

tasks:

  core.makeDockerTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    - core.isProject
    config:
      imageName: '{{ .GetValue "generator.docker.image.name" }}'
      containerName: '{{ .GetValue "generator.docker.container.name" }}'
      serviceName: '{{ .GetValue "generator.service.name" }}'
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/default.zaruba.yaml'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        IMAGE_NAME={{ .SingleQuoteShellValue (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .SingleQuoteShellValue (.GetConfig "containerName") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        invoke_core_py create_docker_task "template_location=${TEMPLATE_LOCATION}" "image_name=${IMAGE_NAME}" "container_name=${CONTAINER_NAME}" "service_name=${SERVICE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Docker task created{{ $d.Normal }}"

 
  core.makePresetDockerTask:
    extend: core.makeDockerTask
    private: true
    config:
      template: ''
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/docker/{{ .GetConfig "template" }}.zaruba.yaml'


  core.makeServiceTask:
    extend: core.runCoreScript
    private: true
    dependencies:
    - core.showAdv
    - core.isProject
    config:
      imageName: '{{ .GetValue "generator.service.docker.image.name" }}'
      containerName: '{{ .GetValue "generator.service.docker.container.name" }}'
      serviceName: '{{ .GetValue "generator.service.name" }}'
      servicePorts: '{{ .GetValue "generator.service.ports" }}'
      serviceLocation: '{{ .GetValue "generator.service.location" }}'
      serviceStartCommand: '{{ .GetValue "generator.service.startCommand" }}'
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/service/default.zaruba.yaml'
      runnerVersion: ''
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        IMAGE_NAME={{ .SingleQuoteShellValue (.GetConfig "imageName") }}
        CONTAINER_NAME={{ .SingleQuoteShellValue (.GetConfig "containerName") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        SERVICE_PORTS={{ .SingleQuoteShellValue (.GetConfig "servicePorts") }}
        SERVICE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "serviceLocation") }}
        SERVICE_START_COMMAND={{ .SingleQuoteShellValue (.GetConfig "serviceStartCommand") }}
        RUNNER_VERSION={{ .SingleQuoteShellValue (.GetConfig "runnerVersion") }}
        invoke_core_py create_service_task "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "image_name=${IMAGE_NAME}" "container_name=${CONTAINER_NAME}" "location=${SERVICE_LOCATION}" "start_command=${SERVICE_START_COMMAND}" "ports=${SERVICE_PORTS}" "runner_version=${RUNNER_VERSION}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Service task created{{ $d.Normal }}"

 
  core.makePresetServiceTask:
    extend: core.makeServiceTask
    private: true
    config:
      template: ''
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/task/service/{{ .GetConfig "template" }}.zaruba.yaml'

    
  makeDockerTask:
    icon: üê≥
    extend: core.makeDockerTask
    inputs:
    - generator.docker.image.name
    - generator.docker.container.name
    - generator.service.name
  

  makeMysqlDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: mysql


  makeRabbitmqDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: rabbitmq


  makeElasticsearchDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: elasticsearch


  makeCassandraDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: cassandra


  makeRedisDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: redis


  makeMongoDockerTask:
    extend: core.makePresetDockerTask
    inputs:
    - generator.docker.container.name
    - generator.service.name
    config:
      template: mongo


  makeServiceTask:
    icon: üìú
    extend: core.makeServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.startCommand
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name

  
  makeFastApiApiServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: fastapi

  
  makeGoServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.goService.startCommand
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      serviceStartCommand: '{{ .GetValue "generator.goService.startCommand" }}'
      template: go

 
  makeNodeJsServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.nodeJsService.startCommand
    - generator.nodeJsService.runnerVersion
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      serviceStartCommand: '{{ .GetValue "generator.nodeJsService.startCommand" }}'
      runnerVersion: '{{ .GetValue "generator.nodeJsService.runnerVersion" }}'
      template: nodejs

 
  makePythonServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.pythonService.startCommand
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      serviceStartCommand: '{{ .GetValue "generator.pythonService.startCommand" }}'
      template: python


  makeStaticServiceTask:
    extend: core.makePresetServiceTask
    inputs:
    - generator.service.location
    - generator.service.name
    - generator.service.ports
    - generator.service.docker.image.name
    - generator.service.docker.container.name
    config:
      template: static

 
  makeHelmDeployment:
    icon: üö¢
    description: |
      Add helm charts to the project to make deployment easier.
    extend: core.runCoreScript
    dependencies:
    - core.isContainHelmCharts
    - core.showAdv
    inputs:
    - generator.service.name
    config:
      start: |
        {{- $d := .Decoration -}}
        SERVICE_NAME="{{ .GetValue "generator.service.name" }}"
        invoke_core_py create_helm_deployment "${SERVICE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Deployment created{{ $d.Normal }}"
  

  makeFastApiService:
    icon: ‚ö°
    description: Make Fast API service
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    inputs:
    - generator.fastApi.service.name
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiService'
      serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
      start: |
        {{- $d := .Decoration -}}
        create_link()
        {
          invoke_core_py add_link "${1}" "${2}"
          invoke_core_sh link_resource "${1}" "${2}"
        }
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        invoke_core_py create_fast_service "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}"
        if [ -f "./main.zaruba.yaml" ]
        then
          if [ ! -d "./shared-libs/python/helpers" ]
          then
            mkdir -p "./shared-libs/python/helpers"
            cp -rnT "./${SERVICE_NAME}/helpers" "./shared-libs/python/helpers"
            create_link "shared-libs/python/helpers" "${SERVICE_NAME}/helpers"
          fi
        fi
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API service created: ${SERVICE_NAME}{{ $d.Normal }}"
        

  makeFastApiModule:
    icon: ‚ö°
    description: Make FastAPI module
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
      moduleName: '{{ .GetValue "generator.fastApi.module.name" }}'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        invoke_core_sh should_be_dir "./${SERVICE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME} directory should be exist{{ $d.Normal }}"
        invoke_core_py create_fast_module "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API module created: ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"

  makeFastApiRoute:
    icon: ‚ö°
    description: Make FastAPI route handler
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.httpMethod
    - generator.fastApi.url
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
      moduleName: '{{ .GetValue "generator.fastApi.module.name" }}'
      httpMethod: '{{ .GetValue "generator.fastApi.httpMethod" }}'
      url: '{{ .GetValue "generator.fastApi.url" }}'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        URL={{ .SingleQuoteShellValue (.GetConfig "url") }}
        HTTP_METHOD={{ .SingleQuoteShellValue (.GetConfig "httpMethod") }}
        invoke_core_sh should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME}/${MODULE_NAME} directory should be exist{{ $d.Normal }}"
        invoke_core_py create_fast_route "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "http_method=${HTTP_METHOD}" "url=${URL}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API Route handler created: ${HTTP_METHOD} ${URL} on ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"
    

  makeFastApiEventHandler:
    icon: ‚ö°
    description: Make FastAPI event handler
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.event.name
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
      moduleName: '{{ .GetValue "generator.fastApi.module.name" }}'
      eventName: '{{ .GetValue "generator.fastApi.event.name" }}'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        EVENT_NAME={{ .SingleQuoteShellValue (.GetConfig "eventName") }}
        invoke_core_sh should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME}/${MODULE_NAME} directory should be exist{{ $d.Normal }}"
        invoke_core_py create_fast_event_handler "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "event_name=${EVENT_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API event handler created: ${EVENT_NAME} on ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"


  makeFastApiRpcHandler:
    icon: ‚ö°
    description: Make FastAPI Route
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.rpc.name
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiModule'
      serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
      moduleName: '{{ .GetValue "generator.fastApi.module.name" }}'
      eventName: '{{ .GetValue "generator.fastApi.rpc.name" }}'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        EVENT_NAME={{ .SingleQuoteShellValue (.GetConfig "eventName") }}
        invoke_core_sh should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME}/${MODULE_NAME} directory should be exist{{ $d.Normal }}"
        invoke_core_py create_fast_rpc_handler "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "event_name=${EVENT_NAME}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API RPC handler created: ${EVENT_NAME} on ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"


  makeFastApiCrud:
    icon: ‚ö°
    description: Make FastAPI crud
    inputs:
    - generator.fastApi.service.name
    - generator.fastApi.module.name
    - generator.fastApi.crud.entity
    - generator.fastApi.crud.fields
    extend: core.runCoreScript
    dependencies:
    - core.showAdv
    config:
      templateLocation: '{{ .GetEnv "ZARUBA_HOME" }}/scripts/templates/fastApiCrud'
      serviceName: '{{ .GetValue "generator.fastApi.service.name" }}'
      moduleName: '{{ .GetValue "generator.fastApi.module.name" }}'
      entityName: '{{ .GetValue "generator.fastApi.crud.entity" }}'
      fieldNames: '{{ .GetValue "generator.fastApi.crud.fields" }}'
      start: |
        {{- $d := .Decoration -}}
        TEMPLATE_LOCATION={{ .SingleQuoteShellValue (.GetConfig "templateLocation") }}
        SERVICE_NAME={{ .SingleQuoteShellValue (.GetConfig "serviceName") }}
        MODULE_NAME={{ .SingleQuoteShellValue (.GetConfig "moduleName") }}
        ENTITY_NAME={{ .SingleQuoteShellValue (.GetConfig "entityName") }}
        FIELD_NAMES={{ .SingleQuoteShellValue (.GetConfig "fieldNames") }}
        invoke_core_sh should_be_dir "./${SERVICE_NAME}/${MODULE_NAME}" "{{ $d.Bold }}{{ $d.Red }}${SERVICE_NAME} directory should be exist{{ $d.Normal }}"
        invoke_core_py create_fast_crud "template_location=${TEMPLATE_LOCATION}" "service_name=${SERVICE_NAME}" "module_name=${MODULE_NAME}" "entity_name=${ENTITY_NAME}" "field_names=${FIELD_NAMES}"
        echo üéâüéâüéâ
        echo "{{ $d.Bold }}{{ $d.Yellow }}Fast API module created: ${SERVICE_NAME}/${MODULE_NAME}{{ $d.Normal }}"