tasks:

  zrbHelmInstall:
    private: true
    extend: zrbGenerateAndRun
    dependencies:
      - zrbSetKubeContext
    configRefs:
      - zrbKube
      - zrbHelm
      - zrbDocker
    config:
      _validate: |
        {{ $d := .Decoration -}}
        if [ -z "{{ .GetConfig "releaseName" }}" ]
        then
          echo "{{ $d.Red }}Release name cannot be empty.{{ $d.Normal }}"
          exit 1
        fi
        if [ ! -d "{{ .GetConfig "chartLocation" }}" ]
        then
          echo "{{ $d.Red }}Chart Location doesn't exist: {{ .GetConfig "chartLocation" }}.{{ $d.Normal }}"
          exit 1
        fi
      _prepareBaseVariables: |
        _ZRB_RELEASE_NAME='{{ .GetConfig "releaseName" }}'
        _ZRB_KEBAB_RELEASE_NAME="$("{{ .ZarubaBin }}" str toKebab "${_ZRB_RELEASE_NAME}")"
        _ZRB_RAW_CONFIG_PORTS='{{ .GetConfig "ports" }}'
        . "{{ .ZarubaHome }}/zaruba-tasks/_base/helmChore/bash/prepareVariables.sh"
      _prepareBaseReplacementMap: |
        . "{{ .ZarubaHome }}/zaruba-tasks/_base/generateAndRun/bash/prepareReplacementMap.sh"
        . "{{ .ZarubaHome }}/zaruba-tasks/_base/helmChore/bash/prepareReplacementMap.sh"
      helmDryRun: '{{ if .GetValue "helmDryRun" }}{{ .GetValue "helmDryRun" }}{{ else }}false{{ end }}'
      runGeneratedScript: |
        {{ $d := .Decoration -}}
        if [ "$(isCommandError helm status "${_ZRB_KEBAB_RELEASE_NAME}")" -eq 1 ]
        then 
          echo "{{ $d.Yellow }}Install release: ${_ZRB_KEBAB_RELEASE_NAME}.{{ $d.Normal }}"
          helm install "${_ZRB_KEBAB_RELEASE_NAME}" "{{ .GetConfig "chartLocation" }}" {{ if .IsTrue (.GetConfig "helmDryRun") }}--dry-run {{ end }}--dependency-update --namespace "{{ .GetConfig "kubeNamespace" }}" --create-namespace -f "${_ZRB_GENERATED_SCRIPT_LOCATION}/values.yaml" 
        else
          echo "{{ $d.Yellow }}Upgrade release: ${_ZRB_KEBAB_RELEASE_NAME}.{{ $d.Normal }}"
          helm upgrade "${_ZRB_KEBAB_RELEASE_NAME}" "{{ .GetConfig "chartLocation" }}"  {{ if .IsTrue (.GetConfig "helmDryRun") }}--dry-run {{ end }}--dependency-update --namespace "{{ .GetConfig "kubeNamespace" }}" --create-namespace -f "${_ZRB_GENERATED_SCRIPT_LOCATION}/values.yaml"
        fi
        rm -Rf "${_ZRB_GENERATED_SCRIPT_LOCATION}"
