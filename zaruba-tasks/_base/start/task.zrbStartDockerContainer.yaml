tasks:

  zrbStartDockerContainer:
    icon: üê≥
    description: |
      Start docker container and wait until it is ready.
      If container is already started, it's stdout/stderr will be shown.
      If container is exist but not started, it will be started.
      If container is not exist, it will be created and started.
      Common configs:
        setup          : Script to be executed before start service or check service readiness.
        beforeStart    : Script to be executed before start service.
        afterStart     : Script to be executed after start service.
        beforeCheck    : Script to be executed before check service readiness.
        afterCheck     : Script to be executed before check service readiness.
        finish         : Script to be executed after start service or check service readiness.
        useImagePrefix : Whether image prefix should be used or not
        imagePrefix    : Image prefix
        imageName      : Image name
        imageTag       : Image tag
        containerName  : Name of the container
        ports          : Port to be checked to confirm service readiness, 
                         separated by new line.
        volumes        : Host-container volume mappings,
                         separated by new line.
        rebuild        : Should container be rebuild (This will not rebuild the image)
        command        : Command to be used (Single Line).
                         Leave blank to use container's CMD.
                         The command will be executed from inside the container.
        checkCommand   : Command to check container readiness (Single Line).
                         The command will be executed from inside the container.
        localhost      : Localhost mapping (e.g: host.docker.container)
    private: true
    extend: zrbStartApp
    dependencies:
      - updateProjectLinks
      - zrbCreateDockerNetwork
    configRefs: 
      - zrbRunDockerContainer
      - zrbDocker
      - zrbDockerNetwork
    configs:
      restartPolicy: on-failure
      _checkContainerState: |
        echo "üîé ${_BOLD}${_YELLOW}Waiting docker container '${CONTAINER_NAME}' running status${_NORMAL}"
        until [ "$(inspectDocker "container" ".State.Running" "${CONTAINER_NAME}")" = true ]
        do
          sleep 1
        done
        echo "üîé ${_BOLD}${_YELLOW}Waiting docker container '${CONTAINER_NAME}' healthcheck${_NORMAL}"
        while [ "$(inspectDocker "container" ".State.Health" "${CONTAINER_NAME}")" = false ]
        do
          sleep 1
        done
        echo "üîé ${_BOLD}${_YELLOW}Docker container '${CONTAINER_NAME}' is running${_NORMAL}"
      _checkCommand: |
        {{ if .GetConfig "checkCommand" -}}
        (echo $- | grep -Eq ^.*e.*$) && _OLD_STATE=-e || _OLD_STATE=+e
        set +e
        sleep 3
        {{ $checkCommand := .Util.Str.Trim (.GetConfig "checkCommand") "\n" -}}
        echo "üîé ${_BOLD}${_YELLOW}Run check in '${CONTAINER_NAME}': {{ .Util.Str.EscapeShellValue $checkCommand }}${_NORMAL}"
        docker exec "${CONTAINER_NAME}" {{ $checkCommand }}
        until [ "$?" = "0" ]
        do
          sleep 3
          docker exec "${CONTAINER_NAME}" {{ $checkCommand }}
        done
        set "${_OLD_STATE}"
        {{ end -}}
      _checkConfigPorts: |
        {{ $this := . -}}
        {{ range $index, $port := .Util.Str.Split (.Util.Str.Trim (.GetConfig "ports") "\n ") "\n" -}}
          {{ if ne $port "" -}}
            {{ $portParts := $this.Util.Str.Split ($this.Util.Str.Trim $port  " ") ":" -}}
            {{ $hostPort := index $portParts 0 -}}
            echo "üîé ${_BOLD}${_YELLOW}Waiting for host port: '{{ $hostPort }}'${_NORMAL}"
            waitPort "localhost" {{ $hostPort }}
            echo "üîé ${_BOLD}${_YELLOW}Host port '{{ $hostPort }}' is ready${_NORMAL}"
          {{ end -}}
        {{ end -}}
      _check: |
        {{ .GetConfig "_checkContainerState" }}
        {{ .GetConfig "_checkConfigPorts" }}
        {{ .GetConfig "_checkCommand" }}
        sleep 1
      check: ''
      