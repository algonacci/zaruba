configs:

  prepareZtplDeploymentName:
    useImagePrefix: true
    imagePrefix: '{{ .GetValue "defaultImagePrefix" }}'
    namespace: default
    imageName: ztpl-app-image-name
    imageTag: latest
    replicaCount: 1
    start: |
      if [ ! -d "./venv" ]
      then
        echo "${_YELLOW}ðŸš§ Create virtual environment.${_NORMAL}"
        python -m venv ./venv
      fi
      source ./venv/bin/activate
        echo "${_YELLOW}ðŸš§ Install pip packages.${_NORMAL}"
      pip install -r requirements.txt
      DEPLOYMENT_CONFIG={}
      IMAGE_NAME="{{ .GetDockerImageName }}"
      IMAGE_TAG="{{ if .GetConfig "imageTag" }}{{ .GetConfig "imageTag" }}{{ else }}latest{{ end }}"
      RAW_ENVS='{{ .Util.Json.FromStringDict .GetEnvs }}'
      RAW_PORTS='{{ .GetConfig "ports" }}'
      . '{{ .GetProjectPath "zaruba-tasks/ztplDeploymentName/bash/util.sh" }}'
      . '{{ .GetProjectPath "zaruba-tasks/ztplDeploymentName/bash/prepareVariables.sh" }}'
      echo "${_YELLOW}ðŸš§ Deployment config:${_NORMAL} ${DEPLOYMENT_CONFIG}"
      echo "${DEPLOYMENT_CONFIG}" > '{{ .GetProjectPath "ztplDeploymentDirectory/config/config.json" }}'
      if [ -d "./chart" ]
      then
        echo "${_YELLOW}ðŸš§ Prepare chart dependencies.${_NORMAL}"
        cd ./chart
        helm dependency upgrade
        cd ..
      fi
      echo "${_YELLOW}ðŸš§ Preparation completed.${_NORMAL}"
    ports: |
      ztplAppYamlPorts