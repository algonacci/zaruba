{{ $certificateFile := print (.GetWorkPath "letsencrypt") "/live/" (.GetConfig "serverName") "/fullchain.pem" -}}
{{ $certificateExist := (.IsFileExist $certificateFile) -}}
{{ $optionSslNginxFile := .GetWorkPath "letsencrypt/options-ssl-nginx.conf" -}}
{{ $optionSslNginxExist := (.IsFileExist $optionSslNginxFile) -}}
{{ if .GetConfig "backendAddr" -}}
upstream backend {
    server {{ .GetConfig "backendAddr" }};
}
{{ end -}}

server {
    {{ if $certificateExist -}}
    listen       443 ssl;
    listen  [::]:443 ssl;
    {{ else -}}
    listen       443;
    listen  [::]:443;
    {{ end -}}

    server_name  {{ .GetConfig "serverName" }} www.{{ .GetConfig "serverName" }}.com;
    access_log  /var/log/nginx/host.access.log;
    error_log   /var/log/nginx/host.error.log;

    {{ if $certificateExist -}}
    ssl_certificate     /etc/letsencrypt/live/{{ .GetConfig "serverName" }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ .GetConfig "serverName" }}/privkey.pem;
    {{ end -}}

    {{ if $optionSslNginxExist -}}
    include /etc/letsencrypt/options-ssl-nginx.conf;
    {{ end -}}

    {{ if .GetConfig "backendAddr" -}}
    root /usr/share/nginx/html;
    location / {
        try_files $uri @backend;
    }

    location @backend {
        proxy_pass http://backend;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Following is necessary for Websocket support
        #proxy_http_version 1.1;
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection "upgrade";
    }
    {{ else -}}
    location / {
        allow all;
        root /usr/share/nginx/html;
    }
    {{ end -}}
}

server {
    listen       80 default_server;
    listen  [::]:80 default_server;

    server_name  {{ .GetConfig "serverName" }} www.{{ .GetConfig "serverName" }}.com;
    access_log  /var/log/nginx/host.access.log;
    error_log   /var/log/nginx/host.error.log;

    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }

    {{ if $certificateExist -}}
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
    {{ else if .GetConfig "backendAddr" -}}
    root /usr/share/nginx/html;
    location / {
        try_files $uri @backend;
    }

    location @backend {
        proxy_pass http://backend;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # Following is necessary for Websocket support
        #proxy_http_version 1.1;
        #proxy_set_header Upgrade $http_upgrade;
        #proxy_set_header Connection "upgrade";
    }
    {{ else -}}
    location / {
        allow all;
        root /usr/share/nginx/html;
    }
    {{ end -}}
}