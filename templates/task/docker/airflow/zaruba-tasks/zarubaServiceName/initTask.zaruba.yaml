tasks:

  createZarubaServiceNameDb:
    extend: zarubaAirflowPostgreServiceExecSql
    dependencies:
      - zarubaAirflowPostgreTask
    config:
      queries: 'CREATE DATABASE {{ .GetConfig "dbName" }}'
    configRef: createZarubaServiceNameDb
    envRef: createZarubaServiceNameDb

  runZarubaServiceNameConfigurator:
    icon: üõ†Ô∏è
    extend: core.startDockerContainer
    dependencies:
      - zarubaAirflowRedisTask
      - zarubaAirflowPostgreTask
      - createZarubaServiceNameDb
      - pullZarubaServiceNameImage
    timeout: 1h
    inputs:
      - zarubaServiceNameRunInLocal
    configRefs:
      - zarubaServiceNameConfigurator
      - zarubaServiceName
    envRefs:
      - zarubaServiceName

  makeZarubaServiceNameInitScript:
    icon: üõ†Ô∏è
    extend: core.runShellScript
    location: ../../zarubaServiceName
    dependencies:
      - runZarubaServiceNameConfigurator
    config:
      start: |
        {{ $d := .Decoration }}
        {{ $err := .WriteFile (.GetWorkPath "init.sh") (.ParseFile "init.template.sh" ) -}}
        {{ if $err -}}
          echo {{ $d.Bold }}{{ $d.Red }}fail to generate init.sh: {{ $err }}{{ $d.Normal }}
        {{ end -}}
    configRef: makeZarubaServiceNameInitScript
    envRef: makeZarubaServiceNameInitScript

  initZarubaServiceName:
    icon: üõ†Ô∏è
    extend: core.runInContainer
    location: ../../zarubaServiceName
    dependencies:
      - makeZarubaServiceNameInitScript
      - runZarubaServiceNameConfigurator
    config:
      beforeStart: |
        {{ $d := .Decoration }}
        INIT_FILE="{{ .GetWorkPath "init.sh" }}"
        if [ -f "${INIT_FILE}" ]
        then
          docker cp "${INIT_FILE}" "{{ .GetConfig "containerName" }}:/opt/airflow/init.sh"
        else
          echo "{{ $d.Bold }}{{ $d.Red }}{{ .GetWorkPath "init.sh" }} does not exist{{ $d.Normal }}"
          exit 1
        fi
      commands: |
        airflow version
        airflow db upgrade
        airflow users create --username "{{ .GetConfig "wwwUserName" }}" --password "{{ .GetConfig "wwwPassword" }}" --firstname "{{ .GetConfig "wwwFirstName" }}" --lastname "{{ .GetConfig "wwwLastName" }}" --role "{{ .GetConfig "wwwRole" }}" --email "{{ .GetConfig "wwwEmail" }}"
        /opt/airflow/init.sh
      afterStart:
        sleep {{ .GetEnv "INIT_DELAY" }}
    configRefs:
      - initZarubaServiceName
      - zarubaServiceNameConfigurator
    envRef: initZarubaServiceName

