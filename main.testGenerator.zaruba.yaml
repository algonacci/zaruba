inputs:

  runPlaygroundDelay:
    default: 10
    description: Delay after run playground
  

tasks:


  testMakeProject:
    icon: 游눌
    location: ./playground
    dependencies:
    - clearLog
    - build
    - preparePlayground
    - testSetupPyenv
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please initProject setup.injectBootstrap=false
        ../zaruba please setProjectValue variable.name=dockerImagePrefix::default variable.value=localhost:9999 setup.injectBootstrap=false
  

  testMakeHelmCharts:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeProject
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeHelmCharts setup.injectBootstrap=false


  testMakeSubrepo:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeProject
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please addSubrepo subrepo.url="https://github.com/state-alchemists/fibonacci-clock" subrepo.prefix="fibo" setup.injectBootstrap=false
        ../zaruba please addSubrepo subrepo.url="https://github.com/state-alchemists/fibonacci-clock" subrepo.prefix="other-fibo" setup.injectBootstrap=false
        ../zaruba please initSubrepos setup.injectBootstrap=false
        ../zaruba please pullSubrepos setup.injectBootstrap=false


  testMakeFastAPIProject:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeSubrepo
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeFastService generator.service.location=myservice advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false


  testMakeTasks:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPIProject
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeServiceTask generator.service.location=fibo setup.injectBootstrap=false
        ../zaruba please makeServiceTask generator.service.location=myservice generator.service.type=fastapi advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false
        ../zaruba please makeDockerTask generator.docker.image.name=rabbitmq advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false
        

  testMakeFastAPIModule:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPIProject
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeFastModule generator.service.location=myservice generator.module.name=mymodule advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false


  testMakeFastAPIRoute:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPIModule
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeFastRoute generator.service.location=myservice generator.module.name=mymodule generator.url=/hello advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false


  testMakeFastAPIEventHandler:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPIRoute
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeFastEventHandler generator.service.location=myservice generator.module.name=mymodule generator.event.name=myEvent advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false


  testMakeFastAPIRPCHandler:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPIEventHandler
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeFastRPCHandler generator.service.location=myservice generator.module.name=mymodule generator.event.name=myRPC advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false


  testMakeFastAPICRUD:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPIRPCHandler
    extend: core.runShellScript 
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please makeFastCRUD generator.service.location=myservice generator.module.name=mymodule generator.crud.entity=book generator.crud.fields=title,author,synopsis advertisement.show=no setupInitPyUtil=no setup.injectBootstrap=false
  

  testUpdateEnv:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeFastAPICRUD
    - testMakeHelmCharts
    extend: core.runShellScript
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please updateEnv setup.injectBootstrap=false


  testRun:
    icon: 游눌
    location: ./playground
    dependencies:
    - testUpdateEnv
    extend: core.runShellScript
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please run autostop setup.injectBootstrap=false


  testRunContainer:
    icon: 游눌
    location: ./playground
    dependencies:
    - testRun
    extend: core.runShellScript
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please removeContainer setup.injectBootstrap=false
        ../zaruba please runContainer autostop setup.injectBootstrap=false
        ../zaruba please removeContainer setup.injectBootstrap=false


  testBuildImage:
    icon: 游눌
    location: ./playground
    dependencies:
    - testRunContainer
    extend: core.runShellScript
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        git add . -A && git commit -m 'first commit'
        git tag -a v0.0.0 -m 'version 0.0.0'
        ../zaruba please buildImage docker.env=default setup.injectBootstrap=false


  testGenerator:
    icon: 游눌
    location: ./playground
    dependencies:
    - testMakeProject
    - testMakeSubrepo
    - testMakeTasks
    - testMakeFastAPIProject
    - testMakeFastAPIModule
    - testMakeFastAPIRoute
    - testMakeFastAPIEventHandler
    - testMakeFastAPIRPCHandler
    - testMakeFastAPICRUD
    - testUpdateEnv
    - testRun
    - testRunContainer
    - testBuildImage


  testLogging:
    icon: 游눌
    location: ./playground
    dependencies:
    - testGenerator
    extend: core.runShellScript
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please showLog log.keyword=myservice setup.injectBootstrap=false
        ../zaruba please clearLog setup.injectBootstrap=false
  

  runContainerRegistry:
    icon: 游냡
    location: ./
    extend: core.startDockerContainer
    dependencies:
    - clearLog
    config:
      useImagePrefix: false
      imageName: registry
      imageTag: 2
      containerName: containerRegistry
      localhost: host.docker.internal
      port::9999: 5000


  testPushImage:
    icon: 游눌
    location: ./playground
    dependencies:
    - clearLog
    - runContainerRegistry
    - testGenerator
    extend: core.runShellScript
    timeout: 1h
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please pushImage docker.env=default setup.injectBootstrap=false
  

  runPlayground:
    icon: 游댣
    location: ./playground
    inputs:
    - runPlaygroundDelay
    dependencies:
    - clearLog
    - build
    - testGenerator
    extend: core.startService
    config:
      start: |
        set -e
        ZARUBA_HOME="$(realpath "..")"
        ../zaruba please removeContainer setup.injectBootstrap=false
        ../zaruba please runContainer setup.injectBootstrap=false
      afterCheck: |
        sleep 1
        echo "Wait for {{ .GetValue "runPlaygroundDelay" }} s"
        sleep {{ .GetValue "runPlaygroundDelay" }}
    lconfig:
      ports: [3000, 8080, 15672, 5672]


  testGeneratedService:
    icon: 游눌
    location: ./playground
    dependencies:
    - clearLog
    - runPlayground
    extend: core.runShellScript
    config:
      start: |
        ZARUBA_HOME="$(realpath "..")"
        stopService() {
          docker stop rabbitmq myservice fibo
        }
        echo "Create new book"
        RESPONSE="$(curl --header "Content-Type: application/json" --request POST --data '{"title":"Homo Sapiens", "author":"Yuval Noah Harari", "synopsis":"A brief history of mankind"}' "localhost:3000/books/")"
        echo $RESPONSE
        if [ "$RESPONSE" != '{"title":"Homo Sapiens","author":"Yuval Noah Harari","synopsis":"A brief history of mankind","id":1}' ]
        then
          echo "Unexpected response"
          stopService
          exit 1
        fi
        echo "Get first book"
        RESPONSE="$(curl "localhost:3000/books/1")"
        echo $RESPONSE
        if [ "$RESPONSE" != '{"title":"Homo Sapiens","author":"Yuval Noah Harari","synopsis":"A brief history of mankind","id":1}' ]
        then
          echo "Unexpected response"
          stopService
          exit 1
        fi
        echo "Update book"
        RESPONSE="$(curl --header "Content-Type: application/json" --request PUT --data '{"title":"Sapiens", "author":"Yuval Noah Harari", "synopsis":"A brief history of mankind"}' "localhost:3000/books/1")"
        echo $RESPONSE
        if [ "$RESPONSE" != '{"title":"Sapiens","author":"Yuval Noah Harari","synopsis":"A brief history of mankind","id":1}' ]
        then
          echo "Unexpected response"
          stopService
          exit 1
        fi
        echo "Get all books"
        RESPONSE="$(curl "localhost:3000/books/")"
        echo $RESPONSE
        if [ "$RESPONSE" != '[{"title":"Sapiens","author":"Yuval Noah Harari","synopsis":"A brief history of mankind","id":1}]' ]
        then
          echo "Unexpected response"
          stopService
          exit 1
        fi
        echo "Delete book"
        RESPONSE="$(curl --header "Content-Type: application/json" --request DELETE "localhost:3000/books/1")"
        if [ "$RESPONSE" != '{"title":"Sapiens","author":"Yuval Noah Harari","synopsis":"A brief history of mankind","id":1}' ]
        then
          echo "Unexpected response"
          stopService
          exit 1
        fi
        echo "Get all books"
        RESPONSE="$(curl "localhost:3000/books/")"
        echo $RESPONSE
        if [ "$RESPONSE" != '[]' ]
        then
          echo "Unexpected response"
          stopService
          exit 1
        fi
        stopService
